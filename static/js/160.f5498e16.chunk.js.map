{"version":3,"file":"static/js/160.f5498e16.chunk.js","mappings":"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","sources":["node_modules/react-native-bouncy-checkbox/lib/BouncyCheckbox.style.ts","node_modules/react-native-bouncy-checkbox/lib/BouncyCheckbox.tsx","components/DevAdminComponents/Freight.js"],"sourcesContent":["import { ViewStyle, TextStyle, StyleSheet } from \"react-native\";\n\nexport const _iconContainer = (\n  size: number,\n  checked: boolean,\n  fillColor: string,\n  unfillColor: string,\n): ViewStyle => {\n  return {\n    width: size,\n    height: size,\n    borderRadius: size / 2,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: checked ? fillColor : unfillColor,\n  };\n};\n\nexport const _textStyle = (checked: boolean): TextStyle => {\n  return {\n    fontSize: 16,\n    color: \"#757575\",\n    textDecorationLine: checked ? \"line-through\" : \"none\",\n  };\n};\n\nexport default StyleSheet.create<any>({\n  container: {\n    alignItems: \"center\",\n    flexDirection: \"row\",\n  },\n  iconImageStyle: {\n    width: 10,\n    height: 10,\n  },\n  textContainer: {\n    marginLeft: 16,\n  },\n  iconContainer: (\n    size: number,\n    checked: boolean,\n    fillColor: string,\n    unfillColor: string,\n  ) => ({\n    width: size,\n    height: size,\n    borderRadius: size / 2,\n    backgroundColor: checked ? fillColor : unfillColor,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  }),\n  innerIconContainer: (size: number, fillColor: string) => ({\n    width: size,\n    height: size,\n    borderWidth: 1,\n    borderColor: fillColor,\n    borderRadius: size / 2,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  }),\n});\n","import * as React from \"react\";\nimport {\n  Text,\n  View,\n  Image,\n  Animated,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  Pressable,\n  ImageSourcePropType,\n  TouchableWithoutFeedbackProps,\n  ImageStyle,\n} from \"react-native\";\nimport styles, { _textStyle } from \"./BouncyCheckbox.style\";\n\ntype BaseTouchableProps = Pick<\n  TouchableWithoutFeedbackProps,\n  Exclude<keyof TouchableWithoutFeedbackProps, \"onPress\">\n>;\n\nexport interface IBouncyCheckboxProps extends BaseTouchableProps {\n  size?: number;\n  text?: string;\n  fillColor?: string;\n  isChecked?: boolean;\n  unfillColor?: string;\n  disableText?: boolean;\n  bounceEffect?: number;\n  bounceFriction?: number;\n  useNativeDriver?: boolean;\n  disableBuiltInState?: boolean;\n  ImageComponent?: any;\n  TouchableComponent?: any;\n  bounceEffectIn?: number;\n  bounceEffectOut?: number;\n  bounceVelocityIn?: number;\n  bounceVelocityOut?: number;\n  bouncinessIn?: number;\n  bouncinessOut?: number;\n  iconComponent?: React.ReactNode;\n  textComponent?: React.ReactNode;\n  iconStyle?: StyleProp<ViewStyle>;\n  innerIconStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  textStyle?: StyleProp<TextStyle>;\n  iconImageStyle?: StyleProp<ImageStyle>;\n  textContainerStyle?: StyleProp<ViewStyle>;\n  checkIconImageSource?: ImageSourcePropType;\n  onPress?: (checked: boolean) => void;\n}\n\ninterface IState {\n  checked: boolean;\n  springValue: Animated.Value;\n  bounceValue: Animated.Value;\n}\n\nconst defaultCheckImage = require(\"./check.png\");\n\nclass BouncyCheckbox extends React.Component<IBouncyCheckboxProps, IState> {\n  constructor(props: IBouncyCheckboxProps) {\n    super(props);\n    this.state = {\n      checked: false,\n      springValue: new Animated.Value(1),\n      bounceValue: new Animated.Value(1),\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ checked: this.props.isChecked || false });\n  }\n\n  bounceEffect = (value: number, velocity: number, bounciness: number) => {\n    const { useNativeDriver = true } = this.props;\n    Animated.spring(this.state.bounceValue, {\n      toValue: value,\n      velocity,\n      bounciness,\n      useNativeDriver,\n    }).start();\n  };\n\n  renderCheckIcon = () => {\n    const { checked } = this.state;\n    const {\n      size = 25,\n      iconStyle,\n      iconComponent,\n      iconImageStyle,\n      fillColor = \"#ffc484\",\n      ImageComponent = Image,\n      unfillColor = \"transparent\",\n      disableBuiltInState,\n      isChecked,\n      innerIconStyle,\n      checkIconImageSource = defaultCheckImage,\n    } = this.props;\n\n    const checkStatus = disableBuiltInState ? isChecked! : checked;\n    return (\n      <Animated.View\n        style={[\n          { transform: [{ scale: this.state.bounceValue }] },\n          styles.iconContainer(size, checkStatus, fillColor, unfillColor),\n          iconStyle,\n        ]}\n      >\n        <View\n          style={[styles.innerIconContainer(size, fillColor), innerIconStyle]}\n        >\n          {iconComponent ||\n            (checkStatus && (\n              <ImageComponent\n                source={checkIconImageSource}\n                style={[styles.iconImageStyle, iconImageStyle]}\n              />\n            ))}\n        </View>\n      </Animated.View>\n    );\n  };\n\n  renderCheckboxText = () => {\n    const {\n      text,\n      textComponent,\n      isChecked,\n      textStyle,\n      textContainerStyle,\n      disableBuiltInState,\n      disableText = false,\n    } = this.props;\n    const { checked } = this.state;\n    const checkDisableTextType = typeof disableText === \"undefined\";\n    return (\n      (!disableText || checkDisableTextType) &&\n      (textComponent || (\n        <View style={[styles.textContainer, textContainerStyle]}>\n          <Text\n            style={[\n              _textStyle(disableBuiltInState ? isChecked! : checked),\n              textStyle,\n            ]}\n          >\n            {text}\n          </Text>\n        </View>\n      ))\n    );\n  };\n\n  onPress = () => {\n    const { disableBuiltInState = false } = this.props;\n    const { checked } = this.state;\n    if (!disableBuiltInState) {\n      this.setState({ checked: !checked }, () => {\n        this.props.onPress && this.props.onPress(this.state.checked);\n      });\n    } else {\n      this.props.onPress && this.props.onPress(this.state.checked);\n    }\n  };\n\n  render() {\n    const {\n      style,\n      bounceEffectIn = 0.9,\n      bounceEffectOut = 1,\n      bounceVelocityIn = 0.1,\n      bounceVelocityOut = 0.4,\n      bouncinessIn = 20,\n      bouncinessOut = 20,\n      TouchableComponent = Pressable,\n    } = this.props;\n    return (\n      <TouchableComponent\n        {...this.props}\n        style={[styles.container, style]}\n        onPressIn={() => {\n          this.bounceEffect(bounceEffectIn, bounceVelocityIn, bouncinessIn);\n        }}\n        onPressOut={() => {\n          this.bounceEffect(bounceEffectOut, bounceVelocityOut, bouncinessOut);\n        }}\n        onPress={this.onPress}\n      >\n        {this.renderCheckIcon()}\n        {this.renderCheckboxText()}\n      </TouchableComponent>\n    );\n  }\n}\n\nexport default BouncyCheckbox;\n","import {\r\n    Box,\r\n    Button,\r\n    Center,\r\n    Flex,\r\n    HStack,\r\n    Icon,\r\n    Image as NativeImage,\r\n    Input,\r\n    Modal,\r\n    NativeBaseProvider,\r\n    Popover,\r\n    Pressable,\r\n    Spinner,\r\n    Stack,\r\n    Text,\r\n    VStack,\r\n    useBreakpointValue,\r\n    TextArea,\r\n    InputRightAddon,\r\n    InputGroup,\r\n    InputLeftAddon,\r\n    Select,\r\n    CheckIcon,\r\n    PresenceTransition,\r\n    CloseIcon,\r\n    ScrollView as ScrollViewNative,\r\n    Divider,\r\n    useDisclosure,\r\n    useDisclose,\r\n    FormControl,\r\n    Checkbox,\r\n    useToast\r\n} from 'native-base';\r\nimport { DataTable } from 'react-native-paper';\r\n\r\nimport React, { useEffect, useRef, useState, useMemo, useCallback, useReducer } from 'react';\r\nimport {\r\n    Dimensions,\r\n    ImageBackground,\r\n    TouchableOpacity,\r\n    TouchableWithoutFeedback,\r\n    StyleSheet,\r\n    View,\r\n    PanResponder,\r\n    Animated,\r\n    InputAccessoryView,\r\n    FlatList,\r\n    ScrollView,\r\n    TouchableHighlight,\r\n    TextInput,\r\n    Image as RNImage\r\n} from 'react-native';\r\nimport 'react-native-gesture-handler';\r\nimport {\r\n    AntDesign,\r\n    FontAwesome,\r\n    Ionicons,\r\n    MaterialCommunityIcons,\r\n    MaterialIcons,\r\n    Entypo,\r\n    FontAwesome5,\r\n    EvilIcons\r\n} from 'react-native-vector-icons';\r\n// import { createDrawerNavigator } from '@react-navigation/drawer';\r\nimport { debounce } from 'lodash';\r\nimport { useNavigation } from '@react-navigation/core';\r\nimport axios from 'axios';\r\nimport { createUserWithEmailAndPassword, fetchSignInMethodsForEmail, signOut } from 'firebase/auth';\r\nimport { addDoc, collection, doc, getDoc, getFirestore, onSnapshot, setDoc, arrayUnion, updateDoc, deleteField } from 'firebase/firestore';\r\nimport moment from 'moment';\r\nimport { authForCreateUser } from '../../firebasecontrolCreateUser';\r\nimport './../style.css';\r\nimport { projectControlFirestore, projectControlAuth, projectExtensionFirestore, projectExtensionAuth, projectControlFirebase, projectExtensionFirebase } from \"../../crossFirebase\";\r\nimport { launchImageLibrary } from 'react-native-image-picker';\r\nimport { getStorage, ref, uploadBytes, getDownloadURL, listAll, deleteObject } from 'firebase/storage';\r\nimport FastImage from 'react-native-fast-image-web-support';\r\nimport MobileViewDrawer from './SideDrawer/MobileViewDrawer';\r\nimport SideDrawer from './SideDrawer/SideDrawer';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport DraggableFlatList from \"react-native-draggable-flatlist\";\r\nimport { Calendar, LocaleConfig } from 'react-native-calendars';\r\nimport { DragSortableView } from 'react-native-drag-sort';\r\nimport {\r\n    setVehicleListData,\r\n    setSupplyChainsCostsData,\r\n    setSelectedPaidTo,\r\n    setSelectedExpenseName,\r\n    setSupplyChainsCostsModalVisible,\r\n    setVehicleListSupplyChainsCostsData,\r\n    setDeleteImageVisible,\r\n    setSelectedImages,\r\n    setAddAnotherImages,\r\n    setIsAddPhotoVisible,\r\n    setUploadImagesModalVisible,\r\n    setUploadImagesButtonLoading,\r\n    setViewImagesModalVisible,\r\n    setViewImagesData,\r\n    setLoadingModalVisible,\r\n    setAddVehicleListData,\r\n    setEditVehicleModalVisible,\r\n    setFobPriceHistoryModalVisible,\r\n    setSelectedButton,\r\n    setAddCountryModalVisible,\r\n    setAddPortModalVisible,\r\n    setDeletePortModalVisible,\r\n    setAddPortsForCountriesModalVisible,\r\n    setCountryPortsData,\r\n    setDeleteCountryModalVisible\r\n} from './redux/store';\r\nimport BouncyCheckbox from \"react-native-bouncy-checkbox\";\r\n// import { TextInput } from 'react-native-gesture-handler';\r\nimport { nanoid } from 'nanoid';\r\nimport { cloneDeep, merge } from 'lodash';\r\nimport StickyHeader from './Header/StickyHeader';\r\nimport { UsePagination } from './VehicleListComponent/UsePagination';\r\n// import { CollectionGroup } from 'firebase-admin/firestore';\r\nconst { width } = Dimensions.get('window');\r\nlet selectedScreen = 'FREIGHT'\r\n\r\nlet nameVariable = {\r\n    text: ''\r\n}\r\n\r\nlet defaultSelectedButton = 'countries';\r\n\r\nlet selectedPort = '';\r\nlet selectedCountry = '';\r\nlet selectedPortForCountry = '';\r\n\r\nconst firestore = getFirestore();\r\n\r\nconst getEmailOfCurrentUser = () => {\r\n    const user = projectControlAuth.currentUser;\r\n    if (user) {\r\n        const email = user.email;\r\n        return email;\r\n    } else {\r\n        // console.log('No user is currently authenticated');\r\n        return null;\r\n    }\r\n};\r\n\r\nconst SearchablePortDropdown = ({ modalAddOpen }) => {\r\n    // const [selectedItem, setSelectedItem] = useState(null);\r\n    const [query, setQuery] = useState('');\r\n    const [isDropdownVisible, setIsDropdownVisible] = useState(false);\r\n    const [data, setData] = useState([]); // Initialize data state with an empty array\r\n    const searchRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        // Your data fetching logic here\r\n        const docRef = doc(projectExtensionFirestore, 'CustomerCountryPort', 'PortsDoc');\r\n\r\n        // This will start the listener\r\n        const unsubscribe = onSnapshot(docRef, (docSnap) => {\r\n            if (docSnap.exists()) {\r\n                const data = docSnap.data();\r\n                const formattedData = Object.keys(data)\r\n                    .map((key) => ({\r\n                        ports: key.replace(/_/g, '.'),\r\n                        ...data[key],\r\n                    }))\r\n                    .sort((a, b) => a.sortOrder - b.sortOrder); // Sorting based on the sortOrder field\r\n                setData(formattedData);\r\n            } else {\r\n                console.log('No such document!');\r\n            }\r\n        }, (error) => {\r\n            console.error('Error fetching countries: ', error);\r\n        });\r\n\r\n        // This will unsubscribe from the listener when the component is unmounted\r\n        return () => unsubscribe();\r\n    }, []);\r\n\r\n    const filteredData = data.filter((item) =>\r\n        item.ports.toLowerCase().includes(query.toLowerCase().trim()) ||\r\n        item.country.toLowerCase().includes(query.toLowerCase().trim())\r\n    );\r\n\r\n    const renderItem = ({ item }) => (\r\n        <TouchableOpacity\r\n            style={{\r\n                padding: 10,\r\n                borderBottomWidth: 1,\r\n                borderBottomColor: '#ccc',\r\n                width: '100%',\r\n                backgroundColor: '#85929F',\r\n            }}\r\n            onPress={() => {\r\n                // setSelectedItem(item);\r\n                selectedPortForCountry = item;\r\n                setQuery('');\r\n                setIsDropdownVisible(false);\r\n\r\n            }}\r\n        >\r\n            <Text style={{ color: 'white', }}>{item.ports}</Text>\r\n        </TouchableOpacity>\r\n    );\r\n\r\n    useEffect(() => {\r\n\r\n        searchRef.current.focus();\r\n\r\n    }, [isDropdownVisible])\r\n\r\n    useEffect(() => {\r\n\r\n        searchRef.current.focus();\r\n        setIsDropdownVisible(false);\r\n        selectedPortForCountry = '';\r\n\r\n    }, [modalAddOpen])\r\n\r\n    return (\r\n        <View style={{ flex: 1, width: '100%' }}>\r\n            <Button\r\n                title=\"Show Dropdown\"\r\n                onPress={() => {\r\n                    setIsDropdownVisible(!isDropdownVisible)\r\n\r\n                }}\r\n                bgColor={'#102A43'}\r\n                style={{ borderWidth: 1 }}\r\n                flex={1}\r\n            >\r\n                <View style={{\r\n                    flex: 1,\r\n                    flexDirection: 'row',\r\n                    justifyContent: 'space-between', // This will position the children at opposite ends\r\n                }}>\r\n                    <Text style={{ color: 'white', flex: 1, alignSelf: 'flex-start' }}>{selectedPortForCountry ? selectedPortForCountry.ports : 'Select Port'}</Text>\r\n                    <MaterialIcons style={{ alignSelf: 'flex-end' }} name={isDropdownVisible ? 'keyboard-arrow-up' : 'keyboard-arrow-down'} color='white' size={22} />\r\n                </View>\r\n            </Button>\r\n            <View style={{ display: isDropdownVisible ? 'flex' : 'none' }}>\r\n                <TextInput\r\n                    ref={searchRef}\r\n                    style={{\r\n                        outlineStyle: 'none',\r\n                        padding: 10,\r\n                        borderWidth: 1,\r\n                        borderColor: '#102A43',\r\n                        flex: 1,\r\n                    }}\r\n                    placeholder=\"Search...\"\r\n                    value={query}\r\n                    onChangeText={(text) => setQuery(text)}\r\n                />\r\n                <FlatList\r\n                    style={{ height: 150, width: '100%', borderWidth: 1, borderColor: '#102A43', borderRadius: 5, }}\r\n                    data={filteredData}\r\n                    renderItem={renderItem}\r\n                    keyExtractor={(item) => item.ports.toString()}\r\n                />\r\n            </View>\r\n\r\n        </View>\r\n    );\r\n};\r\n\r\n\r\n\r\nconst LoadingModal = () => {\r\n    const loadingModalVisible = useSelector((state) => state.loadingModalVisible);\r\n\r\n\r\n    return (\r\n        <View\r\n            style={{\r\n                position: 'absolute',\r\n                top: 0,\r\n                bottom: 0,\r\n                left: 0,\r\n                right: 0,\r\n                backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n                flex: 1,\r\n                display: loadingModalVisible ? 'flex' : 'none',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n            }}\r\n        >\r\n            {/* Content within the modal */}\r\n            <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\r\n                <Spinner size=\"lg\" color=\"white\" />\r\n                <Text style={{ color: 'white' }}>Loading, please wait!</Text>\r\n            </View>\r\n        </View>\r\n\r\n    );\r\n\r\n}\r\n\r\n\r\n//     const dispatch = useDispatch();\r\n//     const toast = useToast();\r\n//     const [inspectionData, setInspectionData] = useState(['Required', 'Not-Required', 'Optional']);\r\n//     const [key, setKey] = useState(nanoid());\r\n\r\n//     const [selectedStockStatusValue, setSelectedStockStatusValue] = useState(selectedValue);\r\n//     const screenWidth = Dimensions.get('window').width;\r\n\r\n\r\n\r\n//     const handleSaveStockStatus = async () => {\r\n\r\n//         dispatch(setLoadingModalVisible(true));\r\n\r\n//        const response = await axios.get('http://worldtimeapi.org/api/timezone/Asia/Tokyo');\r\n//         const { datetime } = response.data;\r\n//         const formattedTime = moment(datetime).format('YYYY/MM/DD [at] HH:mm:ss');\r\n//         const year = moment(datetime).format('YYYY');\r\n//         const month = moment(datetime).format('MM');\r\n//         const monthWithDay = moment(datetime).format('MM/DD');\r\n//         const date = moment(datetime).format('YYYY/MM/DD');\r\n//         const day = moment(datetime).format('DD');\r\n//         const time = moment(datetime).format('HH:mm');\r\n\r\n//         const timeWithMinutesSeconds = moment(datetime).format('HH:mm:ss');\r\n\r\n//         if (item.stockStatus == selectedStockStatusValue || selectedStockStatusValue == '' || selectedStockStatusValue == '__NativeBasePlaceHolder__') {\r\n//             dispatch(setLoadingModalVisible(false));\r\n//         }\r\n\r\n//         else {\r\n\r\n//             const stockStatusHistoryData = {\r\n//                 date: formattedTime,\r\n//                 stockStatus: selectedStockStatusValue,\r\n//                 changedBy: nameVariable.text,\r\n//             };\r\n//             const vehicleProductRef = doc(collection(projectExtensionFirestore, 'VehicleProducts'), item.stockID);\r\n\r\n//             try {\r\n//                 await updateDoc(vehicleProductRef, {\r\n//                     stockStatus: selectedStockStatusValue,\r\n//                     stockStatusHistory: arrayUnion(stockStatusHistoryData)\r\n//                 });\r\n//                 const logData = {\r\n//                     message: `Stock Status Updated: \"${nameVariable.text}\" updated \"${item.carName}\" stock status to \"${selectedStockStatusValue}\" with a reference number of \"${item.referenceNumber}\" using Vehicle List.`,\r\n//                     timestamp: formattedTime,\r\n//                     colorScheme: true,\r\n//                     keywords: [\r\n//                         formattedTime.toLowerCase(),\r\n//                         globalCurrentStockID.toLowerCase(),\r\n//                         `Stock Status Updated: \"${nameVariable.text}\" updated \"${item.carName}\" stock status to ${selectedStockStatusValue} with a reference number of \"${item.referenceNumber}\" using Vehicle List`.toLowerCase(),\r\n//                         'Stock Status'.toLowerCase(),\r\n//                         'Stock Status Updated'.toLowerCase(),\r\n//                         'Stock'.toLowerCase(),\r\n//                         'Status Updated'.toLowerCase(),\r\n//                         'Updated'.toLowerCase(),\r\n//                         globalSelectedCarName.toLowerCase(),\r\n//                         globalSelectedVehicleReferenceNumber.toLowerCase(),\r\n//                         nameVariable.text.toLowerCase(),\r\n//                         year.toLowerCase(),\r\n//                         month.toLowerCase(),\r\n//                         monthWithDay.toLowerCase(),\r\n//                         date.toLowerCase(),\r\n//                         day.toLowerCase(),\r\n//                         time.toLowerCase(),\r\n//                         timeWithMinutesSeconds.toLowerCase(),\r\n//                     ],\r\n//                 };\r\n//                 addLogToCollection(logData);\r\n//                 dispatch(setLoadingModalVisible(false));\r\n\r\n//                 // console.log('FOB Price updated successfully');\r\n//                 toast.show({\r\n//                     render: () => {\r\n//                         return <View style={{ backgroundColor: '#16A34A', padding: 5, borderRadius: 5 }}>\r\n//                             <Text style={{ color: 'white' }}>Stock Status updated successfully!</Text>\r\n//                         </View>;\r\n//                     }\r\n//                 })\r\n//             } catch (error) {\r\n//                 console.error(error);\r\n//                 toast.show({\r\n//                     render: () => {\r\n//                         return <View style={{ backgroundColor: '#DC2626', padding: 5, borderRadius: 5 }}>\r\n//                             <Text style={{ color: 'white' }}>Error updating: {error}</Text>\r\n//                         </View>;\r\n//                     }\r\n//                 })\r\n//             }\r\n//         }\r\n//     }\r\n\r\n//     return (\r\n//         <View style={{ flex: 1, flexDirection: 'row' }}>\r\n//             <View style={{ width: screenWidth >= 1360 ? '70%' : '88%', backgroundColor: 'white', }}>\r\n//                 <Select\r\n//                     selectedValue={selectedStockStatusValue}\r\n//                     onValueChange={(value) => {\r\n//                         setSelectedStockStatusValue(value);\r\n//                     }}\r\n//                     flex={3}\r\n//                     accessibilityLabel=\"---\"\r\n//                     placeholder=\"---\"\r\n//                     _selectedItem={{\r\n//                         bg: \"teal.600\",\r\n//                         endIcon: <CheckIcon size=\"5\" />\r\n//                     }}\r\n//                 >\r\n//                     {stockStatusData.map((item) => (\r\n//                         <Select.Item key={item} label={item} value={item} />\r\n//                     ))}\r\n//                 </Select>\r\n//             </View>\r\n\r\n//             <TouchableHighlight\r\n//                 underlayColor={'rgba(22, 163, 74, 0.3)'}\r\n//                 onPress={handleSaveStockStatus}\r\n//                 style={{\r\n//                     backgroundColor: '#16A34A',\r\n//                     borderRadius: 5,\r\n//                     padding: 3,\r\n//                     margin: 2,\r\n//                     alignSelf: 'center',\r\n//                 }}>\r\n//                 <MaterialIcons name='update' color='white' size={22} />\r\n//             </TouchableHighlight>\r\n//         </View>\r\n\r\n\r\n\r\n\r\n//     );\r\n// };\r\n\r\nconst addLogToCollection = async (data) => {\r\n    try {\r\n        const logsCollectionRef = collection(projectControlFirestore, 'logs');\r\n\r\n        // Add a new document to the \"logs\" collection\r\n        await addDoc(logsCollectionRef, data);\r\n\r\n        console.log('Document added successfully!');\r\n    } catch (error) {\r\n        console.error('Error adding document:', error);\r\n    }\r\n};\r\n\r\n\r\nconst SortAndAddModal = ({ headerText, data, title, dataName, databaseInit, textAreaAdd, handleAddTextChange, docName, collectionName, handleFirstModalClose, handleFirstModalOpen }) => {\r\n    const [modalSortOpen, setModalSortOpen] = useState(false);\r\n    const [modalAddOpen, setModalAddOpen] = useState(false);\r\n    const [modalAddSuccess, setModalAddSuccess] = useState(false);\r\n    const [modalSave, setModalSave] = useState(false);\r\n    const [modalSaveLoading, setModalSaveLoading] = useState(false);\r\n    const [modalData, setModalData] = useState(data);\r\n    const [modalIsLoading, setModalIsLoading] = useState(false);\r\n\r\n    const handleDeleteItemPress = useCallback(\r\n        (item) => {\r\n            setModalData((prevData) => {\r\n                const updatedData = prevData.filter((value) => value !== item);\r\n                return updatedData;\r\n            });\r\n        },\r\n        []\r\n    );\r\n\r\n    // useEffect(() => {\r\n\r\n    //   fetchData();\r\n\r\n    // }, [modalSortOpen]);\r\n\r\n\r\n\r\n    const fetchData = useCallback(async () => {\r\n        const modalDocRef = doc(collection(databaseInit, collectionName), docName);\r\n        const modalDocSnap = await getDoc(modalDocRef);\r\n        if (modalDocSnap.exists()) {\r\n            // setModalData(modalDocSnap.data()?.dataName || []);\r\n            setModalData(modalDocSnap.data()?.[dataName] || []);\r\n        }\r\n    }, [databaseInit, modalData]);\r\n\r\n    // useEffect(() => {\r\n    //   const unsubscribe = onSnapshot(doc(collection(databaseInit, docName), docName), (snapshot) => {\r\n    //     setModalData(snapshot.data()?.[dataName] || []);\r\n    //   });\r\n\r\n    //   return () => unsubscribe();\r\n    // }, [dataName, databaseInit, docName]);\r\n\r\n    const handleSave = useCallback(async () => {\r\n        setModalSaveLoading(true);\r\n\r\n        const response = await axios.get('http://worldtimeapi.org/api/timezone/Asia/Tokyo');\r\n        const { datetime } = response.data;\r\n        const formattedTime = moment(datetime).format('YYYY/MM/DD [at] HH:mm:ss');\r\n        const year = moment(datetime).format('YYYY');\r\n        const month = moment(datetime).format('MM');\r\n        const monthWithDay = moment(datetime).format('MM/DD');\r\n        const date = moment(datetime).format('YYYY/MM/DD');\r\n        const day = moment(datetime).format('DD');\r\n        const time = moment(datetime).format('HH:mm');\r\n        const timeWithMinutesSeconds = moment(datetime).format('HH:mm:ss');\r\n\r\n        try {\r\n            await updateDoc(doc(collection(databaseInit, collectionName), docName), { [dataName]: modalData });\r\n            setModalSaveLoading(false);\r\n            setModalSortOpen(true);\r\n            setModalSave(false);\r\n\r\n\r\n            const logData = {\r\n                message: `\"${title}\" updated: \"${nameVariable.text}\" updated \"${title}\"`,\r\n                timestamp: formattedTime,\r\n                colorScheme: true,\r\n                keywords: [\r\n                    formattedTime.toLowerCase(),\r\n                    `\"${title}\" updated: \"${nameVariable.text}\" updated \"${title}\"`.toLowerCase(),\r\n                    `${title} updated`.toLowerCase(),\r\n                    `\"${title}\" updated`.toLowerCase(),\r\n                    'updated'.toLowerCase(),\r\n                    title.toLowerCase(),\r\n                    nameVariable.text.toLowerCase(),\r\n                    year.toLowerCase(),\r\n                    month.toLowerCase(),\r\n                    monthWithDay.toLowerCase(),\r\n                    date.toLowerCase(),\r\n                    day.toLowerCase(),\r\n                    time.toLowerCase(),\r\n                    timeWithMinutesSeconds.toLowerCase(),\r\n                ],\r\n            };\r\n\r\n            addLogToCollection(logData);\r\n\r\n        } catch (error) {\r\n            setModalSaveLoading(false);\r\n            handleModalSaveClose();\r\n            console.error(error);\r\n        }\r\n\r\n\r\n    }, [databaseInit, modalData, dataName, docName]);\r\n\r\n\r\n    const handleSortModalOpen = useCallback(() => {\r\n        setModalIsLoading(true);\r\n        fetchData();\r\n        setModalSortOpen(true);\r\n        // handleFirstModalClose();\r\n    }, [modalSortOpen, modalIsLoading]);\r\n\r\n    const handleSortModalClose = useCallback(async () => {\r\n        setModalSortOpen(false);\r\n        setModalIsLoading(false);\r\n        // handleFirstModalOpen();\r\n    }, [modalSortOpen, modalIsLoading]);\r\n\r\n    // const handleAddTextChange = () => {\r\n    //   const newText = textAreaAdd.current?.value?.toUpperCase();\r\n    //   textAreaAdd.current?.setNativeProps({ text: newText });\r\n    // };\r\n\r\n\r\n    const handleModalAddOpen = useCallback(() => {\r\n        setModalAddOpen(true);\r\n        handleSortModalClose();\r\n        setModalIsLoading(true);\r\n        // handleFirstModalClose();\r\n\r\n    }, [])\r\n\r\n    const handleModalAddClose = useCallback(() => {\r\n        setModalAddOpen(false);\r\n        handleSortModalOpen();\r\n        textAreaAdd.current?.clear();\r\n    }, [modalAddOpen])\r\n\r\n    const handleModalAddSuccessClose = useCallback(() => {\r\n        setModalAddSuccess(false);\r\n        // setIsLoading(false);\r\n        handleSortModalOpen();\r\n    }, [modalAddSuccess])\r\n\r\n    const handleModalAddSuccessOpen = useCallback(() => {\r\n        setModalAddSuccess(true);\r\n        handleSortModalClose();\r\n        setModalAddOpen(false);\r\n        setModalIsLoading(true);\r\n        // handleFirstModalClose();\r\n\r\n    }, [modalAddSuccess, modalAddOpen, modalIsLoading])\r\n\r\n    const handleModalSaveOpen = useCallback(() => {\r\n        setModalSave(true);\r\n        setModalSortOpen(false);\r\n        setModalIsLoading(true);\r\n    }, [modalSave, modalSortOpen, modalIsLoading])\r\n\r\n    const handleModalSaveClose = useCallback(() => {\r\n        setModalSave(false);\r\n        setModalSortOpen(true);\r\n    }, [modalSave, modalSortOpen]);\r\n\r\n    const handleAddSubmit = async () => {\r\n\r\n        const data = textAreaAdd.current?.value;\r\n        const dataArray = data.split('\\n').map((item) => item.trim());\r\n\r\n        const response = await axios.get('http://worldtimeapi.org/api/timezone/Asia/Tokyo');\r\n        const { datetime } = response.data;\r\n        const formattedTime = moment(datetime).format('YYYY/MM/DD [at] HH:mm:ss');\r\n        const year = moment(datetime).format('YYYY');\r\n        const month = moment(datetime).format('MM');\r\n        const monthWithDay = moment(datetime).format('MM/DD');\r\n        const date = moment(datetime).format('YYYY/MM/DD');\r\n        const day = moment(datetime).format('DD');\r\n        const time = moment(datetime).format('HH:mm');\r\n        const timeWithMinutesSeconds = moment(datetime).format('HH:mm:ss');\r\n\r\n        if (data !== '') {\r\n\r\n            setModalSaveLoading(true);\r\n\r\n            try {\r\n                const modalCollectionRef = collection(databaseInit, collectionName);\r\n                const modalDocRef = doc(modalCollectionRef, docName);\r\n                await setDoc(modalDocRef, { [dataName]: arrayUnion(...dataArray) }, { merge: true });\r\n\r\n                const logData = {\r\n                    message: `\"${title}\" added: \"${nameVariable.text}\" added \"${title}\"(s).`,\r\n                    timestamp: formattedTime,\r\n                    colorScheme: true,\r\n                    keywords: [\r\n                        formattedTime.toLowerCase(),\r\n                        `\"${title}\" added: \"${nameVariable.text}\" added \"${title}\"(s).`.toLowerCase(),\r\n                        `${title} added`.toLowerCase(),\r\n                        `\"${title}\" added`.toLowerCase(),\r\n                        'added'.toLowerCase(),\r\n                        title.toLowerCase(),\r\n                        nameVariable.text.toLowerCase(),\r\n                        year.toLowerCase(),\r\n                        month.toLowerCase(),\r\n                        monthWithDay.toLowerCase(),\r\n                        date.toLowerCase(),\r\n                        day.toLowerCase(),\r\n                        time.toLowerCase(),\r\n                        timeWithMinutesSeconds.toLowerCase(),\r\n                    ],\r\n                };\r\n                addLogToCollection(logData);\r\n                setModalSaveLoading(false);\r\n\r\n                handleModalAddSuccessOpen();\r\n\r\n\r\n\r\n                console.log('Data added to Firestore');\r\n            } catch (error) {\r\n                console.error('Error adding data to Firestore:', error);\r\n                setModalSaveLoading(false);\r\n            }\r\n        }\r\n        else {\r\n\r\n        }\r\n\r\n\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Box justifyContent=\"center\" alignItems={'flex-start'} marginRight={1}>\r\n\r\n                {!modalIsLoading ? (\r\n                    <TouchableOpacity onPress={handleSortModalOpen} >\r\n                        <Icon as={<MaterialCommunityIcons name=\"playlist-edit\" />} size={5} color=\"white\" />\r\n                    </TouchableOpacity>\r\n                ) : (\r\n                    <Spinner color=\"white\" size={20} />\r\n                )}\r\n\r\n\r\n            </Box>\r\n\r\n            <Modal\r\n                isOpen={modalSortOpen}\r\n                onClose={handleSortModalClose}>\r\n                <Modal.Content>\r\n                    <Modal.CloseButton />\r\n                    <Modal.Header borderBottomWidth={0}>\r\n                        <Text color={'#102A43'} bold>{headerText}</Text>\r\n                    </Modal.Header>\r\n                    <Modal.Body justifyContent={'center'} alignItems={'center'} flex={1}>\r\n                        <Box w={'full'} flexDir={'column'}>\r\n                            <Box alignItems={'flex-end'}>\r\n                                <Pressable onPress={handleModalAddOpen} ><Icon as={<FontAwesome name=\"plus-circle\" />} size={5} color=\"#102A43\" /></Pressable>\r\n                            </Box>\r\n\r\n                            <Box flex={1} borderWidth={1} borderColor={'#102A43'} borderRadius={5}>\r\n\r\n                                <DraggableFlatList\r\n                                    style={{ alignContent: 'center', flex: 1, }}\r\n                                    data={modalData}\r\n                                    keyExtractor={(item) => item}\r\n                                    renderItem={({ item, drag }) => (\r\n\r\n                                        <Box flex={1} bgColor={'rgba(16,42,67, 0.5)'} borderBottomWidth={1} borderBottomColor={'warmGray.400'} flexDir={'row'} justifyContent={'center'} alignItems={'center'}>\r\n                                            <Pressable onPress={() => handleDeleteItemPress(item)}><Icon as={<AntDesign name=\"minuscircle\" />} size={4} color=\"#102A43\" /></Pressable>\r\n\r\n                                            <Text flex={1} textAlign={'center'} color={'white'}>{item}</Text>\r\n                                            <Pressable onPressIn={drag}><Icon as={<Entypo name=\"menu\" />} size={4} color=\"#102A43\" /></Pressable>\r\n                                        </Box>\r\n\r\n                                    )}\r\n                                    onDragEnd={useCallback(({ data }) => setModalData(data), [])} />\r\n\r\n                            </Box>\r\n\r\n                        </Box>\r\n\r\n                    </Modal.Body>\r\n                    <Modal.Footer borderTopWidth={0}>\r\n                        <HStack space={5} flex={1}>\r\n                            <Button onPress={handleSortModalClose} colorScheme={'muted'} flex={1} size={'sm'} borderRadius={5}>Close</Button>\r\n                            <Button onPress={handleModalSaveOpen} flex={1} size={'sm'} borderRadius={5}>Save</Button>\r\n                        </HStack>\r\n                    </Modal.Footer>\r\n                </Modal.Content>\r\n            </Modal>\r\n\r\n\r\n            <Modal\r\n                isOpen={modalSave}\r\n                onClose={handleModalSaveClose}>\r\n                <Modal.Content >\r\n                    <Modal.CloseButton />\r\n                    <Modal.Header borderBottomWidth={0}>\r\n                        <Text color={'#102A43'} bold>Save Order?</Text>\r\n                    </Modal.Header>\r\n                    <Modal.Body justifyContent={'center'} alignItems={'center'} flex={1} >\r\n\r\n                        <Text>Are you sure you want to save changes?</Text>\r\n\r\n                    </Modal.Body>\r\n                    <Modal.Footer borderTopWidth={0} >\r\n                        <HStack space={5} flex={1}>\r\n                            <Button onPress={handleModalSaveClose} colorScheme={'muted'} flex={1} size={'sm'} borderRadius={5}>No</Button>\r\n                            <Button onPress={handleSave} flex={1} size={'sm'} borderRadius={5} isLoading={modalSaveLoading ? true : false}>Yes</Button>\r\n                        </HStack>\r\n                    </Modal.Footer>\r\n                </Modal.Content>\r\n            </Modal>\r\n\r\n\r\n            <Modal\r\n                isOpen={modalAddOpen}\r\n                onClose={handleModalAddClose}\r\n                initialFocusRef={textAreaAdd}>\r\n                <Modal.Content >\r\n                    <Modal.CloseButton />\r\n                    <Modal.Header borderBottomWidth={0}>\r\n                        <Text color={'#102A43'} bold>Add {title}</Text>\r\n                    </Modal.Header>\r\n                    <Modal.Body justifyContent={'center'} alignItems={'center'} flex={1} >\r\n\r\n                        <TextArea\r\n                            textAlign={'center'}\r\n                            w={'full'}\r\n                            ref={textAreaAdd}\r\n                            multiline\r\n                            onChangeText={handleAddTextChange}\r\n                            totalLines={4}\r\n                            placeholder=\"Enter your data, separated by new lines\" />\r\n\r\n                    </Modal.Body>\r\n                    <Modal.Footer borderTopWidth={0} >\r\n                        <HStack space={5} flex={1}>\r\n                            <Button onPress={handleModalAddClose} colorScheme={'muted'} flex={1} size={'sm'} borderRadius={5}>Close</Button>\r\n                            <Button onPress={handleAddSubmit} isLoading={modalSaveLoading ? true : false} flex={1} size={'sm'} borderRadius={5}>Add</Button>\r\n                        </HStack>\r\n                    </Modal.Footer>\r\n                </Modal.Content>\r\n            </Modal>\r\n\r\n            {/* <SuccessModal isOpen={modalAddMakeSuccess} onClose={handleModalAddMakeSuccessClose} headerText={'Added successfully!'} bodyText={'Added successfully!'}/> */}\r\n            <Modal isOpen={modalAddSuccess} onClose={handleModalAddSuccessClose} >\r\n                <Modal.Content bgColor={'green.100'}>\r\n                    <Modal.Header borderBottomWidth={0} bgColor={'green.100'}>\r\n                        <Text textAlign={'center'} color={'#102A43'} bold>\r\n                            😊😎 Success! 😎😊\r\n                        </Text>\r\n                    </Modal.Header>\r\n                    <Modal.Body\r\n                        justifyContent={'center'}\r\n                        alignItems={'center'}\r\n                        bgColor={'green.200'}\r\n                        borderLeftWidth={4}\r\n                        borderLeftColor={'green.600'}\r\n                        margin={5}\r\n                    >\r\n                        <Box flex={1}>\r\n                            <Text color={'green.600'} bold>\r\n                                Added successfully!\r\n                            </Text>\r\n                            <Text color={'green.600'}>\r\n                                Added successfully!\r\n                            </Text>\r\n                        </Box>\r\n                    </Modal.Body>\r\n                    <Modal.Footer borderTopWidth={0} bgColor={'green.100'}>\r\n                        <HStack space={5} flex={1}>\r\n                            <Button colorScheme={'success'} flex=\"1\" onPress={handleModalAddSuccessClose} _text={{ color: 'white' }}>\r\n                                Ok\r\n                            </Button>\r\n                        </HStack>\r\n                    </Modal.Footer>\r\n                </Modal.Content>\r\n            </Modal>\r\n\r\n\r\n        </>\r\n\r\n\r\n    );\r\n};\r\n\r\n\r\n\r\nconst FreightNavigation = () => {\r\n\r\n    const screenWidth = Dimensions.get('window').width;\r\n\r\n    const dispatch = useDispatch();\r\n    const [selectedButtonState, setSelectedButtonState] = useState(defaultSelectedButton);\r\n\r\n\r\n    const handlePress = (button) => {\r\n        if (button !== selectedButtonState) {\r\n            dispatch(setLoadingModalVisible(true));\r\n        }\r\n        dispatch(setSelectedButton(button));\r\n        setSelectedButtonState(button);\r\n    };\r\n\r\n    return (\r\n        <View style={{ flexDirection: 'row', justifyContent: 'center', alignItems: 'center', width: screenWidth >= 960 ? '50%' : '90%' }}>\r\n\r\n            <TouchableOpacity\r\n                onPress={() => handlePress('countries')}\r\n                style={{\r\n                    borderRadius: 5,\r\n                    flex: 1,\r\n                    padding: 10,\r\n                    margin: 10,\r\n                    borderWidth: 1,\r\n                    borderColor: 'white',\r\n                    backgroundColor: selectedButtonState === 'countries' ? '#0642F4' : 'transparent',\r\n                    flexDirection: 'row',\r\n                }}\r\n            >\r\n                <MaterialIcons\r\n                    name=\"flag\" // The icon name from MaterialIcons\r\n                    size={20} // Set the size of the icon\r\n                    color={selectedButtonState === 'countries' ? 'white' : 'black'} // Set the color based on active state\r\n                />\r\n                <Text style={{ color: selectedButtonState === 'countries' ? 'white' : 'black', fontWeight: 'bold', marginLeft: 5, }}>Countries</Text>\r\n            </TouchableOpacity>\r\n            <TouchableOpacity\r\n                onPress={() => handlePress('ports')}\r\n                style={{\r\n                    borderRadius: 5,\r\n                    flex: 1,\r\n                    padding: 10,\r\n                    margin: 10,\r\n                    borderWidth: 1,\r\n                    borderColor: 'white',\r\n                    backgroundColor: selectedButtonState === 'ports' ? '#0642F4' : 'transparent',\r\n                    flexDirection: 'row',\r\n                }}\r\n            >\r\n                <MaterialIcons\r\n                    name=\"directions-boat\" // The icon name from MaterialIcons\r\n                    size={20} // Set the size of the icon\r\n                    color={selectedButtonState === 'ports' ? 'white' : 'black'} // Set the color based on active state\r\n                />\r\n                <Text style={{ color: selectedButtonState === 'ports' ? 'white' : 'black', fontWeight: 'bold', marginLeft: 5, }}>Ports</Text>\r\n            </TouchableOpacity>\r\n\r\n        </View>\r\n    );\r\n}\r\n\r\nconst SelectMethod = ({ defaultValue, portCode, page, searchQuery }) => {\r\n    const [selectedMethod, setSelectedMethod] = useState('');\r\n    const methodData = useSelector((state) => state.methodData);\r\n\r\n    const dispatch = useDispatch();\r\n    const toast = useToast();\r\n    let currentValue = '';\r\n\r\n\r\n\r\n\r\n    const updatePortMethod = async (portCode, newValue) => {\r\n        // Specify the document reference\r\n        const documentRef = doc(projectExtensionFirestore, 'CustomerCountryPort', 'PortsDoc');\r\n        dispatch(setLoadingModalVisible(true));\r\n        const response = await axios.get('http://worldtimeapi.org/api/timezone/Asia/Tokyo');\r\n        const { datetime } = response.data;\r\n        const formattedTime = moment(datetime).format('YYYY/MM/DD [at] HH:mm:ss');\r\n        const year = moment(datetime).format('YYYY');\r\n        const month = moment(datetime).format('MM');\r\n        const monthWithDay = moment(datetime).format('MM/DD');\r\n        const date = moment(datetime).format('YYYY/MM/DD');\r\n        const day = moment(datetime).format('DD');\r\n        const time = moment(datetime).format('HH:mm');\r\n\r\n        if (newValue !== '' && newValue !== '__NativeBasePlaceHolder__') {\r\n            // Replace dots with underscores in the countryCode if the keys in Firestore use underscores\r\n            // If your keys can contain dots and are used as such in Firestore, do not replace with underscores.\r\n            const formattedCountryCode = portCode.replace(/\\./g, '_'); // Replace dots with underscores or any other valid character\r\n\r\n            // Specify the field using dot notation for the nested field\r\n            const methodField = `${formattedCountryCode}.method`;\r\n\r\n            try {\r\n                if (currentValue == selectedMethod) {\r\n\r\n                    dispatch(setLoadingModalVisible(false));\r\n\r\n                }\r\n                else {\r\n\r\n                    await updateDoc(documentRef, {\r\n                        [methodField]: newValue\r\n                    });\r\n\r\n                    dispatch(setLoadingModalVisible(false));\r\n                    const logData = {\r\n                        message: `Method Updated: \"${nameVariable.text}\" updated \"${portCode}\" method to \"${newValue}\"`,\r\n                        timestamp: formattedTime,\r\n                        colorScheme: true,\r\n                        keywords: [\r\n                            formattedTime.toLowerCase(),\r\n                            `Method Updated: \"${nameVariable.text}\" updated \"${portCode}\" inspection to \"${newValue}\"`.toLowerCase(),\r\n                            'Method'.toLowerCase(),\r\n                            'Method Updated'.toLowerCase(),\r\n                            'Updated'.toLowerCase(),\r\n                            portCode.toLowerCase(),\r\n                            newValue.toLowerCase(),\r\n                            nameVariable.text.toLowerCase(),\r\n                            year.toLowerCase(),\r\n                            month.toLowerCase(),\r\n                            monthWithDay.toLowerCase(),\r\n                            date.toLowerCase(),\r\n                            day.toLowerCase(),\r\n                            time.toLowerCase(),\r\n                        ],\r\n                    };\r\n                    addLogToCollection(logData);\r\n                    toast.show({\r\n                        render: () => {\r\n                            return <View style={{ backgroundColor: '#16A34A', padding: 5, borderRadius: 5 }}>\r\n                                <Text style={{ color: 'white' }}>Method updated successfully</Text>\r\n                            </View>;\r\n                        }\r\n                    })\r\n                    console.log('Method updated successfully');\r\n                }\r\n                // Perform the update\r\n\r\n            } catch (error) {\r\n                console.error('Error updating method:', error);\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setLoadingModalVisible(false));\r\n\r\n        }\r\n\r\n    };\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        // Replace dots with underscores in the country code\r\n        const formattedPortCode = portCode.replace(/\\./g, '_');\r\n        // Reference to your document\r\n        const docRef = doc(projectExtensionFirestore, 'CustomerCountryPort', 'PortsDoc');\r\n\r\n        // Listen for document updates\r\n        const unsubscribe = onSnapshot(docRef, (documentSnapshot) => {\r\n            if (documentSnapshot.exists()) {\r\n                // Use bracket notation to access the property using the variable\r\n                const portData = documentSnapshot.data()[formattedPortCode];\r\n                // Make sure to check if portData exists before trying to access its properties\r\n                if (portData && portData.method) {\r\n                    const method = portData.method;\r\n                    setSelectedMethod(method);\r\n                    currentValue = method;\r\n                }\r\n                else {\r\n                    setSelectedMethod('__NativeBasePlaceHolder__');\r\n                }\r\n            } else {\r\n                // documentSnapshot.data() will be undefined in this case\r\n                console.log('No such document!');\r\n            }\r\n        },\r\n            (error) => {\r\n                // Handle the error\r\n                console.error(\"Error getting document: \", error);\r\n            });\r\n\r\n        // Detach the listener when the component unmounts\r\n        return () => unsubscribe();\r\n    }, [page, searchQuery]);\r\n\r\n    return (\r\n        <View style={{ flexDirection: 'row', width: '100%', }}>\r\n\r\n\r\n            <Select\r\n                selectedValue={selectedMethod}\r\n                onValueChange={(value) => {\r\n                    setSelectedMethod(value);\r\n                }}\r\n                bgColor={'white'}\r\n                flex={1}\r\n                accessibilityLabel=\"---\"\r\n                placeholder=\"---\"\r\n                _selectedItem={{\r\n                    bg: \"teal.600\",\r\n                    endIcon: <CheckIcon />\r\n                }}\r\n            >\r\n                {methodData.map((item) => (\r\n                    <Select.Item key={item} label={item} value={item} />\r\n                ))}\r\n            </Select>\r\n            <TouchableHighlight\r\n                onPress={() => updatePortMethod(portCode, selectedMethod)}\r\n                underlayColor={'rgba(22, 163, 74, 0.3)'}\r\n                style={{\r\n                    backgroundColor: '#16A34A',\r\n                    borderRadius: 5,\r\n                    padding: 5,\r\n                    margin: 2,\r\n                    alignSelf: 'center',\r\n                }}>\r\n                <MaterialIcons name='update' color='white' size={22} />\r\n            </TouchableHighlight>\r\n        </View>\r\n    );\r\n}\r\n\r\nconst SelectInspectionIsRequired = ({ width, defaultValue, countryCode, page, searchQuery }) => {\r\n    const [selectedInspectionIsRequired, setSelectedInspectionIsRequired] = useState('');\r\n    const inspectionIsRequiredData = useSelector((state) => state.inspectionIsRequiredData);\r\n\r\n    const dispatch = useDispatch();\r\n    const toast = useToast();\r\n    let currentValue = '';\r\n\r\n\r\n\r\n\r\n    const updateCountryInspection = async (countryCode, newValue) => {\r\n        // Specify the document reference\r\n        const documentRef = doc(projectExtensionFirestore, 'CustomerCountryPort', 'CountriesDoc');\r\n        dispatch(setLoadingModalVisible(true));\r\n        const response = await axios.get('http://worldtimeapi.org/api/timezone/Asia/Tokyo');\r\n        const { datetime } = response.data;\r\n        const formattedTime = moment(datetime).format('YYYY/MM/DD [at] HH:mm:ss');\r\n        const year = moment(datetime).format('YYYY');\r\n        const month = moment(datetime).format('MM');\r\n        const monthWithDay = moment(datetime).format('MM/DD');\r\n        const date = moment(datetime).format('YYYY/MM/DD');\r\n        const day = moment(datetime).format('DD');\r\n        const time = moment(datetime).format('HH:mm');\r\n        if (newValue !== '') {\r\n            // Replace dots with underscores in the countryCode if the keys in Firestore use underscores\r\n            // If your keys can contain dots and are used as such in Firestore, do not replace with underscores.\r\n            const formattedCountryCode = countryCode.replace(/\\./g, '_'); // Replace dots with underscores or any other valid character\r\n\r\n            // Specify the field using dot notation for the nested field\r\n            const inspectionIsRequiredField = `${formattedCountryCode}.inspectionIsRequired`;\r\n\r\n            try {\r\n                if (currentValue == selectedInspectionIsRequired) {\r\n\r\n                    dispatch(setLoadingModalVisible(false));\r\n\r\n                }\r\n                else {\r\n\r\n                    await updateDoc(documentRef, {\r\n                        [inspectionIsRequiredField]: newValue\r\n                    });\r\n\r\n                    dispatch(setLoadingModalVisible(false));\r\n                    const logData = {\r\n                        message: `Inspection Updated: \"${nameVariable.text}\" updated \"${countryCode}\" inspection to \"${newValue}\"`,\r\n                        timestamp: formattedTime,\r\n                        colorScheme: true,\r\n                        keywords: [\r\n                            formattedTime.toLowerCase(),\r\n                            `Inspection Updated: \"${nameVariable.text}\" updated \"${countryCode}\" inspection to \"${newValue}\"`.toLowerCase(),\r\n                            'Inspection'.toLowerCase(),\r\n                            'Inspection Updated'.toLowerCase(),\r\n                            'Updated'.toLowerCase(),\r\n                            countryCode.toLowerCase(),\r\n                            newValue.toLowerCase(),\r\n                            nameVariable.text.toLowerCase(),\r\n                            year.toLowerCase(),\r\n                            month.toLowerCase(),\r\n                            monthWithDay.toLowerCase(),\r\n                            date.toLowerCase(),\r\n                            day.toLowerCase(),\r\n                            time.toLowerCase(),\r\n                        ],\r\n                    };\r\n                    addLogToCollection(logData);\r\n                    toast.show({\r\n                        render: () => {\r\n                            return <View style={{ backgroundColor: '#16A34A', padding: 5, borderRadius: 5 }}>\r\n                                <Text style={{ color: 'white' }}>Inspection updated successfully</Text>\r\n                            </View>;\r\n                        }\r\n                    })\r\n                    console.log('Inspection updated successfully');\r\n                }\r\n                // Perform the update\r\n\r\n            } catch (error) {\r\n                console.error('Error updating inspection:', error);\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setLoadingModalVisible(false));\r\n\r\n        }\r\n\r\n    };\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        // Replace dots with underscores in the country code\r\n        const formattedCountryCode = countryCode.replace(/\\./g, '_');\r\n        // Reference to your document\r\n        const docRef = doc(projectExtensionFirestore, 'CustomerCountryPort', 'CountriesDoc');\r\n\r\n        // Listen for document updates\r\n        const unsubscribe = onSnapshot(docRef, (documentSnapshot) => {\r\n            if (documentSnapshot.exists()) {\r\n                // Use bracket notation to access the property using the variable\r\n                const countryData = documentSnapshot.data()[formattedCountryCode];\r\n                // Make sure to check if countryData exists before trying to access its properties\r\n                if (countryData && countryData.inspectionIsRequired) {\r\n                    const inspectionIsRequired = countryData.inspectionIsRequired;\r\n                    setSelectedInspectionIsRequired(inspectionIsRequired);\r\n                    currentValue = inspectionIsRequired;\r\n\r\n\r\n                }\r\n            } else {\r\n                // documentSnapshot.data() will be undefined in this case\r\n                console.log('No such document!');\r\n            }\r\n        },\r\n            (error) => {\r\n                // Handle the error\r\n                console.error(\"Error getting document: \", error);\r\n            });\r\n\r\n        // Detach the listener when the component unmounts\r\n        return () => unsubscribe();\r\n    }, [page, searchQuery]);\r\n\r\n    return (\r\n        <View style={{ flexDirection: 'row', width: width, }}>\r\n\r\n\r\n            <Select\r\n                selectedValue={selectedInspectionIsRequired}\r\n                onValueChange={(value) => {\r\n                    setSelectedInspectionIsRequired(value);\r\n                }}\r\n                bgColor={'white'}\r\n                flex={1}\r\n                accessibilityLabel=\"---\"\r\n                placeholder=\"---\"\r\n                _selectedItem={{\r\n                    bg: \"teal.600\",\r\n                    endIcon: <CheckIcon />\r\n                }}\r\n            >\r\n                {inspectionIsRequiredData.map((item) => (\r\n                    <Select.Item key={item} label={item} value={item} />\r\n                ))}\r\n            </Select>\r\n            <TouchableHighlight\r\n                onPress={() => updateCountryInspection(countryCode, selectedInspectionIsRequired)}\r\n                underlayColor={'rgba(22, 163, 74, 0.3)'}\r\n                style={{\r\n                    backgroundColor: '#16A34A',\r\n                    borderRadius: 5,\r\n                    padding: 5,\r\n                    margin: 2,\r\n                    alignSelf: 'center',\r\n                }}>\r\n                <MaterialIcons name='update' color='white' size={22} />\r\n            </TouchableHighlight>\r\n        </View>\r\n    );\r\n}\r\n\r\nconst SelectInspectionName = ({ width, defaultValue, countryCode, page, searchQuery }) => {\r\n    const [selectedInspectionName, setSelectedInspectionName] = useState('');\r\n    const inspectionNameData = useSelector((state) => state.inspectionNameData);\r\n    const dispatch = useDispatch();\r\n    const toast = useToast();\r\n    let currentValue = '';\r\n\r\n\r\n\r\n\r\n    const updateCountryInspectionName = async (countryCode, newValue) => {\r\n        // Specify the document reference\r\n        const documentRef = doc(projectExtensionFirestore, 'CustomerCountryPort', 'CountriesDoc');\r\n        dispatch(setLoadingModalVisible(true));\r\n        const response = await axios.get('http://worldtimeapi.org/api/timezone/Asia/Tokyo');\r\n        const { datetime } = response.data;\r\n        const formattedTime = moment(datetime).format('YYYY/MM/DD [at] HH:mm:ss');\r\n        const year = moment(datetime).format('YYYY');\r\n        const month = moment(datetime).format('MM');\r\n        const monthWithDay = moment(datetime).format('MM/DD');\r\n        const date = moment(datetime).format('YYYY/MM/DD');\r\n        const day = moment(datetime).format('DD');\r\n        const time = moment(datetime).format('HH:mm');\r\n        if (newValue !== '') {\r\n            // Replace dots with underscores in the countryCode if the keys in Firestore use underscores\r\n            // If your keys can contain dots and are used as such in Firestore, do not replace with underscores.\r\n            const formattedCountryCode = countryCode.replace(/\\./g, '_'); // Replace dots with underscores or any other valid character\r\n\r\n            // Specify the field using dot notation for the nested field\r\n            const inspectionNameField = `${formattedCountryCode}.inspectionName`;\r\n\r\n            try {\r\n                if (currentValue == selectedInspectionName) {\r\n\r\n                    dispatch(setLoadingModalVisible(false));\r\n\r\n                }\r\n                else {\r\n\r\n                    await updateDoc(documentRef, {\r\n                        [inspectionNameField]: newValue\r\n                    });\r\n\r\n                    dispatch(setLoadingModalVisible(false));\r\n                    const logData = {\r\n                        message: `Inspection Name Updated: \"${nameVariable.text}\" updated \"${countryCode}\" inspection name to \"${newValue}\"`,\r\n                        timestamp: formattedTime,\r\n                        colorScheme: true,\r\n                        keywords: [\r\n                            formattedTime.toLowerCase(),\r\n                            `Inspection Name Updated: \"${nameVariable.text}\" updated \"${countryCode}\" inspection name to \"${newValue}\"`.toLowerCase(),\r\n                            'Inspection Name'.toLowerCase(),\r\n                            'Inspection'.toLowerCase(),\r\n                            'Inspection Name Updated'.toLowerCase(),\r\n                            'Name'.toLowerCase(),\r\n                            'Updated'.toLowerCase(),\r\n                            newValue.toLowerCase(),\r\n                            countryCode.toLowerCase(),\r\n                            nameVariable.text.toLowerCase(),\r\n                            year.toLowerCase(),\r\n                            month.toLowerCase(),\r\n                            monthWithDay.toLowerCase(),\r\n                            date.toLowerCase(),\r\n                            day.toLowerCase(),\r\n                            time.toLowerCase(),\r\n                        ],\r\n                    };\r\n                    addLogToCollection(logData);\r\n                    toast.show({\r\n                        render: () => {\r\n                            return <View style={{ backgroundColor: '#16A34A', padding: 5, borderRadius: 5 }}>\r\n                                <Text style={{ color: 'white' }}>Inspection Name updated successfully</Text>\r\n                            </View>;\r\n                        }\r\n                    })\r\n                    console.log('Inspection Name updated successfully');\r\n                }\r\n                // Perform the update\r\n\r\n            } catch (error) {\r\n                console.error('Error updating inspection:', error);\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setLoadingModalVisible(false));\r\n\r\n        }\r\n\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Replace dots with underscores in the country code\r\n        const formattedCountryCode = countryCode.replace(/\\./g, '_');\r\n\r\n        // Reference to your document\r\n        const docRef = doc(projectExtensionFirestore, 'CustomerCountryPort', 'CountriesDoc');\r\n\r\n        // Listen for document updates\r\n        const unsubscribe = onSnapshot(docRef, (documentSnapshot) => {\r\n            if (documentSnapshot.exists()) {\r\n                // Use bracket notation to access the property using the variable\r\n                const countryData = documentSnapshot.data()[formattedCountryCode];\r\n                // Make sure to check if countryData exists before trying to access its properties\r\n                if (countryData && countryData.inspectionName) {\r\n                    const inspectionName = countryData.inspectionName;\r\n                    setSelectedInspectionName(inspectionName);\r\n                    currentValue = inspectionName;\r\n\r\n                }\r\n                else {\r\n                    setSelectedInspectionName('__NativeBasePlaceHolder__');\r\n                    currentValue = '__NativeBasePlaceHolder__';\r\n                }\r\n            } else {\r\n                // documentSnapshot.data() will be undefined in this case\r\n\r\n                console.log('No such document!');\r\n            }\r\n        },\r\n            (error) => {\r\n                // Handle the error\r\n                console.error(\"Error getting document: \", error);\r\n            });\r\n\r\n        // Detach the listener when the component unmounts\r\n        return () => unsubscribe();\r\n    }, [page, searchQuery]);\r\n\r\n    return (\r\n        <View style={{ flexDirection: 'row', width: width, }}>\r\n            <Select\r\n                selectedValue={selectedInspectionName}\r\n                onValueChange={(value) => {\r\n                    setSelectedInspectionName(value);\r\n                }}\r\n                bgColor={'white'}\r\n                flex={1}\r\n                accessibilityLabel=\"---\"\r\n                placeholder=\"---\"\r\n                _selectedItem={{\r\n                    bg: \"teal.600\",\r\n                    endIcon: <CheckIcon />\r\n                }}\r\n            >\r\n                {inspectionNameData.map((item) => (\r\n                    <Select.Item key={item} label={item} value={item} />\r\n                ))}\r\n            </Select>\r\n            <TouchableHighlight\r\n                onPress={() => updateCountryInspectionName(countryCode, selectedInspectionName)}\r\n                underlayColor={'rgba(22, 163, 74, 0.3)'}\r\n                style={{\r\n                    backgroundColor: '#16A34A',\r\n                    borderRadius: 5,\r\n                    padding: 5,\r\n                    margin: 2,\r\n                    alignSelf: 'center',\r\n                }}>\r\n                <MaterialIcons name='update' color='white' size={22} />\r\n            </TouchableHighlight>\r\n        </View>\r\n    );\r\n}\r\n\r\n\r\nconst countriesList = [\r\n    \"Zambia\",\r\n    \"D.R.Congo\",\r\n    \"Mozambique\",\r\n    \"Zimbabwe\",\r\n    \"Uganda\",\r\n    \"Tanzania\",\r\n    \"Malawi\",\r\n    \"Burundi\",\r\n    \"Lesotho\",\r\n    \"South Sudan\",\r\n    \"Botswana\",\r\n    \"Kenya\",\r\n    \"Republic of South Africa\",\r\n    \"Djibouti\",\r\n    \"Ethiopia\",\r\n    \"Angola\",\r\n    \"Benin\",\r\n    \"Cameroon\",\r\n    \"Gabon\",\r\n    \"Ghana\",\r\n    \"Guinea\",\r\n    \"Madagascar\",\r\n    \"Mali\",\r\n    \"Namibia\",\r\n    \"Nigeria\",\r\n    \"Rwanda\",\r\n    \"Sierra Leone\",\r\n    \"Sudan\",\r\n    \"Algeria\",\r\n    \"Canary Islands\",\r\n    \"Cape Verde\",\r\n    \"Central African Republic\",\r\n    \"Chad\",\r\n    \"Equatorial Guinea\",\r\n    \"Eritrea\",\r\n    \"Gambia\",\r\n    \"Liberia\",\r\n    \"Mahe\",\r\n    \"Maldives\",\r\n    \"Mauritania\",\r\n    \"Mayotte\",\r\n    \"Morocco\",\r\n    \"Niger\",\r\n    \"Republic of Guinea-Bissau\",\r\n    \"Republic of the Congo\",\r\n    \"Reunion\",\r\n    \"Saint Helena\",\r\n    \"Sao Tome and Principe\",\r\n    \"Seychelles\",\r\n    \"Swaziland\",\r\n    \"Tunisia\",\r\n    \"Afghanistan\",\r\n    \"Albania\",\r\n    \"American Samoa\",\r\n    \"Anguilla\",\r\n    \"Antigua and Barbuda\",\r\n    \"Argentina\",\r\n    \"Armenia\",\r\n    \"Aruba\",\r\n    \"Australia\",\r\n    \"Austria\",\r\n    \"Azerbaijan\",\r\n    \"Bahamas\",\r\n    \"Bahrain\",\r\n    \"Bangladesh\",\r\n    \"Barbados\",\r\n    \"Belgium\",\r\n    \"Belize\",\r\n    \"Bermuda\",\r\n    \"Bhutan\",\r\n    \"Bolivia\",\r\n    \"Bonaire/Netherlands Antilles\",\r\n    \"Brazil\",\r\n    \"British Virgin Islands\",\r\n    \"Brunei Darussalam\",\r\n    \"Bulgaria\",\r\n    \"Burkina Faso\",\r\n    \"Cambodia\",\r\n    \"Canada\",\r\n    \"Cayman Islands\",\r\n    \"Chile\",\r\n    \"Colombia\",\r\n    \"Commonwealth of Dominica\",\r\n    \"Comoros\",\r\n    \"Cook Islands\",\r\n    \"Costa Rica\",\r\n    \"Cote D'Ivoire\",\r\n    \"Croatia\",\r\n    \"Cuba\",\r\n    \"Curacao/Netherlands Antilles\",\r\n    \"Cyprus\",\r\n    \"Czech Republic\",\r\n    \"Denmark\",\r\n    \"Dominican Republic\",\r\n    \"East Timor\",\r\n    \"Ecuador\",\r\n    \"Egypt\",\r\n    \"Estonia\",\r\n    \"Fiji\",\r\n    \"Finland\",\r\n    \"France\",\r\n    \"French Guiana\",\r\n    \"French Polynesia\",\r\n    \"Georgia\",\r\n    \"Germany\",\r\n    \"Greece\",\r\n    \"Grenada\",\r\n    \"Guadeloupe\",\r\n    \"Guatemala\",\r\n    \"Guyana\",\r\n    \"Haiti\",\r\n    \"Honduras\",\r\n    \"Hong Kong\",\r\n    \"Hungary\",\r\n    \"Iceland\",\r\n    \"India\",\r\n    \"Indonesia\",\r\n    \"Iran\",\r\n    \"Iraq\",\r\n    \"Ireland\",\r\n    \"Israel\",\r\n    \"Italy\",\r\n    \"Jamaica\",\r\n    \"Japan\",\r\n    \"Jordan\",\r\n    \"Kazakhstan\",\r\n    \"Kiribati\",\r\n    \"Korea\",\r\n    \"Kuwait\",\r\n    \"Kyrgyzstan\",\r\n    \"LAO PDR\",\r\n    \"Latvia\",\r\n    \"Lebanon\",\r\n    \"Libya\",\r\n    \"Lithuania\",\r\n    \"Luxembourg\",\r\n    \"Macau\",\r\n    \"Malaysia\",\r\n    \"Malta\",\r\n    \"Marshall Islands\",\r\n    \"Martinique\",\r\n    \"Mauritius\",\r\n    \"Mexico\",\r\n    \"Micronesia\",\r\n    \"Moldova\",\r\n    \"Mongolia\",\r\n    \"Montenegro\",\r\n    \"Montserrat\",\r\n    \"Myanmar\",\r\n    \"Nauru\",\r\n    \"Nepal\",\r\n    \"Netherlands\",\r\n    \"Netherlands Antilles\",\r\n    \"New Caledonia\",\r\n    \"New Zealand\",\r\n    \"Niue\",\r\n    \"Norway\",\r\n    \"Oman\",\r\n    \"Pakistan\",\r\n    \"Palau\",\r\n    \"Panama\",\r\n    \"Papua New Guinea\",\r\n    \"Paraguay\",\r\n    \"People's Republic of China\",\r\n    \"Peru\",\r\n    \"Philippines\",\r\n    \"Poland\",\r\n    \"Portugal\",\r\n    \"Puerto Rico\",\r\n    \"Qatar\",\r\n    \"Republic of Belarus\",\r\n    \"Republic of El Salvador\",\r\n    \"Republic of Macedonia\",\r\n    \"Republic of Nicaragua\",\r\n    \"Romania\",\r\n    \"Russian Federation\",\r\n    \"Saba Island\",\r\n    \"Saint Eustatius\",\r\n    \"Saint Kitts And Nevis\",\r\n    \"Samoa\",\r\n    \"Saudi Arabia\",\r\n    \"Senegal\",\r\n    \"Serbia\",\r\n    \"Singapore\",\r\n    \"Slovak Republic\",\r\n    \"Slovenia\",\r\n    \"Solomon Islands\",\r\n    \"Somalia\",\r\n    \"Spain\",\r\n    \"Sri Lanka\",\r\n    \"St. Barthelemy\",\r\n    \"St. Croix\",\r\n    \"St. Lucia\",\r\n    \"St. Maarten\",\r\n    \"St. Thomas\",\r\n    \"St. Vincent\",\r\n    \"Suriname\",\r\n    \"Sweden\",\r\n    \"Switzerland\",\r\n    \"Syria\",\r\n    \"Taiwan\",\r\n    \"Tajikistan\",\r\n    \"Thailand\",\r\n    \"Togo\",\r\n    \"Tonga\",\r\n    \"Tortola\",\r\n    \"Trinidad and Tobago\",\r\n    \"Turkey\",\r\n    \"Turkmenistan\",\r\n    \"Turks and Caicos Islands\",\r\n    \"Tuvalu\",\r\n    \"UAE\",\r\n    \"Ukraine\",\r\n    \"United Kingdom\",\r\n    \"Uruguay\",\r\n    \"US Virgin Islands\",\r\n    \"USA\",\r\n    \"Uzbekistan\",\r\n    \"Vanuatu\",\r\n    \"Venezuela\",\r\n    \"Vietnam\",\r\n    \"Wallis et Futuna\",\r\n    \"Yemen\",\r\n    \"Somaliland\",\r\n\r\n];\r\n\r\n\r\nconst addPort = async (portName, country, sortOrder) => {\r\n    const docRef = doc(projectExtensionFirestore, 'CustomerCountryPort', 'PortsDoc');\r\n\r\n    // New country data\r\n    const newCountryData = {\r\n        [portName]: {\r\n            country: country,\r\n            sortOrder: sortOrder,\r\n            method: '',\r\n        }\r\n    };\r\n\r\n    // Set document with merge option\r\n    try {\r\n        await setDoc(docRef, newCountryData, { merge: true });\r\n        console.log(\"Country added/updated successfully!\");\r\n\r\n    } catch (error) {\r\n        console.error(\"Error adding/updating country: \", error);\r\n    }\r\n};\r\n\r\n\r\nconst addCountry = async (countryName, inspectionIsRequired, inspectionName, sortOrder) => {\r\n    const docRef = doc(projectExtensionFirestore, 'CustomerCountryPort', 'CountriesDoc');\r\n\r\n    // New country data\r\n    const newCountryData = {\r\n        [countryName]: {\r\n            inspectionIsRequired: inspectionIsRequired,\r\n            inspectionName: inspectionName,\r\n            sortOrder: sortOrder\r\n        }\r\n    };\r\n\r\n    // Set document with merge option\r\n    try {\r\n        await setDoc(docRef, newCountryData, { merge: true });\r\n        console.log(\"Country added/updated successfully!\");\r\n\r\n    } catch (error) {\r\n        console.error(\"Error adding/updating country: \", error);\r\n    }\r\n};\r\n\r\nconst AddCountryModal = ({ handleAddCountryModalClose }) => {\r\n\r\n    const addCountryModalVisible = useSelector((state) => state.addCountryModalVisible);\r\n    const inspectionIsRequiredData = useSelector((state) => state.inspectionIsRequiredData);\r\n    const inspectionNameData = useSelector((state) => state.inspectionNameData);\r\n    const inputCountryText = useRef(null);\r\n    const textAreaAddInspectionIsRequired = useRef(null);\r\n    const textAreaAddInspectionName = useRef(null);\r\n    const dispatch = useDispatch();\r\n    const toast = useToast();\r\n    const [addButtonLoading, setAddButtonLoading] = useState(false);\r\n\r\n    const handleAddInspectionIsRequiredTextChange = () => {\r\n        const textAreaValue = textAreaAddInspectionIsRequired.current?.value;\r\n        if (textAreaValue) {\r\n            const newText = textAreaValue\r\n                .split('\\n')\r\n                .map((line) => line.charAt(0).toUpperCase() + line.slice(1))\r\n                .join('\\n');\r\n            textAreaAddInspectionIsRequired.current.setNativeProps({ text: newText });\r\n        }\r\n    };\r\n\r\n    const handleAddInspectionNameTextChange = () => {\r\n        const textAreaValue = textAreaAddInspectionName.current?.value;\r\n        if (textAreaValue) {\r\n            const newText = textAreaValue\r\n                .split('\\n')\r\n                .map((line) => line.charAt(0).toUpperCase() + line.slice(1))\r\n                .join('\\n');\r\n            textAreaAddInspectionName.current.setNativeProps({ text: newText });\r\n        }\r\n    };\r\n\r\n    const handleAddButton = async () => {\r\n        setAddButtonLoading(true);\r\n        const countryCode = inputCountryText.current?.value;\r\n        const formattedCountryCode = countryCode.replace(/\\./g, '_');\r\n        const response = await axios.get('http://worldtimeapi.org/api/timezone/Asia/Tokyo');\r\n        const { datetime } = response.data;\r\n        const formattedTime = moment(datetime).format('YYYY/MM/DD [at] HH:mm:ss');\r\n        const year = moment(datetime).format('YYYY');\r\n        const month = moment(datetime).format('MM');\r\n        const monthWithDay = moment(datetime).format('MM/DD');\r\n        const date = moment(datetime).format('YYYY/MM/DD');\r\n        const day = moment(datetime).format('DD');\r\n        const time = moment(datetime).format('HH:mm');\r\n\r\n        if (inputCountryText.current?.value !== '') {\r\n            try {\r\n                await addCountry(formattedCountryCode, 'Not-Required', '', 999);\r\n                const logData = {\r\n                    message: `Country Added: \"${nameVariable.text}\" added country \"${countryCode}\" for Freight.`,\r\n                    timestamp: formattedTime,\r\n                    colorScheme: true,\r\n                    keywords: [\r\n                        formattedTime.toLowerCase(),\r\n                        `Country Added: \"${nameVariable.text}\" added country \"${countryCode}\" for Freight.`.toLowerCase(),\r\n                        'Country'.toLowerCase(),\r\n                        'Country Added'.toLowerCase(),\r\n                        'Added'.toLowerCase(),\r\n                        'Freight'.toLowerCase(),\r\n                        countryCode.toLowerCase(),\r\n                        nameVariable.text.toLowerCase(),\r\n                        year.toLowerCase(),\r\n                        month.toLowerCase(),\r\n                        monthWithDay.toLowerCase(),\r\n                        date.toLowerCase(),\r\n                        day.toLowerCase(),\r\n                        time.toLowerCase(),\r\n                    ],\r\n                };\r\n\r\n                addLogToCollection(logData);\r\n                toast.show({\r\n                    render: () => {\r\n                        return <View style={{ backgroundColor: '#16A34A', padding: 5, borderRadius: 5 }}>\r\n                            <Text style={{ color: 'white' }}>Country added successfully!</Text>\r\n                        </View>;\r\n                    }\r\n                })\r\n                dispatch(setAddCountryModalVisible(false));\r\n                setAddButtonLoading(false);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n\r\n        else {\r\n            setAddButtonLoading(false);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const handleFirstModalClose = () => {\r\n        dispatch(setAddCountryModalVisible(false));\r\n\r\n    };\r\n    const handleFirstModalOpen = () => {\r\n        dispatch(setAddCountryModalVisible(true));\r\n    }\r\n\r\n    const filterInput = (inputRef) => {\r\n        const currentValue = inputRef.current.value;\r\n        const filteredValue = currentValue.replace(/[^a-zA-Z0-9. ]/g, '');\r\n        if (currentValue !== filteredValue) {\r\n            inputRef.current.setNativeProps({ text: filteredValue });\r\n        }\r\n    };\r\n    return (\r\n        <Modal\r\n            isOpen={addCountryModalVisible}\r\n            onClose={() => {\r\n                handleAddCountryModalClose();\r\n                inputCountryText.current.value = '';\r\n            }}\r\n            size={'md'}>\r\n            <Modal.Content>\r\n                <Modal.CloseButton />\r\n                <Modal.Header style={{ backgroundColor: '#7B9CFF', }}><Text color={'white'} fontSize={20} bold>Add Country</Text></Modal.Header>\r\n                <Modal.Body >\r\n                    <View style={{ marginVertical: 5, }}>\r\n                        <View style={{ backgroundColor: '#7B9CFF', flex: 1, }}>\r\n                            <Text bold color={'white'} marginLeft={1}>Country</Text>\r\n                        </View>\r\n                        <TextInput\r\n                            ref={inputCountryText}\r\n                            onChangeText={() => filterInput(inputCountryText)}\r\n                            style={{\r\n                                outlineStyle: 'none',\r\n                                flex: 1,\r\n                                padding: 5,\r\n                                backgroundColor: 'white',\r\n                                borderBottomLeftRadius: 5,\r\n                                borderBottomRightRadius: 5,\r\n                                placeholderTextColor: '#ACADA3',\r\n                                borderColor: '#D4D4D4',\r\n                                borderWidth: 1,\r\n                            }}\r\n                            placeholder='Input Country' />\r\n\r\n                    </View>\r\n\r\n\r\n                </Modal.Body>\r\n                <Modal.Footer >\r\n                    <Button.Group variant=\"solid\" space=\"2\">\r\n                        <Button colorScheme={'gray'} onPress={() => {\r\n                            handleAddCountryModalClose();\r\n                            inputCountryText.current.value = '';\r\n                        }}>Cancel</Button>\r\n                        {addButtonLoading ?\r\n                            (<Spinner size=\"lg\" color={'#16A34A'} />) :\r\n                            (<Button colorScheme={'success'} onPress={handleAddButton}>Add</Button>)\r\n                        }\r\n\r\n                    </Button.Group>\r\n                </Modal.Footer>\r\n            </Modal.Content>\r\n        </Modal>\r\n\r\n    );\r\n\r\n}\r\n\r\nconst NavigatePage = () => {\r\n    const selectedButton = useSelector((state) => state.selectedButton);\r\n\r\n    if (selectedButton === 'countries') {\r\n        return <CountriesTable />;\r\n    }\r\n    if (selectedButton === 'ports') {\r\n        return <PortsTable />;\r\n    }\r\n};\r\n\r\n\r\nconst AddPortsForCountriesModal = ({ handleAddPortsForCountriesModalClose, handleAddPortsForCountriesModalOpen }) => {\r\n\r\n    const addPortsForCountriesModalVisible = useSelector((state) => state.addPortsForCountriesModalVisible);\r\n    const countryPortsData = useSelector((state) => state.countryPortsData);\r\n    const [data, setData] = useState([]);\r\n    const [modalSortOpen, setModalSortOpen] = useState(false);\r\n    const [modalAddOpen, setModalAddOpen] = useState(false);\r\n    const [modalAddSuccess, setModalAddSuccess] = useState(false);\r\n    const [modalSave, setModalSave] = useState(false);\r\n    const [modalSaveLoading, setModalSaveLoading] = useState(false);\r\n    const [modalIsLoading, setModalIsLoading] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const toast = useToast();\r\n\r\n    useEffect(() => {\r\n        // Replace dots with underscores in the country code\r\n        const formattedCountryCode = selectedCountry.replace(/\\./g, '_');\r\n\r\n        // Reference to your document\r\n        const docRef = doc(projectExtensionFirestore, 'CustomerCountryPort', 'CountriesDoc');\r\n\r\n        // Listen for document updates\r\n        const unsubscribe = onSnapshot(docRef, (documentSnapshot) => {\r\n            if (documentSnapshot.exists()) {\r\n                // Use bracket notation to access the property using the variable\r\n                const countryData = documentSnapshot.data()[formattedCountryCode];\r\n                // Make sure to check if countryData exists before trying to access its properties\r\n                if (countryData && countryData.nearestPorts) {\r\n                    const nearestPorts = countryData.nearestPorts;\r\n                    setData(nearestPorts);\r\n\r\n                }\r\n                else {\r\n                    setData([]);\r\n                }\r\n            } else {\r\n                // documentSnapshot.data() will be undefined in this case\r\n\r\n                console.log('No such document!');\r\n            }\r\n        },\r\n            (error) => {\r\n                // Handle the error\r\n                console.error(\"Error getting document: \", error);\r\n            });\r\n\r\n        // Detach the listener when the component unmounts\r\n        return () => unsubscribe();\r\n    }, [addPortsForCountriesModalVisible]);\r\n\r\n    const handleDeleteItemPress = useCallback(\r\n        (item) => {\r\n            setData((prevData) => {\r\n                const updatedData = prevData.filter((value) => value !== item);\r\n                return updatedData;\r\n            });\r\n        },\r\n        []\r\n    );\r\n\r\n    const handleModalAddOpen = useCallback(() => {\r\n        setModalAddOpen(true);\r\n        handleAddPortsForCountriesModalClose();\r\n        setModalIsLoading(true);\r\n        // handleFirstModalClose();\r\n\r\n    }, []);\r\n\r\n    const handleModalAddClose = useCallback(() => {\r\n        setModalAddOpen(false);\r\n        dispatch(setAddPortsForCountriesModalVisible(true));\r\n    }, []);\r\n\r\n    const addPortForCountryField = async (newValue) => {\r\n        // Specify the document reference\r\n        const documentRef = doc(projectExtensionFirestore, 'CustomerCountryPort', 'CountriesDoc');\r\n        setModalSaveLoading(true);\r\n        const response = await axios.get('http://worldtimeapi.org/api/timezone/Asia/Tokyo');\r\n        const { datetime } = response.data;\r\n        const formattedTime = moment(datetime).format('YYYY/MM/DD [at] HH:mm:ss');\r\n        const year = moment(datetime).format('YYYY');\r\n        const month = moment(datetime).format('MM');\r\n        const monthWithDay = moment(datetime).format('MM/DD');\r\n        const date = moment(datetime).format('YYYY/MM/DD');\r\n        const day = moment(datetime).format('DD');\r\n        const time = moment(datetime).format('HH:mm');\r\n\r\n\r\n        if (selectedPortForCountry.ports !== '') {\r\n            const formattedCountryCode = selectedCountry.replace(/\\./g, '_');\r\n            const nearestPortsField = `${formattedCountryCode}.nearestPorts`;\r\n\r\n            try {\r\n                // Fetch the current nearestPorts array from Firestore\r\n                const docSnap = await getDoc(documentRef);\r\n                if (docSnap.exists()) {\r\n                    const nearestPorts = docSnap.data()[formattedCountryCode]?.nearestPorts || [];\r\n\r\n                    // Check if selectedPortForCountry is already in the nearestPorts array\r\n                    if (!nearestPorts.includes(selectedPortForCountry.ports)) {\r\n                        // Update the document with the new value\r\n                        await updateDoc(documentRef, {\r\n                            [nearestPortsField]: [...nearestPorts, selectedPortForCountry.ports]\r\n                        });\r\n\r\n                        const logData = {\r\n                            message: `Nearest Ports Added: \"${nameVariable.text}\" added \"${selectedPortForCountry.ports}\" port to \"${selectedCountry}\"`,\r\n                            timestamp: formattedTime,\r\n                            colorScheme: true,\r\n                            keywords: [\r\n                                formattedTime.toLowerCase(),\r\n                                `Nearest Ports Added: \"${nameVariable.text}\" added \"${selectedPortForCountry.ports}\" port to \"${selectedCountry}\"`.toLowerCase(),\r\n                                'Nearest Ports'.toLowerCase(),\r\n                                'Nearest'.toLowerCase(),\r\n                                'Nearest Ports Added'.toLowerCase(),\r\n                                'Ports'.toLowerCase(),\r\n                                'Added'.toLowerCase(),\r\n                                selectedPortForCountry.ports.toLowerCase(),\r\n                                selectedCountry.toLowerCase(),\r\n                                nameVariable.text.toLowerCase(),\r\n                                year.toLowerCase(),\r\n                                month.toLowerCase(),\r\n                                monthWithDay.toLowerCase(),\r\n                                date.toLowerCase(),\r\n                                day.toLowerCase(),\r\n                                time.toLowerCase(),\r\n                            ],\r\n                        };\r\n                        addLogToCollection(logData);\r\n                        handleAddPortsForCountriesModalClose();\r\n                        toast.show({\r\n                            render: () => {\r\n                                return <View style={{ backgroundColor: '#16A34A', padding: 5, borderRadius: 5 }}>\r\n                                    <Text style={{ color: 'white' }}>Nearest Ports added successfully</Text>\r\n                                </View>;\r\n                            }\r\n                        })\r\n                        console.log('Nearest Ports added successfully');\r\n                        setModalSaveLoading(false);\r\n                        handleModalAddClose();\r\n                        // ...\r\n                    } else {\r\n                        // Handle the case where the port already exists\r\n                        console.log('Port already exists in the nearest ports list');\r\n                        setModalSaveLoading(false);\r\n\r\n                        // You can show a message to the user here if needed\r\n                    }\r\n                } else {\r\n                    console.log('No such document!');\r\n                    setModalSaveLoading(false);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error updating inspection:', error);\r\n                setModalSaveLoading(false);\r\n                // Error handling...\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setLoadingModalVisible(false));\r\n            console.log(newValue);\r\n\r\n        }\r\n\r\n    };\r\n\r\n\r\n    const updateCountryPortsField = async (newValue) => {\r\n        // Specify the document reference\r\n        const documentRef = doc(projectExtensionFirestore, 'CustomerCountryPort', 'CountriesDoc');\r\n        setModalSaveLoading(true);\r\n        const response = await axios.get('http://worldtimeapi.org/api/timezone/Asia/Tokyo');\r\n        const { datetime } = response.data;\r\n        const formattedTime = moment(datetime).format('YYYY/MM/DD [at] HH:mm:ss');\r\n        const year = moment(datetime).format('YYYY');\r\n        const month = moment(datetime).format('MM');\r\n        const monthWithDay = moment(datetime).format('MM/DD');\r\n        const date = moment(datetime).format('YYYY/MM/DD');\r\n        const day = moment(datetime).format('DD');\r\n        const time = moment(datetime).format('HH:mm');\r\n\r\n\r\n        if (newValue !== '') {\r\n            // Replace dots with underscores in the countryCode if the keys in Firestore use underscores\r\n            // If your keys can contain dots and are used as such in Firestore, do not replace with underscores.\r\n            const formattedCountryCode = selectedCountry.replace(/\\./g, '_'); // Replace dots with underscores or any other valid character\r\n\r\n            // Specify the field using dot notation for the nested field\r\n            const nearestPortsField = `${formattedCountryCode}.nearestPorts`;\r\n\r\n            try {\r\n\r\n\r\n                await updateDoc(documentRef, {\r\n                    [nearestPortsField]: newValue\r\n                });\r\n\r\n                dispatch(setLoadingModalVisible(false));\r\n                const logData = {\r\n                    message: `Nearest Ports Updated: \"${nameVariable.text}\" updated \"${selectedCountry}\" nearest ports`,\r\n                    timestamp: formattedTime,\r\n                    colorScheme: true,\r\n                    keywords: [\r\n                        formattedTime.toLowerCase(),\r\n                        `Nearest Ports Updated: \"${nameVariable.text}\" updated \"${selectedCountry}\" nearest ports`.toLowerCase(),\r\n                        'Nearest Ports'.toLowerCase(),\r\n                        'Nearest'.toLowerCase(),\r\n                        'Nearest Ports Updated'.toLowerCase(),\r\n                        'Ports'.toLowerCase(),\r\n                        'Updated'.toLowerCase(),\r\n                        selectedCountry.toLowerCase(),\r\n                        nameVariable.text.toLowerCase(),\r\n                        year.toLowerCase(),\r\n                        month.toLowerCase(),\r\n                        monthWithDay.toLowerCase(),\r\n                        date.toLowerCase(),\r\n                        day.toLowerCase(),\r\n                        time.toLowerCase(),\r\n                    ],\r\n                };\r\n                addLogToCollection(logData);\r\n                handleAddPortsForCountriesModalClose();\r\n                toast.show({\r\n                    render: () => {\r\n                        return <View style={{ backgroundColor: '#16A34A', padding: 5, borderRadius: 5 }}>\r\n                            <Text style={{ color: 'white' }}>Nearest Ports updated successfully</Text>\r\n                        </View>;\r\n                    }\r\n                })\r\n                console.log('Nearest Ports updated successfully');\r\n                setModalSaveLoading(false);\r\n\r\n                // Perform the update\r\n\r\n            } catch (error) {\r\n                console.error('Error updating inspection:', error);\r\n                setModalSaveLoading(false);\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setLoadingModalVisible(false));\r\n            console.log(newValue);\r\n\r\n        }\r\n\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <><Modal\r\n            isOpen={addPortsForCountriesModalVisible}\r\n            onClose={handleAddPortsForCountriesModalClose}>\r\n            <Modal.Content>\r\n                <Modal.CloseButton />\r\n                <Modal.Header borderBottomWidth={0}>\r\n                    <Text color={'#102A43'} bold>Manage ports for {selectedCountry}</Text>\r\n                </Modal.Header>\r\n                <Modal.Body justifyContent={'center'} alignItems={'center'} flex={1}>\r\n                    <View style={{ width: '100%' }}>\r\n                        <View style={{ alignItems: 'flex-end', }}>\r\n                            <TouchableOpacity onPress={handleModalAddOpen}><Icon as={<FontAwesome name=\"plus-circle\" />} size={5} color=\"#102A43\" /></TouchableOpacity>\r\n                        </View>\r\n                        <View style={{ flex: 1, borderWidth: 1, borderColor: '#102A43', borderRadius: 5, }}>\r\n                            <DraggableFlatList\r\n                                style={{ alignContent: 'center', flex: 1, }}\r\n                                data={data}\r\n                                keyExtractor={(item) => item}\r\n                                renderItem={({ item, drag }) => (\r\n\r\n                                    <View style={{\r\n                                        flex: 1,\r\n                                        backgroundColor: 'rgba(16,42,67, 0.5)',\r\n                                        borderBottomWidth: 1,\r\n                                        borderBottomColor: '#A8A29E',\r\n                                        flexDirection: 'row',\r\n                                        justifyContent: 'center',\r\n                                        alignItems: 'center',\r\n                                    }}>\r\n                                        <TouchableOpacity onPress={() => handleDeleteItemPress(item)}><Icon as={<AntDesign name=\"minuscircle\" />} size={4} color=\"#102A43\" /></TouchableOpacity>\r\n                                        <Text flex={1} textAlign={'center'} color={'white'}>{item}</Text>\r\n                                        <TouchableOpacity onPressIn={drag}><Icon as={<Entypo name=\"menu\" />} size={4} color=\"#102A43\" /></TouchableOpacity>\r\n                                    </View>\r\n\r\n                                )}\r\n                                onDragEnd={useCallback(({ data }) => setData(data), [])} />\r\n\r\n\r\n                        </View>\r\n\r\n                    </View>\r\n                </Modal.Body>\r\n                <Modal.Footer borderTopWidth={0}>\r\n                    <HStack space={5} flex={1}>\r\n                        <Button onPress={handleAddPortsForCountriesModalClose} colorScheme={'muted'} flex={1} size={'sm'} borderRadius={5}>Close</Button>\r\n                        {modalSaveLoading ?\r\n                            (<Button flex={1} size={'sm'} borderRadius={5} colorScheme={'success'} disabled>\r\n                                <Spinner size={18} color={'white'} flex={1} borderRadius={5} />\r\n                            </Button>) :\r\n                            (<Button onPress={() => updateCountryPortsField(data)} flex={1} size={'sm'} borderRadius={5} colorScheme={'success'}>Save</Button>)\r\n                        }\r\n\r\n                    </HStack>\r\n                </Modal.Footer>\r\n            </Modal.Content>\r\n        </Modal>\r\n            <Modal\r\n                isOpen={modalAddOpen}\r\n                onClose={handleModalAddClose}\r\n            // initialFocusRef={textAreaAdd}\r\n            >\r\n                <Modal.Content>\r\n                    <Modal.CloseButton />\r\n                    <Modal.Header borderBottomWidth={0}>\r\n                        <Text color={'#102A43'} bold>Add Ports for {selectedCountry}</Text>\r\n                    </Modal.Header>\r\n                    <Modal.Body justifyContent={'center'} alignItems={'center'} flex={1}>\r\n                        <SearchablePortDropdown modalAddOpen={modalAddOpen} />\r\n\r\n                    </Modal.Body>\r\n                    <Modal.Footer borderTopWidth={0}>\r\n                        <HStack space={5} flex={1}>\r\n                            <Button onPress={handleModalAddClose} colorScheme={'muted'} flex={1} size={'sm'} borderRadius={5}>Close</Button>\r\n                            <Button onPress={() => addPortForCountryField()} isLoading={modalSaveLoading ? true : false} flex={1} size={'sm'} borderRadius={5} colorScheme={'success'}>Add</Button>\r\n                        </HStack>\r\n                    </Modal.Footer>\r\n                </Modal.Content>\r\n            </Modal></>\r\n    );\r\n\r\n}\r\n\r\nconst DeleteCountryModal = ({ handleDeleteCountryModalClose }) => {\r\n    const deleteCountryModalVisible = useSelector((state) => state.deleteCountryModalVisible);\r\n    const [buttonLoading, setButtonLoading] = useState(false);\r\n\r\n    const handleDeleteCountry = async () => {\r\n        setButtonLoading(true);\r\n        const documentRef = doc(projectExtensionFirestore, 'CustomerCountryPort', 'CountriesDoc');\r\n        const formattedFieldCode = selectedCountry.replace(/\\./g, '_');\r\n\r\n        const response = await axios.get('http://worldtimeapi.org/api/timezone/Asia/Tokyo');\r\n        const { datetime } = response.data;\r\n        const formattedTime = moment(datetime).format('YYYY/MM/DD [at] HH:mm:ss');\r\n        const year = moment(datetime).format('YYYY');\r\n        const month = moment(datetime).format('MM');\r\n        const monthWithDay = moment(datetime).format('MM/DD');\r\n        const date = moment(datetime).format('YYYY/MM/DD');\r\n        const day = moment(datetime).format('DD');\r\n        const time = moment(datetime).format('HH:mm');\r\n        updateDoc(documentRef, {\r\n            [formattedFieldCode]: deleteField()\r\n        })\r\n            .then(() => {\r\n                console.log('Field deleted successfully');\r\n                handleDeleteCountryModalClose();\r\n                setButtonLoading(false);\r\n                const logData = {\r\n                    message: `Country Deleted: \"${nameVariable.text}\" deleted country \"${selectedCountry}\" for Freight.`,\r\n                    timestamp: formattedTime,\r\n                    colorScheme: false,\r\n                    keywords: [\r\n                        formattedTime.toLowerCase(),\r\n                        `Country Deleted: \"${nameVariable.text}\" deleted country \"${selectedCountry}\" for Freight.`.toLowerCase(),\r\n                        'Country'.toLowerCase(),\r\n                        'Country Deleted'.toLowerCase(),\r\n                        'Deleted'.toLowerCase(),\r\n                        'Freight'.toLowerCase(),\r\n                        selectedCountry.toLowerCase(),\r\n                        nameVariable.text.toLowerCase(),\r\n                        year.toLowerCase(),\r\n                        month.toLowerCase(),\r\n                        monthWithDay.toLowerCase(),\r\n                        date.toLowerCase(),\r\n                        day.toLowerCase(),\r\n                        time.toLowerCase(),\r\n                    ],\r\n                };\r\n\r\n                addLogToCollection(logData);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error deleting field: ', error);\r\n            });\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <Modal isOpen={deleteCountryModalVisible} onClose={handleDeleteCountryModalClose}>\r\n            <Modal.Content>\r\n                <Modal.CloseButton />\r\n                <Modal.Header>Delete Country?</Modal.Header>\r\n                <Modal.Body>\r\n                    Are you sure you want to delete the selected country?\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <View style={{ flex: 1, flexDirection: 'row' }}>\r\n                        <TouchableOpacity\r\n                            style={{ flex: 1, backgroundColor: '#525252', padding: 5, borderRadius: 5, margin: 5, }}\r\n                            onPress={handleDeleteCountryModalClose}\r\n                        >\r\n                            <Text style={{ color: 'white', alignSelf: 'center', }}>No</Text>\r\n                        </TouchableOpacity>\r\n                        {buttonLoading ?\r\n                            (<TouchableOpacity\r\n                                style={{ flex: 1, backgroundColor: '#DC2626', padding: 5, borderRadius: 5, margin: 5, }}\r\n                            ><Spinner size={18} color={'white'} />\r\n                            </TouchableOpacity>) :\r\n                            (<TouchableOpacity\r\n                                style={{ flex: 1, backgroundColor: '#DC2626', padding: 5, borderRadius: 5, margin: 5, }}\r\n                                onPress={handleDeleteCountry}\r\n                            >\r\n                                <Text style={{ color: 'white', alignSelf: 'center', }}>Yes</Text>\r\n                            </TouchableOpacity>)\r\n                        }\r\n\r\n\r\n                    </View>\r\n                </Modal.Footer>\r\n            </Modal.Content>\r\n        </Modal>\r\n\r\n\r\n    );\r\n}\r\n\r\nconst CountriesTable = () => {\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const optionsPerPage = [10, 20, 50];\r\n    const inspectionIsRequiredData = useSelector((state) => state.inspectionIsRequiredData);\r\n    const inspectionNameData = useSelector((state) => state.inspectionNameData);\r\n    const [data, setData] = useState([]); // This will hold all the countries data   \r\n    const [page, setPage] = useState(0);\r\n    const [itemsPerPage, setItemsPerPage] = useState(optionsPerPage[0]);\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n    const [filteredData, setFilteredData] = useState([]);\r\n\r\n    const inputSearchRef = useRef(null);\r\n    const inputSortOrder = useRef([]);\r\n    const toast = useToast();\r\n    const textAreaAddInspectionIsRequired = useRef(null);\r\n    const textAreaAddInspectionName = useRef(null);\r\n    const screenWidth = Dimensions.get('window').width;\r\n\r\n    useEffect(() => {\r\n        setPage(0);\r\n    }, [itemsPerPage]);\r\n\r\n    const filtered = useMemo(() => {\r\n        return data.filter((item) =>\r\n            item.country.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n            item.inspectionName.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n            item.inspectionIsRequired.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n            item.sortOrder.toString().includes(searchQuery)\r\n        );\r\n    }, [searchQuery, data]);\r\n\r\n    const paginatedData = useMemo(() => {\r\n        const startIndex = page * itemsPerPage;\r\n        const endIndex = startIndex + itemsPerPage;\r\n        return filtered.slice(startIndex, endIndex);\r\n    }, [page, itemsPerPage, searchQuery, data, filtered]);\r\n\r\n\r\n    const handleSearch = debounce(() => {\r\n        setSearchQuery(inputSearchRef.current?.value);\r\n    }, 50);\r\n\r\n    const startIndex = page * itemsPerPage;\r\n    const endIndex = Math.min(startIndex + itemsPerPage, data.length);\r\n\r\n    // useEffect(() => {\r\n    //     const addCountriesToFirestore = async () => {\r\n    //         // Create a new list with dots replaced by underscores\r\n    //         const sanitizedCountriesList = countriesList.map(country =>\r\n    //             country.replace(/\\./g, '_')\r\n    //         );\r\n\r\n    //         for (const [index, country] of sanitizedCountriesList.entries()) {\r\n    //             // The index of an array is zero-based, to make it one-based add 1\r\n    //             // (If you really need a one-based index, otherwise just use index)\r\n    //             const sortOrder = index;\r\n    //             try {\r\n    //                 await addCountry(country, 'Not-Required', '', sortOrder);\r\n    //             } catch (error) {\r\n    //                 console.error(`Error adding country: ${country}`, error);\r\n    //                 // Optionally handle the error by stopping the loop, or continue to the next iteration\r\n    //                 // break; // Stop the loop if an error occurs\r\n    //                 // continue; // Skip to the next iteration\r\n    //             }\r\n    //             // Optionally add a delay here if necessary\r\n    //             // await new Promise(resolve => setTimeout(resolve, 1000)); // 1 second delay\r\n    //         }\r\n    //     };\r\n\r\n    //     addCountriesToFirestore();\r\n    // }, []);\r\n    const handleAddInspectionNameTextChange = () => {\r\n        const textAreaValue = textAreaAddInspectionName.current?.value;\r\n        if (textAreaValue) {\r\n            const newText = textAreaValue\r\n                .split('\\n')\r\n                .map((line) => line.charAt(0).toUpperCase() + line.slice(1))\r\n                .join('\\n');\r\n            textAreaAddInspectionName.current.setNativeProps({ text: newText });\r\n        }\r\n    };\r\n\r\n    const handleAddInspectionIsRequiredTextChange = () => {\r\n        const textAreaValue = textAreaAddInspectionIsRequired.current?.value;\r\n        if (textAreaValue) {\r\n            const newText = textAreaValue\r\n                .split('\\n')\r\n                .map((line) => line.charAt(0).toUpperCase() + line.slice(1))\r\n                .join('\\n');\r\n            textAreaAddInspectionIsRequired.current.setNativeProps({ text: newText });\r\n        }\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const docRef = doc(projectExtensionFirestore, 'CustomerCountryPort', 'CountriesDoc');\r\n        dispatch(setLoadingModalVisible(true));\r\n\r\n        // This will start the listener\r\n        const unsubscribe = onSnapshot(docRef, (docSnap) => {\r\n            if (docSnap.exists()) {\r\n                const data = docSnap.data();\r\n                const formattedData = Object.keys(data)\r\n                    .map(key => ({\r\n                        country: key.replace(/_/g, '.'),\r\n                        ...data[key],\r\n                    }))\r\n                    .sort((a, b) => a.sortOrder - b.sortOrder); // Sorting based on the sortOrder field\r\n                setData(formattedData);\r\n                setFilteredData(formattedData);\r\n                dispatch(setLoadingModalVisible(false));\r\n            } else {\r\n                console.log(\"No such document!\");\r\n\r\n            }\r\n        }, (error) => {\r\n            console.error(\"Error fetching countries: \", error);\r\n\r\n        });\r\n\r\n        // This will unsubscribe from the listener when the component is unmounted\r\n        return () => unsubscribe();\r\n    }, []);\r\n\r\n\r\n    const handleAddCountryModalOpen = () => {\r\n\r\n        dispatch(setAddCountryModalVisible(true));\r\n\r\n    }\r\n\r\n    const handleAddCountryModalClose = () => {\r\n\r\n        dispatch(setAddCountryModalVisible(false));\r\n\r\n    }\r\n\r\n\r\n    const handleAddPortsForCountriesModalOpen = (nearestPorts, country) => {\r\n\r\n        dispatch(setAddPortsForCountriesModalVisible(true));\r\n        dispatch(setCountryPortsData(nearestPorts));\r\n        // setSelectedCountry(selectedCountry);\r\n        selectedCountry = country;\r\n    }\r\n\r\n\r\n    const handleAddPortsForCountriesModalClose = () => {\r\n\r\n        dispatch(setAddPortsForCountriesModalVisible(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        paginatedData.forEach(item => {\r\n            inputSortOrder.current[item.country].value = item.sortOrder ? item.sortOrder : 0;\r\n        });\r\n        // setInputMemoValues(initialValues);\r\n\r\n    }, [paginatedData, screenWidth]); // Run this effect when 'items' changes\r\n    // Now, to update a specific field\r\n\r\n    const updateCountrySortOrder = async (countryCode, newValue, inputRef) => {\r\n        // Specify the document reference\r\n        const response = await axios.get('http://worldtimeapi.org/api/timezone/Asia/Tokyo');\r\n        const { datetime } = response.data;\r\n        const formattedTime = moment(datetime).format('YYYY/MM/DD [at] HH:mm:ss');\r\n        const year = moment(datetime).format('YYYY');\r\n        const month = moment(datetime).format('MM');\r\n        const monthWithDay = moment(datetime).format('MM/DD');\r\n        const date = moment(datetime).format('YYYY/MM/DD');\r\n        const day = moment(datetime).format('DD');\r\n        const time = moment(datetime).format('HH:mm');\r\n\r\n        const documentRef = doc(projectExtensionFirestore, 'CustomerCountryPort', 'CountriesDoc');\r\n        dispatch(setLoadingModalVisible(true));\r\n        if (newValue !== '') {\r\n            // Replace dots with underscores in the countryCode if the keys in Firestore use underscores\r\n            // If your keys can contain dots and are used as such in Firestore, do not replace with underscores.\r\n            const formattedCountryCode = countryCode.replace(/\\./g, '_'); // Replace dots with underscores or any other valid character\r\n\r\n            // Specify the field using dot notation for the nested field\r\n            const sortOrderField = `${formattedCountryCode}.sortOrder`;\r\n\r\n            try {\r\n                // Perform the update\r\n                await updateDoc(documentRef, {\r\n                    [sortOrderField]: newValue\r\n                });\r\n\r\n\r\n\r\n                const logData = {\r\n                    message: `Sort Order Updated: \"${nameVariable.text}\" updated \"${countryCode}\" sort order to \"${newValue}\".`,\r\n                    timestamp: formattedTime,\r\n                    colorScheme: true,\r\n                    keywords: [\r\n                        formattedTime.toLowerCase(),\r\n                        `Sort Order Updated: \"${nameVariable.text}\" updated \"${countryCode}\" sort order to \"${newValue}\"`.toLowerCase(),\r\n                        'Sort'.toLowerCase(),\r\n                        'Sort Order'.toLowerCase(),\r\n                        'Sort Order Updated'.toLowerCase(),\r\n                        'Order Updated'.toLowerCase(),\r\n                        'Order'.toLowerCase(),\r\n                        'Updated'.toLowerCase(),\r\n                        countryCode.toLowerCase(),\r\n                        nameVariable.text.toLowerCase(),\r\n                        year.toLowerCase(),\r\n                        month.toLowerCase(),\r\n                        monthWithDay.toLowerCase(),\r\n                        date.toLowerCase(),\r\n                        day.toLowerCase(),\r\n                        time.toLowerCase(),\r\n                    ],\r\n                };\r\n                toast.show({\r\n                    render: () => {\r\n                        return <View style={{ backgroundColor: '#16A34A', padding: 5, borderRadius: 5 }}>\r\n                            <Text style={{ color: 'white' }}>Sort order updated successfully!</Text>\r\n                        </View>;\r\n                    }\r\n                })\r\n                addLogToCollection(logData);\r\n                dispatch(setLoadingModalVisible(false));\r\n                console.log('Sort order updated successfully');\r\n            } catch (error) {\r\n                console.error('Error updating sort order:', error);\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setLoadingModalVisible(false));\r\n\r\n        }\r\n\r\n    };\r\n    // Call the function to update the field\r\n\r\n\r\n\r\n\r\n    const handleSortOrderTextChange = (text, item) => {\r\n        // Remove any non-numeric characters from the input text and limit to 3 digits\r\n        const numericValue = text.replace(/[^0-9]/g, '').slice(0, 3);\r\n\r\n        inputSortOrder.current[item.country].value = numericValue;\r\n\r\n    };\r\n\r\n\r\n\r\n\r\n    const handleDeleteCountryModalOpen = (selectedValue) => {\r\n\r\n        dispatch(setDeleteCountryModalVisible(true));\r\n        selectedCountry = selectedValue;\r\n\r\n    }\r\n\r\n    const handleDeleteCountryModalClose = () => {\r\n\r\n        dispatch(setDeleteCountryModalVisible(false));\r\n\r\n    }\r\n\r\n    const handleUpdateInsurance = async (newValue, currentValue, countryCode) => {\r\n\r\n        // Specify the document reference\r\n        const documentRef = doc(projectExtensionFirestore, 'CustomerCountryPort', 'CountriesDoc');\r\n        dispatch(setLoadingModalVisible(true));\r\n        const response = await axios.get('http://worldtimeapi.org/api/timezone/Asia/Tokyo');\r\n        const { datetime } = response.data;\r\n        const formattedTime = moment(datetime).format('YYYY/MM/DD [at] HH:mm:ss');\r\n        const year = moment(datetime).format('YYYY');\r\n        const month = moment(datetime).format('MM');\r\n        const monthWithDay = moment(datetime).format('MM/DD');\r\n        const date = moment(datetime).format('YYYY/MM/DD');\r\n        const day = moment(datetime).format('DD');\r\n        const time = moment(datetime).format('HH:mm');\r\n        if (newValue !== '') {\r\n            // Replace dots with underscores in the countryCode if the keys in Firestore use underscores\r\n            // If your keys can contain dots and are used as such in Firestore, do not replace with underscores.\r\n            const formattedCountryCode = countryCode.replace(/\\./g, '_'); // Replace dots with underscores or any other valid character\r\n\r\n            // Specify the field using dot notation for the nested field\r\n            const insuranceField = `${formattedCountryCode}.insurance`;\r\n\r\n            try {\r\n                if (currentValue == newValue) {\r\n\r\n                    dispatch(setLoadingModalVisible(false));\r\n\r\n                }\r\n                else {\r\n\r\n                    await updateDoc(documentRef, {\r\n                        [insuranceField]: newValue,\r\n                    });\r\n\r\n                    dispatch(setLoadingModalVisible(false));\r\n                    const logData = {\r\n                        message: `Insurance Updated: \"${nameVariable.text}\" updated \"${countryCode}\" insurance to \"${newValue}\"`,\r\n                        timestamp: formattedTime,\r\n                        colorScheme: true,\r\n                        keywords: [\r\n                            formattedTime.toLowerCase(),\r\n                            `Insurance Updated: \"${nameVariable.text}\" updated \"${countryCode}\" insurance to \"${newValue}\"`.toLowerCase(),\r\n                            'Insurance'.toLowerCase(),\r\n                            'Inspection'.toLowerCase(),\r\n                            'Insurance Updated'.toLowerCase(),\r\n                            'Updated'.toLowerCase(),\r\n                            newValue.toString().toLowerCase(),\r\n                            countryCode.toLowerCase(),\r\n                            nameVariable.text.toLowerCase(),\r\n                            year.toLowerCase(),\r\n                            month.toLowerCase(),\r\n                            monthWithDay.toLowerCase(),\r\n                            date.toLowerCase(),\r\n                            day.toLowerCase(),\r\n                            time.toLowerCase(),\r\n                        ],\r\n                    };\r\n                    addLogToCollection(logData);\r\n                    toast.show({\r\n                        render: () => {\r\n                            return <View style={{ backgroundColor: '#16A34A', padding: 5, borderRadius: 5 }}>\r\n                                <Text style={{ color: 'white' }}>Insurance updated successfully</Text>\r\n                            </View>;\r\n                        }\r\n                    })\r\n                    console.log('Insurance updated successfully');\r\n                }\r\n                // Perform the update\r\n\r\n            } catch (error) {\r\n                console.error('Error updating inspection:', error);\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setLoadingModalVisible(false));\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {screenWidth >= 1280 ? (\r\n                <View style={{ flex: 1, }}>\r\n                    {/* Search Bar */}\r\n                    <View style={{ padding: 10 }}>\r\n                        <TextInput\r\n                            ref={inputSearchRef}\r\n                            onSubmitEditing={handleSearch}\r\n                            style={{ outlineStyle: 'none', padding: 10, backgroundColor: 'white', borderRadius: 5, placeholderTextColor: '#ACADA3' }}\r\n                            placeholder='Search'\r\n                            returnKeyType='search'\r\n                            autoCapitalize='none'\r\n                        />\r\n                    </View>\r\n\r\n                    {/* Add Country Button */}\r\n                    <View style={{ paddingHorizontal: 10, paddingTop: 0, paddingBottom: 0, alignItems: 'flex-start' }}>\r\n                        <TouchableOpacity\r\n                            onPress={handleAddCountryModalOpen}\r\n                            style={{\r\n                                borderRadius: 5,\r\n                                padding: 10,\r\n                                borderWidth: 1,\r\n                                borderColor: 'white',\r\n                                backgroundColor: '#16A34A',\r\n                                flexDirection: 'row',\r\n                                alignItems: 'center',\r\n                                justifyContent: 'center',\r\n                            }}\r\n                        >\r\n                            <MaterialIcons name=\"add\" size={20} color={'white'} />\r\n                            <Text style={{ color: 'white', fontWeight: 'bold', marginLeft: 5 }}>Add Country</Text>\r\n                        </TouchableOpacity>\r\n                    </View>\r\n\r\n                    {/* Table Headers */}\r\n                    <View\r\n                        style={{\r\n                            flexDirection: 'row',\r\n                            justifyContent: 'space-between',\r\n                            borderBottomWidth: 1,\r\n                            borderBottomColor: '#E4E4E7',\r\n                            backgroundColor: '#0642F4',\r\n                            padding: 10,\r\n                            borderRadius: 5,\r\n                            marginTop: 10,\r\n                        }}\r\n                    >\r\n                        <View style={{ flex: 1, padding: 2, }}>\r\n                            <Text style={{ color: 'white', }} bold>Country</Text>\r\n                        </View>\r\n                        <View style={{ flex: screenWidth < 1700 ? 2 : 1, padding: 2, }}>\r\n                            <Text style={{ color: 'white', }} bold>Sort Order</Text>\r\n                        </View>\r\n                        <View style={{ flex: screenWidth < 1700 ? 2 : 1, padding: 2, flexDirection: 'row', }}>\r\n                            <SortAndAddModal\r\n                                collectionName='CustomerCountryPort'\r\n                                docName='InspectionIsRequiredDoc'\r\n                                handleAddTextChange={handleAddInspectionIsRequiredTextChange}\r\n                                textAreaAdd={textAreaAddInspectionIsRequired}\r\n                                title='Inspection'\r\n                                dataName={'inspectionIsRequiredData'}\r\n                                databaseInit={projectExtensionFirestore}\r\n                                headerText=\"Rearrange/Add Inspection\"\r\n                                data={inspectionIsRequiredData}\r\n                            />\r\n                            <Text flex={1} style={{ color: 'white', }} bold>Inspection</Text>\r\n                        </View>\r\n                        <View style={{ flex: screenWidth < 1700 ? 2 : 1, padding: 2, flexDirection: 'row', }}>\r\n                            <SortAndAddModal\r\n                                collectionName='CustomerCountryPort'\r\n                                docName='InspectionNameDoc'\r\n                                handleAddTextChange={handleAddInspectionNameTextChange}\r\n                                textAreaAdd={textAreaAddInspectionName}\r\n                                title='Inspection Name'\r\n                                dataName={'inspectionNameData'}\r\n                                databaseInit={projectExtensionFirestore}\r\n                                headerText=\"Rearrange/Add Inspection\"\r\n                                data={inspectionNameData}\r\n                            />\r\n                            <Text style={{ color: 'white', }} bold>Inspection Name</Text>\r\n                        </View>\r\n                        <View style={{ flex: 1, padding: 2 }}>\r\n                            <Text style={{ color: 'white', alignSelf: 'center', }} bold>Insurance</Text>\r\n                        </View>\r\n                        <View style={{ flex: screenWidth < 1700 ? 2 : 1, padding: 2 }}>\r\n                            <Text style={{ color: 'white', alignSelf: 'center', }} bold>Nearest Port</Text>\r\n                        </View>\r\n\r\n                        <View style={{ flex: 1, padding: 2, justifyContent: 'center', alignItems: 'center', }}>\r\n                            <Text style={{ color: 'white', }} bold>Operate</Text>\r\n                        </View>\r\n\r\n                    </View>\r\n\r\n                    <DataTable margin={[0, 0, 0, 1, 1, 1]}>\r\n                        {paginatedData.map((item, index) => (\r\n                            <View\r\n                                key={index}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    flexDirection: 'row',\r\n                                    justifyContent: 'space-between',\r\n                                    alignItems: 'center',\r\n                                    borderBottomWidth: 1,\r\n                                    borderBottomColor: '#E4E4E7',\r\n                                    backgroundColor: '#BFDBFE',\r\n                                    paddingVertical: 10,\r\n                                }}>\r\n                                <Text style={{ flex: 1, marginHorizontal: 5 }} selectable>{item.country}</Text>\r\n                                <View style={{ flex: screenWidth < 1700 ? 2 : 1, flexDirection: 'row', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, marginHorizontal: 5, }}>\r\n                                    {/* <Text style={{ borderTopLeftRadius: 5, borderBottomLeftRadius: 5, alignSelf: 'center', backgroundColor: 'white', padding: 8 }}>{item.sortOrder}→</Text> */}\r\n                                    <TextInput\r\n                                        ref={(ref) => (inputSortOrder.current[item.country] = ref)}\r\n                                        style={{ outlineStyle: 'none', padding: 5, width: '20%', backgroundColor: 'white', borderLeftColor: '#E4E4E7', borderLeftWidth: 1, }}\r\n                                        onSubmitEditing={() => updateCountrySortOrder(item.country, inputSortOrder.current[item.country].value, inputSortOrder)}\r\n                                        onChangeText={(text) => handleSortOrderTextChange(text, item)}\r\n                                    />\r\n                                    <View style={{ backgroundColor: 'white', borderTopRightRadius: 5, borderBottomRightRadius: 5, }}>\r\n                                        <TouchableHighlight\r\n                                            onPress={() => updateCountrySortOrder(item.country, inputSortOrder.current[item.country].value, inputSortOrder)}\r\n                                            underlayColor={'rgba(22, 163, 74, 0.3)'}\r\n                                            style={{\r\n                                                backgroundColor: '#16A34A',\r\n                                                borderRadius: 5,\r\n                                                padding: 5,\r\n                                                margin: 2,\r\n                                                alignSelf: 'center',\r\n                                            }}>\r\n                                            <MaterialIcons name='update' color='white' size={22} />\r\n                                        </TouchableHighlight>\r\n                                    </View>\r\n\r\n                                </View>\r\n                                {/* <Text style={{ flex: 1, marginHorizontal: 5 }}>{item.inspectionIsRequired}</Text> */}\r\n                                <View style={{ flex: screenWidth < 1700 ? 2 : 1, marginHorizontal: 5 }}>\r\n                                    <SelectInspectionIsRequired width={'70%'} defaultValue={item.inspectionIsRequired} countryCode={item.country} page={page} searchQuery={searchQuery} />\r\n\r\n                                </View>\r\n                                <View style={{ flex: screenWidth < 1700 ? 2 : 1, marginHorizontal: 5 }}>\r\n                                    <SelectInspectionName width={'70%'} defaultValue={item.inspectionName} countryCode={item.country} page={page} searchQuery={searchQuery} />\r\n                                </View>\r\n\r\n                                <View style={{ flex: 1, marginHorizontal: 5, justifyContent: 'center', alignItems: 'center', }}>\r\n                                    <BouncyCheckbox\r\n                                        size={25}\r\n                                        fillColor=\"#0642F4\"\r\n                                        unfillColor=\"#FFFFFF\"\r\n                                        innerIconStyle={{ borderWidth: 2 }}\r\n                                        textStyle={{ fontFamily: \"JosefinSans-Regular\" }}\r\n                                        isChecked={item.insurance ? item.insurance : false}\r\n                                        onPress={(isChecked) => handleUpdateInsurance(isChecked, item.insurance ? item.insurance : false, item.country)}\r\n                                    />\r\n                                </View>\r\n                                <View style={{ flexDirection: 'row', flex: screenWidth < 1700 ? 2 : 1, marginHorizontal: 5 }}>\r\n                                    <TouchableOpacity\r\n                                        onPress={() => handleAddPortsForCountriesModalOpen(item.nearestPorts ? item.nearestPorts : [], item.country)}\r\n                                        style={{ flex: 1, backgroundColor: '#0891B2', padding: 5, borderRadius: 5, flexDirection: 'row', justifyContent: 'center', alignItems: 'center', margin: 5, }}\r\n                                    >\r\n                                        <MaterialIcons\r\n                                            name=\"directions-boat\" // The icon name from MaterialIcons\r\n                                            size={20} // Set the size of the icon\r\n                                            color={'white'} // Set the color based on active state\r\n                                        />\r\n                                        <Text style={{ alignSelf: 'center', color: 'white', marginLeft: 3, }}>View Ports</Text>\r\n                                    </TouchableOpacity>\r\n                                    {/* <TouchableOpacity style={{ flex: 1 }}>\r\n                                <Text>Add Ports</Text>\r\n                            </TouchableOpacity> */}\r\n                                </View>\r\n                                <View style={{ flex: 1, flexDirection: 'row', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, marginHorizontal: 3, justifyContent: 'center', alignItems: 'center', }}>\r\n\r\n                                    <View style={{ borderTopRightRadius: 5, borderBottomRightRadius: 5, }}>\r\n                                        <TouchableHighlight\r\n                                            onPress={() => handleDeleteCountryModalOpen(item.country)}\r\n                                            underlayColor={'rgba(22, 163, 74, 0.3)'}\r\n                                            style={{\r\n                                                backgroundColor: '#DC2626',\r\n                                                borderRadius: 5,\r\n                                                padding: 10,\r\n                                                alignSelf: 'center',\r\n                                                height: '100%',\r\n                                                justifyContent: 'center',\r\n                                                alignItems: 'center',\r\n                                            }}>\r\n                                            <AntDesign name='delete' color='white' size={22} />\r\n                                        </TouchableHighlight>\r\n                                    </View>\r\n                                </View>\r\n                                {/* You can add the mapping for nearestPorts here, assuming nearestPorts is an array */}\r\n                                {/* {item.nearestPorts && item.nearestPorts.map((port, portIndex) => (\r\n            <Text key={portIndex}>Nearest Port: {port}</Text>\r\n          ))} */}\r\n                            </View>\r\n                        ))}\r\n                        <DataTable.Pagination\r\n                            page={page}\r\n                            numberOfPages={Math.ceil(filtered.length / itemsPerPage)}\r\n                            onPageChange={(page) => setPage(page)}\r\n                            label={`${startIndex + 1}-${endIndex} of ${filtered.length}`}\r\n                            optionsPerPage={optionsPerPage}\r\n                            itemsPerPage={itemsPerPage}\r\n                            setItemsPerPage={setItemsPerPage}\r\n                            showFastPagination\r\n                            optionsLabel={'Rows per page'}\r\n                        />\r\n                    </DataTable>\r\n                    <AddCountryModal handleAddCountryModalClose={handleAddCountryModalClose} />\r\n                    <AddPortsForCountriesModal handleAddPortsForCountriesModalClose={handleAddPortsForCountriesModalClose} handleAddPortsForCountriesModalOpen={handleAddPortsForCountriesModalOpen} />\r\n                    <DeleteCountryModal handleDeleteCountryModalClose={handleDeleteCountryModalClose} />\r\n                </View>\r\n            ) :\r\n\r\n                (\r\n                    //Countries Table Mobile View\r\n                    <View style={{ flex: 1, }}>\r\n                        {/* Search Bar */}\r\n                        <View style={{ padding: 10 }}>\r\n                            <TextInput\r\n                                ref={inputSearchRef}\r\n                                onSubmitEditing={handleSearch}\r\n                                style={{ outlineStyle: 'none', padding: 10, backgroundColor: 'white', borderRadius: 5, placeholderTextColor: '#ACADA3' }}\r\n                                placeholder='Search'\r\n                                returnKeyType='search'\r\n                                autoCapitalize='none'\r\n                            />\r\n                        </View>\r\n\r\n                        <View style={{ paddingHorizontal: 10, paddingTop: 0, paddingBottom: 0, alignItems: 'flex-start' }}>\r\n                            <TouchableOpacity\r\n                                onPress={handleAddCountryModalOpen}\r\n                                style={{\r\n                                    borderRadius: 5,\r\n                                    padding: 10,\r\n                                    borderWidth: 1,\r\n                                    borderColor: 'white',\r\n                                    backgroundColor: '#16A34A',\r\n                                    flexDirection: 'row',\r\n                                    alignItems: 'center',\r\n                                    justifyContent: 'center',\r\n                                }}\r\n                            >\r\n                                <MaterialIcons name=\"add\" size={20} color={'white'} />\r\n                                <Text style={{ color: 'white', fontWeight: 'bold', marginLeft: 5 }}>Add Country</Text>\r\n                            </TouchableOpacity>\r\n                        </View>\r\n\r\n\r\n                        {/* Table Headers */}\r\n\r\n\r\n                        <DataTable margin={[0, 0, 0, 1, 1, 1]}>\r\n                            {paginatedData.map((item, index) => (\r\n                                <View\r\n                                    key={index}\r\n                                    style={{\r\n                                        flex: 1,\r\n                                        flexDirection: 'column',\r\n                                        borderWidth: 1,\r\n                                        borderColor: '#E4E4E7',\r\n                                        backgroundColor: '#BFDBFE',\r\n                                        margin: 10,\r\n                                    }}>\r\n\r\n                                    <View style={{ flexDirection: 'row' }}>\r\n                                        <View style={{ width: '30%', padding: 2, backgroundColor: '#0642F4', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', }}>\r\n                                            <Text style={{ color: 'white', }} bold>Country</Text>\r\n                                        </View>\r\n                                        <View style={{ flex: 1, borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', }}>\r\n                                            <Text selectable style={{ marginLeft: 3 }}>{item.country}</Text>\r\n                                        </View>\r\n                                    </View>\r\n\r\n                                    <View style={{ flexDirection: 'row' }}>\r\n                                        <View style={{ width: '30%', padding: 2, backgroundColor: '#0642F4', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', }}>\r\n                                            <Text style={{ color: 'white', }} bold>Sort Order</Text>\r\n                                        </View>\r\n                                        <View style={{ flex: 1, flexDirection: 'row', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, marginHorizontal: 1, borderBottomWidth: 1, borderBottomColor: '#E4E4E7', }}>\r\n                                            {/* <Text style={{ borderTopLeftRadius: 5, borderBottomLeftRadius: 5, alignSelf: 'center', backgroundColor: 'white', padding: 8 }}>{item.sortOrder}→</Text> */}\r\n                                            <TextInput\r\n                                                ref={(ref) => (inputSortOrder.current[item.country] = ref)}\r\n                                                style={{ outlineStyle: 'none', padding: 5, width: '100%', backgroundColor: 'white', borderLeftColor: '#E4E4E7', borderLeftWidth: 1, }}\r\n                                                onSubmitEditing={() => updateCountrySortOrder(item.country, inputSortOrder.current[item.country].value, inputSortOrder)}\r\n                                                onChangeText={(text) => handleSortOrderTextChange(text, item)}\r\n                                            />\r\n                                            <View style={{ backgroundColor: 'white', borderTopRightRadius: 5, borderBottomRightRadius: 5, }}>\r\n                                                <TouchableHighlight\r\n                                                    onPress={() => updateCountrySortOrder(item.country, inputSortOrder.current[item.country].value, inputSortOrder)}\r\n                                                    underlayColor={'rgba(22, 163, 74, 0.3)'}\r\n                                                    style={{\r\n                                                        backgroundColor: '#16A34A',\r\n                                                        borderRadius: 5,\r\n                                                        padding: 5,\r\n                                                        margin: 2,\r\n                                                        alignSelf: 'center',\r\n                                                    }}>\r\n                                                    <MaterialIcons name='update' color='white' size={22} />\r\n                                                </TouchableHighlight>\r\n                                            </View>\r\n\r\n                                        </View>\r\n                                    </View>\r\n\r\n\r\n                                    {/* <Text style={{ flex: 1, marginHorizontal: 5 }}>{item.inspectionIsRequired}</Text> */}\r\n\r\n                                    <View style={{ flexDirection: 'row' }}>\r\n                                        <View style={{ width: '30%', padding: 2, backgroundColor: '#0642F4', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', }}>\r\n                                            <Text style={{ color: 'white', }} bold>Inspection</Text>\r\n                                        </View>\r\n                                        <View style={{ flex: 1, justifyContent: 'center', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', }}>\r\n                                            <SelectInspectionIsRequired width={'100%'} defaultValue={item.inspectionIsRequired} countryCode={item.country} page={page} searchQuery={searchQuery} />\r\n\r\n                                        </View>\r\n                                    </View>\r\n\r\n                                    <View style={{ flexDirection: 'row' }}>\r\n                                        <View style={{ width: '30%', padding: 2, backgroundColor: '#0642F4', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', }}>\r\n                                            <Text style={{ color: 'white', }} bold>Inspection Name</Text>\r\n                                        </View>\r\n\r\n                                        <View style={{ flex: 1, justifyContent: 'center', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', }}>\r\n                                            <SelectInspectionName width={'100%'} defaultValue={item.inspectionName} countryCode={item.country} page={page} searchQuery={searchQuery} />\r\n                                        </View>\r\n                                    </View>\r\n\r\n                                    <View style={{ flexDirection: 'row' }}>\r\n                                        <View style={{ width: '30%', padding: 2, backgroundColor: '#0642F4', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', }}>\r\n                                            <Text style={{ color: 'white', }} bold>Insurance</Text>\r\n                                        </View>\r\n\r\n                                        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', }}>\r\n                                            <BouncyCheckbox\r\n                                                size={25}\r\n                                                fillColor=\"#0642F4\"\r\n                                                unfillColor=\"#FFFFFF\"\r\n                                                innerIconStyle={{ borderWidth: 2 }}\r\n                                                textStyle={{ fontFamily: \"JosefinSans-Regular\" }}\r\n                                                isChecked={item.insurance ? item.insurance : false}\r\n                                                onPress={(isChecked) => handleUpdateInsurance(isChecked, item.insurance ? item.insurance : false, item.country)}\r\n                                            />\r\n                                        </View>\r\n                                    </View>\r\n                                    <View style={{ flexDirection: 'row' }}>\r\n                                        <View style={{ width: '30%', padding: 2, backgroundColor: '#0642F4', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', }}>\r\n                                            <Text style={{ color: 'white', }} bold>Nearest Port</Text>\r\n                                        </View>\r\n\r\n                                        <View style={{ flex: 1, justifyContent: 'center', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', }}>\r\n                                            <View style={{ flexDirection: 'row', flex: 1, marginHorizontal: 5 }}>\r\n                                                <TouchableOpacity\r\n                                                    onPress={() => handleAddPortsForCountriesModalOpen(item.nearestPorts ? item.nearestPorts : [], item.country)}\r\n                                                    style={{ flex: 1, backgroundColor: '#0891B2', padding: 5, borderRadius: 5, flexDirection: 'row', justifyContent: 'center', alignItems: 'center', margin: 5, }}\r\n                                                >\r\n                                                    <MaterialIcons\r\n                                                        name=\"directions-boat\" // The icon name from MaterialIcons\r\n                                                        size={20} // Set the size of the icon\r\n                                                        color={'white'} // Set the color based on active state\r\n                                                    />\r\n                                                    <Text style={{ alignSelf: 'center', color: 'white', marginLeft: 3, }}>View Ports</Text>\r\n                                                </TouchableOpacity>\r\n                                            </View>\r\n                                        </View>\r\n                                    </View>\r\n\r\n                                    <View style={{ flexDirection: 'row' }}>\r\n                                        <View style={{ width: '30%', padding: 2, backgroundColor: '#0642F4', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', }}>\r\n                                            <Text style={{ color: 'white', }} bold>Operate</Text>\r\n                                        </View>\r\n\r\n                                        <View style={{ flex: 1, justifyContent: 'center', }}>\r\n                                            <View style={{ flex: 1, flexDirection: 'row', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, marginHorizontal: 3, }}>\r\n\r\n                                                <View style={{ flex: 1, borderTopRightRadius: 5, borderBottomRightRadius: 5, }}>\r\n                                                    <TouchableHighlight\r\n                                                        onPress={() => handleDeleteCountryModalOpen(item.country)}\r\n                                                        underlayColor={'rgba(22, 163, 74, 0.3)'}\r\n                                                        style={{ flex: 1, backgroundColor: '#DC2626', padding: 5, borderRadius: 5, flexDirection: 'row', justifyContent: 'center', alignItems: 'center', margin: 6, }}>\r\n                                                        <AntDesign name='delete' color='white' size={22} />\r\n                                                    </TouchableHighlight>\r\n                                                </View>\r\n                                            </View>\r\n                                        </View>\r\n                                    </View>\r\n\r\n                                </View>\r\n                            ))}\r\n                            <DataTable.Pagination\r\n                                page={page}\r\n                                numberOfPages={Math.ceil(filtered.length / itemsPerPage)}\r\n                                onPageChange={(page) => setPage(page)}\r\n                                label={`${startIndex + 1}-${endIndex} of ${filtered.length}`}\r\n                                optionsPerPage={optionsPerPage}\r\n                                itemsPerPage={itemsPerPage}\r\n                                setItemsPerPage={setItemsPerPage}\r\n                                showFastPagination\r\n                                optionsLabel={'Rows per page'}\r\n                            />\r\n                        </DataTable>\r\n                        <AddCountryModal handleAddCountryModalClose={handleAddCountryModalClose} />\r\n                        <AddPortsForCountriesModal handleAddPortsForCountriesModalClose={handleAddPortsForCountriesModalClose} handleAddPortsForCountriesModalOpen={handleAddPortsForCountriesModalOpen} />\r\n                        <DeleteCountryModal handleDeleteCountryModalClose={handleDeleteCountryModalClose} />\r\n                    </View>\r\n                )}\r\n\r\n\r\n        </>\r\n\r\n    );\r\n\r\n}\r\n\r\nconst portsList = {\r\n    \"Dar es Salaam\": { country: \"Tanzania\" },\r\n    \"Durban\": { country: \"Republic of South Africa\" },\r\n    \"Maputo\": { country: \"Mozambique\" },\r\n    \"Abidjan\": { country: \"Cote D'Ivoire\" },\r\n    \"Mombasa\": { country: \"Kenya\" },\r\n    \"Lusaka\": { country: \"Zambia\" },\r\n    \"Matadi\": { country: \"D.R. Congo\" },\r\n    \"Zanzibar\": { country: \"Tanzania\" },\r\n    \"St. John's\": { country: \"Antigua and Barbuda\" },\r\n    \"Aarhus\": { country: \"Denmark\" },\r\n    \"Abadan\": { country: \"Iran\" },\r\n    \"Abu Dhabi\": { country: \"United Arab Emirates\" },\r\n    \"Acapulco\": { country: \"Mexico\" },\r\n    \"Adelaide\": { country: \"Australia\" },\r\n    \"Aden\": { country: \"Yemen\" },\r\n    \"Al Khobar\": { country: \"Saudi Arabia\" },\r\n    \"Al Ladhiqiyah\": { country: \"Syria\" },\r\n    \"Al Mukalla\": { country: \"Yemen\" },\r\n    \"Al Qusayr\": { country: \"Egypt\" },\r\n    \"Al Ruwais\": { country: \"Qatar\" },\r\n    \"Alexandria\": { country: \"Egypt\" },\r\n    \"Algiers\": { country: \"Algeria\" },\r\n    \"Antwerp\": { country: \"Belgium\" },\r\n    \"Apia\": { country: \"Samoa\" },\r\n    \"Aqaba\": { country: \"Jordan\" },\r\n    \"Arwad\": { country: \"Syria\" },\r\n    \"As Salif\": { country: \"Yemen\" },\r\n    \"Ash Shihr\": { country: \"Yemen\" },\r\n    \"Ashdod\": { country: \"Israel\" },\r\n    \"Ashgabat\": { country: \"Turkmenistan\" },\r\n    \"Ashkelon\": { country: \"Israel\" },\r\n    \"Assab\": { country: \"Eritrea\" },\r\n    \"Assumption Island\": { country: \"Seychelles\" },\r\n    \"Asunción\": { country: \"Paraguay\" },\r\n    \"Auckland\": { country: \"New Zealand\" },\r\n    \"Avarua\": { country: \"Cook Islands\" },\r\n    \"Balboa\": { country: \"Panama\" },\r\n    \"Balhaf\": { country: \"Yemen\" },\r\n    \"Banana\": { country: \"D.R.Congo\" },\r\n    \"Bandar Abbas\": { country: \"Iran\" },\r\n    \"Bandar Seri Begawan\": { country: \"Brunei Darussalam\" },\r\n    \"Bangkok\": { country: \"Thailand\" },\r\n    \"Baniyas\": { country: \"Syria\" },\r\n    \"Banjul\": { country: \"Gambia\" },\r\n    \"Bar\": { country: \"Montenegro\" },\r\n    \"Barcelona\": { country: \"Spain\" },\r\n    \"Barranquilla\": { country: \"Colombia\" },\r\n    \"Basra\": { country: \"Iraq\" },\r\n    \"Basse-Terre\": { country: \"Guadeloupe\" },\r\n    \"Batroun\": { country: \"Lebanon\" },\r\n    \"Batumi\": { country: \"Georgia\" },\r\n    \"Beira\": { country: \"Mozambique\" },\r\n    \"Beirut\": { country: \"Lebanon\" },\r\n    \"Belize City\": { country: \"Belize\" },\r\n    \"Benghazi\": { country: \"Libya\" },\r\n    \"Berbera\": { country: \"Somalia\" },\r\n    \"Berbera\": { country: \"Somaliland\" },\r\n    \"Bissau\": { country: \"Guinea-Bissau\" },\r\n    \"Bissau\": { country: \"Republic of Guinea-Bissau\" },\r\n    \"Blantyre\": { country: \"Malawi\" },\r\n    \"Bo\": { country: \"Sierra Leone\" },\r\n    \"Boma\": { country: \"D.R.Congo\" },\r\n    \"Bosaso\": { country: \"Somalia\" },\r\n    \"Brava\": { country: \"Somalia\" },\r\n    \"Brazzaville\": { country: \"Republic of the Congo\" },\r\n    \"Bridgetown\": { country: \"Barbados\" },\r\n    \"Brisbane\": { country: \"Australia\" },\r\n    \"Buchanan\": { country: \"Liberia\" },\r\n    \"Bucharest\": { country: \"Romania\" },\r\n    \"Buenos Aires\": { country: \"Argentina\" },\r\n    \"Busan\": { country: \"South Korea\" },\r\n    \"Byblos\": { country: \"Lebanon\" },\r\n    \"Cabinda\": { country: \"Angola\" },\r\n    \"Calabar\": { country: \"Nigeria\" },\r\n    \"Calais\": { country: \"France\" },\r\n    \"Callao\": { country: \"Peru\" },\r\n    \"Cap-Haitien\": { country: \"Haiti\" },\r\n    \"Cape Town\": { country: \"South Africa\" },\r\n    \"Caracas\": { country: \"Venezuela\" },\r\n    \"Cartagena\": { country: \"Colombia\" },\r\n    \"Casablanca\": { country: \"Morocco\" },\r\n    \"Cayenne\": { country: \"French Guiana\" },\r\n    \"Cebu\": { country: \"Philippines\" },\r\n    \"Chabahar\": { country: \"Iran\" },\r\n    \"Charlotte Amalie\": { country: \"US Virgin Islands\" },\r\n    \"Chekka\": { country: \"Lebanon\" },\r\n    \"Chisinau\": { country: \"Moldova\" },\r\n    \"Chittagong\": { country: \"Bangladesh\" },\r\n    \"Christchurch\": { country: \"New Zealand\" },\r\n    \"Colombo\": { country: \"Sri Lanka\" },\r\n    \"Colonia\": { country: \"Micronesia\" },\r\n    \"Comoros\": { country: \"Comoros\" },\r\n    \"Conakry\": { country: \"Guinea\" },\r\n    \"Constanta\": { country: \"Romania\" },\r\n    \"Constanța\": { country: \"Romania\" },\r\n    \"Copenhagen\": { country: \"Denmark\" },\r\n    \"Cork\": { country: \"Ireland\" },\r\n    \"Cotonou\": { country: \"Benin\" },\r\n    \"Cristóbal\": { country: \"Panama\" },\r\n    \"Dakar\": { country: \"Senegal\" },\r\n    \"Dammam\": { country: \"Saudi Arabia\" },\r\n    \"Darwin\": { country: \"Australia\" },\r\n    \"Diego Suarez (Antsiranana)\": { country: \"Madagascar\" },\r\n    \"Dili\": { country: \"East Timor\" },\r\n    \"Djibouti\": { country: \"Djibouti\" },\r\n    \"Doha\": { country: \"Qatar\" },\r\n    \"Doraleh\": { country: \"Djibouti\" },\r\n    \"Douala\": { country: \"Cameroon\" },\r\n    \"Dubai\": { country: \"UAE\" },\r\n    \"Dublin\": { country: \"Ireland\" },\r\n    \"Duqm\": { country: \"Oman\" },\r\n    \"Durrës\": { country: \"Albania\" },\r\n    \"Dzaoudzi\": { country: \"Mayotte\" },\r\n    \"Ehoala\": { country: \"Madagascar\" },\r\n    \"Eil\": { country: \"Somalia\" },\r\n    \"Eilat\": { country: \"Israel\" },\r\n    \"El Arish\": { country: \"Egypt\" },\r\n    \"El Ma'an\": { country: \"Somalia\" },\r\n    \"El Tor\": { country: \"Egypt\" },\r\n    \"Famagusta\": { country: \"Cyprus\" },\r\n    \"Freeport\": { country: \"Bahamas\" },\r\n    \"Freetown\": { country: \"Sierra Leone\" },\r\n    \"Fremantle\": { country: \"Australia\" },\r\n    \"Funafuti\": { country: \"Tuvalu\" },\r\n    \"Garoua\": { country: \"Cameroon\" },\r\n    \"Gdansk\": { country: \"Poland\" },\r\n    \"Gdańsk\": { country: \"Poland\" },\r\n    \"Gdynia\": { country: \"Poland\" },\r\n    \"Genoa\": { country: \"Italy\" },\r\n    \"George Town\": { country: \"Cayman Islands\" },\r\n    \"Georgetown\": { country: \"Guyana\" },\r\n    \"Gizo\": { country: \"Solomon Islands\" },\r\n    \"Gothenburg\": { country: \"Sweden\" },\r\n    \"Grand Turk\": { country: \"Turks and Caicos Islands\" },\r\n    \"Greenville\": { country: \"Liberia\" },\r\n    \"Guangzhou\": { country: \"Peoples Republic of China\" },\r\n    \"Guayaquil\": { country: \"Ecuador\" },\r\n    \"Gwadar\": { country: \"Pakistan\" },\r\n    \"Gydnia\": { country: \"Poland\" },\r\n    \"Hadera\": { country: \"Israel\" },\r\n    \"Haifa\": { country: \"Israel\" },\r\n    \"Hamburg\": { country: \"Germany\" },\r\n    \"Hamilton\": { country: \"Bermuda\" },\r\n    \"Hargeisa\": { country: \"Somaliland\" },\r\n    \"Harper\": { country: \"Liberia\" },\r\n    \"Havana\": { country: \"Cuba\" },\r\n    \"Helsinki\": { country: \"Finland\" },\r\n    \"Ho Chi Minh City\": { country: \"Vietnam\" },\r\n    \"Hobyo\": { country: \"Somalia\" },\r\n    \"Hodeida\": { country: \"Yemen\" },\r\n    \"Hodeidah\": { country: \"Yemen\" },\r\n    \"Hong Kong\": { country: \"Hong Kong\" },\r\n    \"Honiara\": { country: \"Solomon Islands\" },\r\n    \"Incheon\": { country: \"South Korea\" },\r\n    \"Inchon\": { country: \"South Korea\" },\r\n    \"Istanbul\": { country: \"Turkey\" },\r\n    \"Jaffna\": { country: \"Sri Lanka\" },\r\n    \"Jakarta\": { country: \"Indonesia\" },\r\n    \"Jamestown\": { country: \"Saint Helena\" },\r\n    \"Jeddah Islamic Port\": { country: \"Saudi Arabia\" },\r\n    \"Jeddah\": { country: \"Saudi Arabia\" },\r\n    \"Jizan\": { country: \"Saudi Arabia\" },\r\n    \"Jounieh\": { country: \"Lebanon\" },\r\n    \"Jubail\": { country: \"Saudi Arabia\" },\r\n    \"Jurong\": { country: \"Singapore\" },\r\n    \"Kandla\": { country: \"India\" },\r\n    \"Kaohsiung\": { country: \"Taiwan\" },\r\n    \"Karachi\": { country: \"Pakistan\" },\r\n    \"Kathmandu\": { country: \"Nepal\" },\r\n    \"Khartoum\": { country: \"Sudan\" },\r\n    \"Khasab\": { country: \"Oman\" },\r\n    \"King Abdul Aziz Port\": { country: \"Saudi Arabia\" },\r\n    \"King Fahd Industrial Port\": { country: \"Saudi Arabia\" },\r\n    \"Kingston\": { country: \"Jamaica\" },\r\n    \"Kinshasa\": { country: \"D.R.Congo\" },\r\n    \"Kismayo\": { country: \"Somalia\" },\r\n    \"Klaipeda\": { country: \"Lithuania\" },\r\n    \"Kobe\": { country: \"Japan\" },\r\n    \"Kolkata\": { country: \"India\" },\r\n    \"Koror\": { country: \"Palau\" },\r\n    \"Kralendijk\": { country: \"Bonaire/Netherlands Antilles\" },\r\n    \"Kribi\": { country: \"Cameroon\" },\r\n    \"Kuching Port\": { country: \"Malaysia\" },\r\n    \"Kuwait City\": { country: \"Kuwait\" },\r\n    \"Kyrenia\": { country: \"Cyprus\" },\r\n    \"La Ceiba\": { country: \"Honduras\" },\r\n    \"La Digue\": { country: \"Seychelles\" },\r\n    \"La Guaira\": { country: \"Venezuela\" },\r\n    \"La Libertad\": { country: \"El Salvador\" },\r\n    \"Lae\": { country: \"Papua New Guinea\" },\r\n    \"Lagos\": { country: \"Nigeria\" },\r\n    \"Larnaca\": { country: \"Cyprus\" },\r\n    \"Las Palmas\": { country: \"Canary Islands\" },\r\n    \"Latakia\": { country: \"Syria\" },\r\n    \"Le Havre\": { country: \"France\" },\r\n    \"Le Port\": { country: \"Reunion\" },\r\n    \"Libreville\": { country: \"Gabon\" },\r\n    \"Limassol\": { country: \"Cyprus\" },\r\n    \"Limbe\": { country: \"Cameroon\" },\r\n    \"Limón\": { country: \"Costa Rica\" },\r\n    \"Lisbon\": { country: \"Portugal\" },\r\n    \"Lobito\": { country: \"Angola\" },\r\n    \"Lomé\": { country: \"Togo\" },\r\n    \"London\": { country: \"United Kingdom\" },\r\n    \"Luanda\": { country: \"Angola\" },\r\n    \"Luganville\": { country: \"Vanuatu\" },\r\n    \"Lüderitz\": { country: \"Namibia\" },\r\n    \"Mahé\": { country: \"Seychelles\" },\r\n    \"Majunga (Mahajanga)\": { country: \"Madagascar\" },\r\n    \"Majuro\": { country: \"Marshall Islands\" },\r\n    \"Malabo\": { country: \"Equatorial Guinea\" },\r\n    \"Male\": { country: \"Maldives\" },\r\n    \"Malé\": { country: \"Maldives\" },\r\n    \"Manama\": { country: \"Bahrain\" },\r\n    \"Manila\": { country: \"Philippines\" },\r\n    \"Manta\": { country: \"Ecuador\" },\r\n    \"Manzanillo\": { country: \"Mexico\" },\r\n    \"Marsa Matruh\": { country: \"Egypt\" },\r\n    \"MARSAXLOKK\": { country: \"Malta\" },\r\n    \"Marsaxlokk\": { country: \"Malta\" },\r\n    \"Marseille\": { country: \"France\" },\r\n    \"Massawa\": { country: \"Eritrea\" },\r\n    \"Mata-Utu\": { country: \"Wallis and Futuna\" },\r\n    \"Matadi\": { country: \"D.R.Congo\" },\r\n    \"Matarani\": { country: \"Peru\" },\r\n    \"Mayumba\": { country: \"Gabon\" },\r\n    \"Melbourne\": { country: \"Australia\" },\r\n    \"Merca\": { country: \"Somalia\" },\r\n    \"Mindelo\": { country: \"Cape Verde\" },\r\n    \"Miri Port\": { country: \"Malaysia\" },\r\n    \"Mocha\": { country: \"Yemen\" },\r\n    \"Mogadishu\": { country: \"Somalia\" },\r\n    \"Monaco\": { country: \"Monaco\" },\r\n    \"Monrovia\": { country: \"Liberia\" },\r\n    \"Montego Bay\": { country: \"Jamaica\" },\r\n    \"Montevideo\": { country: \"Uruguay\" },\r\n    \"Moroni\": { country: \"Comoros\" },\r\n    \"Muara\": { country: \"Brunei Darussalam\" },\r\n    \"Mukalla\": { country: \"Yemen\" },\r\n    \"Mumbai\": { country: \"India\" },\r\n    \"Muscat\": { country: \"Oman\" },\r\n    \"Nacala\": { country: \"Mozambique\" },\r\n    \"Naha\": { country: \"Japan\" },\r\n    \"Namibe\": { country: \"Angola\" },\r\n    \"Naples\": { country: \"Italy\" },\r\n    \"Nassau\": { country: \"Bahamas\" },\r\n    \"Neiafu\": { country: \"Tonga\" },\r\n    \"New Westminster\": { country: \"Canada\" },\r\n    \"New York\": { country: \"USA\" },\r\n    \"Newcastle\": { country: \"Australia\" },\r\n    \"Nieuw Nickerie\": { country: \"Suriname\" },\r\n    \"Nishtun\": { country: \"Yemen\" },\r\n    \"Nouadhibou\": { country: \"Mauritania\" },\r\n    \"Nouakchott\": { country: \"Mauritania\" },\r\n    \"Noumea\": { country: \"New Caledonia\" },\r\n    \"Novorossiysk\": { country: \"Russian Federation\" },\r\n    \"Nuku'alofa\": { country: \"Tonga\" },\r\n    \"Obock\": { country: \"Djibouti\" },\r\n    \"Odessa\": { country: \"Ukraine\" },\r\n    \"Omboue\": { country: \"Gabon\" },\r\n    \"Onne\": { country: \"Nigeria\" },\r\n    \"Oran\": { country: \"Algeria\" },\r\n    \"Oranjestad\": { country: \"Aruba\" },\r\n    \"Osaka\": { country: \"Japan\" },\r\n    \"Padang\": { country: \"Indonesia\" },\r\n    \"Palermo\": { country: \"Italy\" },\r\n    \"Papeete\": { country: \"French Polynesia\" },\r\n    \"Paramaribo\": { country: \"Suriname\" },\r\n    \"Pattaya\": { country: \"Thailand\" },\r\n    \"Pemba\": { country: \"Mozambique\" },\r\n    \"Penang Port\": { country: \"Malaysia\" },\r\n    \"Philipsburg\": { country: \"Netherlands Antilles\" },\r\n    \"Piraeus\": { country: \"Greece\" },\r\n    \"Plymouth\": { country: \"Montserrat\" },\r\n    \"Pohnpei\": { country: \"Micronesia\" },\r\n    \"Pointe Noire\": { country: \"Republic of the Congo\" },\r\n    \"Pointe-Noire\": { country: \"Republic of the Congo\" },\r\n    \"Pointe-à-Pitre\": { country: \"Guadeloupe\" },\r\n    \"Ponce\": { country: \"Puerto Rico\" },\r\n    \"Port Castries\": { country: \"St. Lucia\" },\r\n    \"Port Elizabeth\": { country: \"South Africa\" },\r\n    \"Port Gentil\": { country: \"Gabon\" },\r\n    \"Port Harcourt\": { country: \"Nigeria\" },\r\n    \"Port Kelang\": { country: \"Malaysia\" },\r\n    \"Port Kembla\": { country: \"Australia\" },\r\n    \"Port Louis\": { country: \"Mauritius\" },\r\n    \"Port Moresby\": { country: \"Papua New Guinea\" },\r\n    \"Port of Spain\": { country: \"Trinidad and Tobago\" },\r\n    \"Port Rashid\": { country: \"United Arab Emirates\" },\r\n    \"Port Réunion\": { country: \"Reunion\" },\r\n    \"Port Sudan\": { country: \"Sudan\" },\r\n    \"Port Sultan Qaboos\": { country: \"Oman\" },\r\n    \"Port Victoria\": { country: \"Seychelles\" },\r\n    \"Port Vila\": { country: \"Vanuatu\" },\r\n    \"Port Villa\": { country: \"Vanuatu\" },\r\n    \"Port-au-Prince\": { country: \"Haiti\" },\r\n    \"Port-Louis\": { country: \"Mauritius\" },\r\n    \"Port-Vila\": { country: \"Vanuatu\" },\r\n    \"Porto Grande (Mindelo)\": { country: \"Cape Verde\" },\r\n    \"Porto-Novo\": { country: \"Benin\" },\r\n    \"Porto\": { country: \"Portugal\" },\r\n    \"Poti\": { country: \"Georgia\" },\r\n    \"Praslin\": { country: \"Seychelles\" },\r\n    \"Principe\": { country: \"Sao Tome and Principe\" },\r\n    \"Providenciales\": { country: \"Turks And Caicos Islands\" },\r\n    \"Puerto Barrios\": { country: \"Guatemala\" },\r\n    \"Puerto Cabello\": { country: \"Venezuela\" },\r\n    \"Puerto Limon\": { country: \"Republic of Costa Rica\" },\r\n    \"Puerto Madryn\": { country: \"Argentina\" },\r\n    \"Puerto Plata\": { country: \"Dominican Republic\" },\r\n    \"Puerto Sucre\": { country: \"Venezuela\" },\r\n    \"Punta del Este\": { country: \"Uruguay\" },\r\n    \"Puntarenas\": { country: \"Costa Rica\" },\r\n    \"Quelimane\": { country: \"Mozambique\" },\r\n    \"Quetzal\": { country: \"Guatemala\" },\r\n    \"Rabaul\": { country: \"Papua New Guinea\" },\r\n    \"Rabigh\": { country: \"Saudi Arabia\" },\r\n    \"Ras Al Ghar\": { country: \"Saudi Arabia\" },\r\n    \"Ras al Khafji\": { country: \"Saudi Arabia\" },\r\n    \"Ras al-Arah\": { country: \"Yemen\" },\r\n    \"Ras Gharib\": { country: \"Egypt\" },\r\n    \"Ras Isa Marine Terminal\": { country: \"Yemen\" },\r\n    \"Ras Isa\": { country: \"Yemen\" },\r\n    \"Ras Shukheir\": { country: \"Egypt\" },\r\n    \"Ras Tanura\": { country: \"Saudi Arabia\" },\r\n    \"Reykjavik\": { country: \"Iceland\" },\r\n    \"Riga\": { country: \"Latvia\" },\r\n    \"Rijeka\": { country: \"Croatia\" },\r\n    \"Rio de Janeiro\": { country: \"Brazil\" },\r\n    \"Road Town\": { country: \"British Virgin Islands\" },\r\n    \"Robertsport\": { country: \"Liberia\" },\r\n    \"Roseau\": { country: \"Commonwealth Of Dominica\" },\r\n    \"Rotterdam\": { country: \"Netherlands\" },\r\n    \"Saida\": { country: \"Lebanon\" },\r\n    \"Saint George's\": { country: \"Grenada\" },\r\n    \"Saint John's\": { country: \"Antigua and Barbuda\" },\r\n    \"Saint John\": { country: \"Barbados\" },\r\n    \"Saint Louis\": { country: \"Senegal\" },\r\n    \"Saint Petersburg\": { country: \"Russian Federation\" },\r\n    \"Saint Pierre\": { country: \"Saint Pierre and Miquelon\" },\r\n    \"Saint-Denis\": { country: \"Reunion\" },\r\n    \"Saipan\": { country: \"Northern Mariana Islands\" },\r\n    \"Salalah\": { country: \"Oman\" },\r\n    \"Saleef\": { country: \"Yemen\" },\r\n    \"San Antonio\": { country: \"Chile\" },\r\n    \"San Jose\": { country: \"Antigua\" },\r\n    \"San Juan\": { country: \"Puerto Rico\" },\r\n    \"San Pedro\": { country: \"Cote D'Ivoire\" },\r\n    \"Sana'a\": { country: \"Yemen\" },\r\n    \"Santo Domingo\": { country: \"Dominican Republic\" },\r\n    \"Santo\": { country: \"Vanuatu\" },\r\n    \"Santos\": { country: \"Brazil\" },\r\n    \"Sao Tome\": { country: \"Sao Tome and Principe\" },\r\n    \"Scarborough\": { country: \"Trinidad and Tobago\" },\r\n    \"Sevastopol\": { country: \"Ukraine\" },\r\n    \"Sfax\": { country: \"Tunisia\" },\r\n    \"Shanghai\": { country: \"Peoples Republic of China\" },\r\n    \"Sharjah\": { country: \"United Arab Emirates\" },\r\n    \"Shenzhen\": { country: \"Peoples Republic of China\" },\r\n    \"Sibu Port\": { country: \"Malaysia\" },\r\n    \"Sidon\": { country: \"Lebanon\" },\r\n    \"Sihanoukville\": { country: \"Cambodia\" },\r\n    \"Singapore\": { country: \"Singapore\" },\r\n    \"Sinop\": { country: \"Turkey\" },\r\n    \"Sittwe\": { country: \"Myanmar\" },\r\n    \"Sochi\": { country: \"Russian Federation\" },\r\n    \"Socotra\": { country: \"Yemen\" },\r\n    \"Sohar\": { country: \"Oman\" },\r\n    \"Sokodé\": { country: \"Togo\" },\r\n    \"Southampton\": { country: \"United Kingdom\" },\r\n    \"Soyo\": { country: \"Angola\" },\r\n    \"Split\": { country: \"Croatia\" },\r\n    \"St. Croix\": { country: \"US Virgin Islands\" },\r\n    \"St. George\": { country: \"Grenada\" },\r\n    \"Stockholm\": { country: \"Sweden\" },\r\n    \"Suakin\": { country: \"Sudan\" },\r\n    \"Sur\": { country: \"Lebanon\" },\r\n    \"Surabaya\": { country: \"Indonesia\" },\r\n    \"Suva\": { country: \"Fiji\" },\r\n    \"Sydney\": { country: \"Australia\" },\r\n    \"Szczecin\": { country: \"Poland\" },\r\n    \"São Tomé\": { country: \"Sao Tome and Principe\" },\r\n    \"Tadjoura\": { country: \"Djibouti\" },\r\n    \"Tainan\": { country: \"Taiwan\" },\r\n    \"Tallinn\": { country: \"Estonia\" },\r\n    \"Tamatave (Toamasina)\": { country: \"Madagascar\" },\r\n    \"Tanajib\": { country: \"Saudi Arabia\" },\r\n    \"Tanjung Pelepas\": { country: \"Malaysia\" },\r\n    \"Tarawa\": { country: \"Kiribati\" },\r\n    \"Tartus\": { country: \"Syria\" },\r\n    \"Tauranga\": { country: \"New Zealand\" },\r\n    \"Tekirdag\": { country: \"Turkey\" },\r\n    \"Tema\": { country: \"Ghana\" },\r\n    \"Tianjin\": { country: \"Peoples Republic of China\" },\r\n    \"Tin Can Island\": { country: \"Nigeria\" },\r\n    \"Toamasina\": { country: \"Madagascar\" },\r\n    \"Toliara\": { country: \"Madagascar\" },\r\n    \"Tonga\": { country: \"Tonga\" },\r\n    \"Toripoli\": { country: \"Libya\" },\r\n    \"Trabzon\": { country: \"Turkey\" },\r\n    \"Trieste\": { country: \"Italy\" },\r\n    \"Trincomalee\": { country: \"Sri Lanka\" },\r\n    \"Tripoli\": { country: \"Lebanon\" },\r\n    \"Tunis\": { country: \"Tunisia\" },\r\n    \"Turkmenbashi\": { country: \"Turkmenistan\" },\r\n    \"Tyre\": { country: \"Lebanon\" },\r\n    \"Tórshavn\": { country: \"Faroe Islands\" },\r\n    \"ULAANBAATAR\": { country: \"Mongolia\" },\r\n    \"Ulcinj\": { country: \"Montenegro\" },\r\n    \"Umm Qasr\": { country: \"Iraq\" },\r\n    \"Ushuaia\": { country: \"Argentina\" },\r\n    \"Valletta\": { country: \"Malta\" },\r\n    \"Valparaíso\": { country: \"Chile\" },\r\n    \"Vancouver\": { country: \"Canada\" },\r\n    \"Varna\": { country: \"Bulgaria\" },\r\n    \"Veracruz\": { country: \"Mexico\" },\r\n    \"Victoria\": { country: \"Mahe (Seychelles)\" },\r\n    \"Visakhapatnam\": { country: \"India\" },\r\n    \"Vladivostok\": { country: \"Russian Federation\" },\r\n    \"Walvis Bay\": { country: \"Namibia\" },\r\n    \"Warri\": { country: \"Nigeria\" },\r\n    \"Wellington\": { country: \"New Zealand\" },\r\n    \"Willemstad\": { country: \"Curacao\" },\r\n    \"Yanbu\": { country: \"Saudi Arabia\" },\r\n    \"Yangon\": { country: \"Myanmar\" },\r\n    \"Yap\": { country: \"Micronesia\" },\r\n    \"Yaren\": { country: \"Nauru\" },\r\n    \"Yokohama\": { country: \"Japan\" },\r\n    \"Zeebrugge\": { country: \"Belgium\" },\r\n    \"Ziguinchor\": { country: \"Senegal\" },\r\n    \"Zonguldak\": { country: \"Turkey\" },\r\n}\r\n\r\n\r\nconst AddPortModal = ({ handleAddPortModalClose }) => {\r\n\r\n    const addPortModalVisible = useSelector((state) => state.addPortModalVisible);\r\n    const inputPortText = useRef(null);\r\n    const inputCountryText = useRef(null);\r\n    const dispatch = useDispatch();\r\n    const toast = useToast();\r\n    const [addButtonLoading, setAddButtonLoading] = useState(false);\r\n\r\n    const handleAddButton = async () => {\r\n        setAddButtonLoading(true);\r\n        if (inputPortText.current?.value !== '' && inputCountryText.current?.value !== '') {\r\n            const countryCode = inputCountryText.current?.value;\r\n            const portCode = inputPortText.current?.value;\r\n            const formattedPortCode = portCode.replace(/\\./g, '_');\r\n            const response = await axios.get('http://worldtimeapi.org/api/timezone/Asia/Tokyo');\r\n            const { datetime } = response.data;\r\n            const formattedTime = moment(datetime).format('YYYY/MM/DD [at] HH:mm:ss');\r\n            const year = moment(datetime).format('YYYY');\r\n            const month = moment(datetime).format('MM');\r\n            const monthWithDay = moment(datetime).format('MM/DD');\r\n            const date = moment(datetime).format('YYYY/MM/DD');\r\n            const day = moment(datetime).format('DD');\r\n            const time = moment(datetime).format('HH:mm');\r\n            try {\r\n                await addPort(formattedPortCode, inputCountryText.current?.value, 9999);\r\n                const logData = {\r\n                    message: `Port Added: \"${nameVariable.text}\" added port \"${portCode}\" for Freight.`,\r\n                    timestamp: formattedTime,\r\n                    colorScheme: true,\r\n                    keywords: [\r\n                        formattedTime.toLowerCase(),\r\n                        `Port Added: \"${nameVariable.text}\" added port \"${portCode}\" for Freight.`.toLowerCase(),\r\n                        'Port'.toLowerCase(),\r\n                        'Port Added'.toLowerCase(),\r\n                        'Added'.toLowerCase(),\r\n                        'Freight'.toLowerCase(),\r\n                        portCode.toLowerCase(),\r\n                        nameVariable.text.toLowerCase(),\r\n                        year.toLowerCase(),\r\n                        month.toLowerCase(),\r\n                        monthWithDay.toLowerCase(),\r\n                        date.toLowerCase(),\r\n                        day.toLowerCase(),\r\n                        time.toLowerCase(),\r\n                    ],\r\n                };\r\n\r\n                addLogToCollection(logData);\r\n                toast.show({\r\n                    render: () => {\r\n                        return <View style={{ backgroundColor: '#16A34A', padding: 5, borderRadius: 5 }}>\r\n                            <Text style={{ color: 'white' }}>Port added successfully!</Text>\r\n                        </View>;\r\n                    }\r\n\r\n                })\r\n                dispatch(setAddPortModalVisible(false));\r\n                setAddButtonLoading(false);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        }\r\n        else {\r\n            setAddButtonLoading(false);\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const filterInput = (inputRef) => {\r\n        const currentValue = inputRef.current.value;\r\n        const filteredValue = currentValue.replace(/[^a-zA-Z0-9. ]/g, '');\r\n        if (currentValue !== filteredValue) {\r\n            inputRef.current.setNativeProps({ text: filteredValue });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={addPortModalVisible}\r\n            onClose={() => {\r\n                handleAddPortModalClose();\r\n                inputPortText.current.value = '';\r\n            }}\r\n            size={'md'}>\r\n            <Modal.Content>\r\n                <Modal.CloseButton />\r\n                <Modal.Header style={{ backgroundColor: '#7B9CFF', }}><Text color={'white'} fontSize={20} bold>Add Port</Text></Modal.Header>\r\n                <Modal.Body >\r\n                    <View style={{ marginVertical: 5, }}>\r\n                        <View style={{ backgroundColor: '#7B9CFF', flex: 1, }}>\r\n                            <Text bold color={'white'} marginLeft={1}>Port</Text>\r\n                        </View>\r\n                        <TextInput\r\n                            ref={inputPortText}\r\n                            onChangeText={() => filterInput(inputPortText)}\r\n                            style={{\r\n                                outlineStyle: 'none',\r\n                                flex: 1,\r\n                                padding: 5,\r\n                                backgroundColor: 'white',\r\n                                borderBottomLeftRadius: 5,\r\n                                borderBottomRightRadius: 5,\r\n                                placeholderTextColor: '#ACADA3',\r\n                                borderColor: '#D4D4D4',\r\n                                borderWidth: 1,\r\n                            }}\r\n                            placeholder='Input Port' />\r\n\r\n                        <View style={{ backgroundColor: '#7B9CFF', flex: 1, marginTop: 10, }}>\r\n                            <Text bold color={'white'} marginLeft={1}>Country</Text>\r\n                        </View>\r\n                        <TextInput\r\n                            ref={inputCountryText}\r\n                            onChangeText={() => filterInput(inputCountryText)}\r\n                            style={{\r\n                                outlineStyle: 'none',\r\n                                flex: 1,\r\n                                padding: 5,\r\n                                backgroundColor: 'white',\r\n                                borderBottomLeftRadius: 5,\r\n                                borderBottomRightRadius: 5,\r\n                                placeholderTextColor: '#ACADA3',\r\n                                borderColor: '#D4D4D4',\r\n                                borderWidth: 1,\r\n                            }}\r\n                            placeholder='Input Country' />\r\n\r\n                    </View>\r\n\r\n\r\n                </Modal.Body>\r\n                <Modal.Footer >\r\n                    <Button.Group variant=\"solid\" space=\"2\">\r\n                        <Button colorScheme={'gray'} onPress={() => {\r\n                            handleAddPortModalClose();\r\n                            inputPortText.current.value = '';\r\n                        }}>Cancel</Button>\r\n                        {addButtonLoading ?\r\n                            (<Spinner size=\"lg\" color={'#16A34A'} />) :\r\n                            (<Button colorScheme={'success'} onPress={handleAddButton}>Add</Button>)\r\n                        }\r\n\r\n                    </Button.Group>\r\n                </Modal.Footer>\r\n            </Modal.Content>\r\n        </Modal>\r\n\r\n    );\r\n\r\n}\r\n\r\nconst DeletePortModal = ({ handleDeletePortModalClose }) => {\r\n    const deletePortModalVisible = useSelector((state) => state.deletePortModalVisible);\r\n    const [buttonLoading, setButtonLoading] = useState(false);\r\n\r\n    const handleDeletePort = async () => {\r\n        setButtonLoading(true);\r\n        const documentRef = doc(projectExtensionFirestore, 'CustomerCountryPort', 'PortsDoc');\r\n        const formattedFieldCode = selectedPort.replace(/\\./g, '_');\r\n\r\n        const response = await axios.get('http://worldtimeapi.org/api/timezone/Asia/Tokyo');\r\n        const { datetime } = response.data;\r\n        const formattedTime = moment(datetime).format('YYYY/MM/DD [at] HH:mm:ss');\r\n        const year = moment(datetime).format('YYYY');\r\n        const month = moment(datetime).format('MM');\r\n        const monthWithDay = moment(datetime).format('MM/DD');\r\n        const date = moment(datetime).format('YYYY/MM/DD');\r\n        const day = moment(datetime).format('DD');\r\n        const time = moment(datetime).format('HH:mm');\r\n        updateDoc(documentRef, {\r\n            [formattedFieldCode]: deleteField()\r\n        })\r\n            .then(() => {\r\n                console.log('Field deleted successfully');\r\n                handleDeletePortModalClose();\r\n                setButtonLoading(false);\r\n                const logData = {\r\n                    message: `Port Deleted: \"${nameVariable.text}\" deleted port \"${selectedPort}\" for Freight.`,\r\n                    timestamp: formattedTime,\r\n                    colorScheme: false,\r\n                    keywords: [\r\n                        formattedTime.toLowerCase(),\r\n                        `Port Deleted: \"${nameVariable.text}\" deleted port \"${selectedPort}\" for Freight.`.toLowerCase(),\r\n                        'Port'.toLowerCase(),\r\n                        'Port Deleted'.toLowerCase(),\r\n                        'Deleted'.toLowerCase(),\r\n                        'Freight'.toLowerCase(),\r\n                        selectedPort.toLowerCase(),\r\n                        nameVariable.text.toLowerCase(),\r\n                        year.toLowerCase(),\r\n                        month.toLowerCase(),\r\n                        monthWithDay.toLowerCase(),\r\n                        date.toLowerCase(),\r\n                        day.toLowerCase(),\r\n                        time.toLowerCase(),\r\n                    ],\r\n                };\r\n\r\n                addLogToCollection(logData);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error deleting field: ', error);\r\n            });\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <Modal isOpen={deletePortModalVisible} onClose={handleDeletePortModalClose}>\r\n            <Modal.Content>\r\n                <Modal.CloseButton />\r\n                <Modal.Header>Delete Port?</Modal.Header>\r\n                <Modal.Body>\r\n                    Are you sure you want to delete the selected port?\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <View style={{ flex: 1, flexDirection: 'row' }}>\r\n                        <TouchableOpacity\r\n                            style={{ flex: 1, backgroundColor: '#525252', padding: 5, borderRadius: 5, margin: 5, }}\r\n                            onPress={handleDeletePortModalClose}\r\n                        >\r\n                            <Text style={{ color: 'white', alignSelf: 'center', }}>No</Text>\r\n                        </TouchableOpacity>\r\n                        {buttonLoading ?\r\n                            (<TouchableOpacity\r\n                                style={{ flex: 1, backgroundColor: '#DC2626', padding: 5, borderRadius: 5, margin: 5, }}\r\n                            ><Spinner size={18} color={'white'} />\r\n                            </TouchableOpacity>) :\r\n                            (<TouchableOpacity\r\n                                style={{ flex: 1, backgroundColor: '#DC2626', padding: 5, borderRadius: 5, margin: 5, }}\r\n                                onPress={handleDeletePort}\r\n                            >\r\n                                <Text style={{ color: 'white', alignSelf: 'center', }}>Yes</Text>\r\n                            </TouchableOpacity>)\r\n                        }\r\n\r\n\r\n                    </View>\r\n                </Modal.Footer>\r\n            </Modal.Content>\r\n        </Modal>\r\n\r\n\r\n    );\r\n}\r\n\r\n\r\n\r\nconst PortsTable = () => {\r\n    const dispatch = useDispatch();\r\n    const methodData = useSelector((state) => state.methodData);\r\n    const toast = useToast();\r\n    const [data, setData] = useState([]);\r\n    const [page, setPage] = useState(0);\r\n    const optionsPerPage = [10, 20, 50];\r\n    const [itemsPerPage, setItemsPerPage] = useState(optionsPerPage[0]);\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n    const inputSearchRef = useRef(null);\r\n    const textAreaAddMethod = useRef(null);\r\n\r\n    const inputSortOrder = useRef([]);\r\n    const inputProfitPrice = useRef([]);\r\n    const inputNagoyaPrice = useRef([]);\r\n    const inputYokohamaPrice = useRef([]);\r\n    const inputKyushuPrice = useRef([]);\r\n    const inputKobePrice = useRef([]);\r\n    const inputMemo = useRef([]);\r\n\r\n    const [inputMemoValues, setInputMemoValues] = useState({});\r\n\r\n    const screenWidth = Dimensions.get('window').width;\r\n\r\n    const handleSortOrderTextChange = (text, item) => {\r\n        // Remove any non-numeric characters from the input text and limit to 3 digits\r\n        const numericValue = text.replace(/[^0-9]/g, '').slice(0, 3);\r\n\r\n        inputSortOrder.current[item.ports].value = numericValue;\r\n\r\n    };\r\n\r\n    const handleProfitPriceTextChange = (text, item) => {\r\n        // Remove any non-numeric characters from the input text and limit to 3 digits\r\n        const numericValue = text.replace(/[^0-9]/g, '').slice(0, 4);\r\n\r\n        inputProfitPrice.current[item.ports].value = numericValue;\r\n\r\n    };\r\n\r\n\r\n    const updatePortsField = async (portCode, newValue, inputRef, title, fieldName) => {\r\n        // Specify the document reference\r\n        const response = await axios.get('http://worldtimeapi.org/api/timezone/Asia/Tokyo');\r\n        const { datetime } = response.data;\r\n        const formattedTime = moment(datetime).format('YYYY/MM/DD [at] HH:mm:ss');\r\n        const year = moment(datetime).format('YYYY');\r\n        const month = moment(datetime).format('MM');\r\n        const monthWithDay = moment(datetime).format('MM/DD');\r\n        const date = moment(datetime).format('YYYY/MM/DD');\r\n        const day = moment(datetime).format('DD');\r\n        const time = moment(datetime).format('HH:mm');\r\n\r\n        const documentRef = doc(projectExtensionFirestore, 'CustomerCountryPort', 'PortsDoc');\r\n        dispatch(setLoadingModalVisible(true));\r\n        if (newValue !== '') {\r\n            // Replace dots with underscores in the countryCode if the keys in Firestore use underscores\r\n            // If your keys can contain dots and are used as such in Firestore, do not replace with underscores.\r\n            const formattedCountryCode = portCode.replace(/\\./g, '_'); // Replace dots with underscores or any other valid character\r\n\r\n            // Specify the field using dot notation for the nested field\r\n            const field = `${formattedCountryCode}.${fieldName}`;\r\n\r\n            try {\r\n                // Perform the update\r\n                await updateDoc(documentRef, {\r\n                    [field]: newValue\r\n                });\r\n\r\n                const logData = {\r\n                    message: `${title} Updated: \"${nameVariable.text}\" updated \"${portCode}\" ${title} to \"${newValue}\".`,\r\n                    timestamp: formattedTime,\r\n                    colorScheme: true,\r\n                    keywords: [\r\n                        formattedTime.toLowerCase(),\r\n                        `${title} Updated: \"${nameVariable.text}\" updated \"${portCode}\" ${title} to \"${newValue}\"`.toLowerCase(),\r\n                        `Sort`.toLowerCase(),\r\n                        `${title}`.toLowerCase(),\r\n                        `${title} Updated`.toLowerCase(),\r\n                        `Updated`.toLowerCase(),\r\n                        portCode.toLowerCase(),\r\n                        nameVariable.text.toLowerCase(),\r\n                        year.toLowerCase(),\r\n                        month.toLowerCase(),\r\n                        monthWithDay.toLowerCase(),\r\n                        date.toLowerCase(),\r\n                        day.toLowerCase(),\r\n                        time.toLowerCase(),\r\n                    ],\r\n                };\r\n                toast.show({\r\n                    render: () => {\r\n                        return <View style={{ backgroundColor: '#16A34A', padding: 5, borderRadius: 5 }}>\r\n                            <Text style={{ color: 'white' }}>{title} updated successfully!</Text>\r\n                        </View>;\r\n                    }\r\n                })\r\n                addLogToCollection(logData);\r\n                dispatch(setLoadingModalVisible(false));\r\n                console.log(`${title} updated successfully`);\r\n            } catch (error) {\r\n                console.error(`Error updating ${title}:`, error);\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setLoadingModalVisible(false));\r\n\r\n        }\r\n\r\n    };\r\n\r\n    useEffect(() => {\r\n        setPage(0);\r\n    }, [itemsPerPage]);\r\n\r\n    const filtered = useMemo(() => {\r\n        return data.filter((item) =>\r\n            item.country.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n            item.ports.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n            item.sortOrder.toString().includes(searchQuery)\r\n        );\r\n    }, [searchQuery, data]);\r\n\r\n    const paginatedData = useMemo(() => {\r\n        const startIndex = page * itemsPerPage;\r\n        const endIndex = startIndex + itemsPerPage;\r\n        return filtered.slice(startIndex, endIndex);\r\n    }, [page, itemsPerPage, searchQuery, data, filtered]);\r\n\r\n\r\n    const handleSearch = debounce(() => {\r\n        setSearchQuery(inputSearchRef.current?.value);\r\n    }, 50);\r\n\r\n    const startIndex = page * itemsPerPage;\r\n    const endIndex = Math.min(startIndex + itemsPerPage, data.length);\r\n\r\n    // useEffect(() => {\r\n    //     const portsDataWithSortOrder = Object.entries(portsList).reduce((acc, [portName, portDetails], index) => {\r\n    //         // Replace dots in portName with underscores\r\n    //         const sanitizedPortName = portName.replace(/\\./g, '_');\r\n    //         acc[sanitizedPortName] = { ...portDetails, sortOrder: index };\r\n    //         return acc;\r\n    //     }, {});\r\n\r\n    //     setDoc(doc(projectExtensionFirestore, \"CustomerCountryPort\", \"PortsDoc\"), portsDataWithSortOrder)\r\n    //         .then(() => {\r\n    //             console.log(\"Document successfully written!\");\r\n    //             dispatch(setLoadingModalVisible(false));\r\n    //         })\r\n    //         .catch((error) => {\r\n    //             console.error(\"Error writing document: \", error);\r\n    //         });\r\n    // }, []);\r\n\r\n    useEffect(() => {\r\n        const docRef = doc(projectExtensionFirestore, 'CustomerCountryPort', 'PortsDoc');\r\n        dispatch(setLoadingModalVisible(true));\r\n\r\n        // This will start the listener\r\n        const unsubscribe = onSnapshot(docRef, (docSnap) => {\r\n            if (docSnap.exists()) {\r\n                const data = docSnap.data();\r\n                const formattedData = Object.keys(data)\r\n                    .map(key => ({\r\n                        ports: key.replace(/_/g, '.'),\r\n                        ...data[key],\r\n                    }))\r\n                    .sort((a, b) => a.sortOrder - b.sortOrder); // Sorting based on the sortOrder field\r\n                setData(formattedData);\r\n                // setFilteredData(formattedData);\r\n                dispatch(setLoadingModalVisible(false));\r\n            } else {\r\n                console.log(\"No such document!\");\r\n                dispatch(setLoadingModalVisible(false));\r\n\r\n\r\n            }\r\n        }, (error) => {\r\n            console.error(\"Error fetching countries: \", error);\r\n\r\n        });\r\n\r\n        // This will unsubscribe from the listener when the component is unmounted\r\n        return () => unsubscribe();\r\n    }, []);\r\n\r\n\r\n    const handleAddMethodTextChange = () => {\r\n        const textAreaValue = textAreaAddMethod.current?.value;\r\n        if (textAreaValue) {\r\n            const newText = textAreaValue\r\n                .split('\\n')\r\n                .map((line) => line.charAt(0).toUpperCase() + line.slice(1))\r\n                .join('\\n');\r\n            textAreaAddMethod.current.setNativeProps({ text: newText });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        paginatedData.forEach(item => {\r\n            inputMemo.current[item.ports].value = item.memo ? item.memo : '';\r\n            inputSortOrder.current[item.ports].value = item.sortOrder ? item.sortOrder : 0;\r\n            inputProfitPrice.current[item.ports].value = item.profitPrice ? item.profitPrice : 0;\r\n            inputNagoyaPrice.current[item.ports].value = item.nagoyaPrice ? item.nagoyaPrice : 0;\r\n            inputYokohamaPrice.current[item.ports].value = item.yokohamaPrice ? item.yokohamaPrice : 0;\r\n            inputKyushuPrice.current[item.ports].value = item.kyushuPrice ? item.kyushuPrice : 0;\r\n            inputKobePrice.current[item.ports].value = item.kobePrice ? item.kobePrice : 0;\r\n\r\n\r\n\r\n        });\r\n        // setInputMemoValues(initialValues);\r\n\r\n    }, [paginatedData]); // Run this effect when 'items' changes\r\n\r\n    const handleAddPortModalOpen = () => {\r\n\r\n        dispatch(setAddPortModalVisible(true));\r\n\r\n    }\r\n\r\n    const handleAddPortModalClose = () => {\r\n\r\n        dispatch(setAddPortModalVisible(false));\r\n\r\n    }\r\n\r\n    const handleDeletePortModalOpen = (selectedValue) => {\r\n\r\n        dispatch(setDeletePortModalVisible(true));\r\n        selectedPort = selectedValue;\r\n\r\n    }\r\n\r\n    const handleDeletePortModalClose = () => {\r\n\r\n        dispatch(setDeletePortModalVisible(false));\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {screenWidth >= 1280 ? (\r\n                <View style={{ flex: 1, }}>\r\n                    {/* Search Bar */}\r\n                    <View style={{ padding: 10 }}>\r\n                        <TextInput\r\n                            ref={inputSearchRef}\r\n                            onSubmitEditing={handleSearch}\r\n                            style={{ outlineStyle: 'none', padding: 10, backgroundColor: 'white', borderRadius: 5, placeholderTextColor: '#ACADA3' }}\r\n                            placeholder='Search'\r\n                            returnKeyType='search'\r\n                            autoCapitalize='none'\r\n                        />\r\n                    </View>\r\n\r\n                    {/* Add Port Button */}\r\n                    <View style={{ paddingHorizontal: 10, paddingTop: 0, paddingBottom: 0, alignItems: 'flex-start' }}>\r\n                        <TouchableOpacity\r\n                            onPress={handleAddPortModalOpen}\r\n                            style={{\r\n                                borderRadius: 5,\r\n                                padding: 10,\r\n                                borderWidth: 1,\r\n                                borderColor: 'white',\r\n                                backgroundColor: '#16A34A',\r\n                                flexDirection: 'row',\r\n                                alignItems: 'center',\r\n                                justifyContent: 'center',\r\n                            }}\r\n                        >\r\n                            <MaterialIcons name=\"add\" size={20} color={'white'} />\r\n                            <Text style={{ color: 'white', fontWeight: 'bold', marginLeft: 5 }}>Add Port</Text>\r\n                        </TouchableOpacity>\r\n                    </View>\r\n\r\n                    <View\r\n                        style={{\r\n                            flexDirection: 'row',\r\n                            justifyContent: 'space-between',\r\n                            borderBottomWidth: 1,\r\n                            borderBottomColor: '#E4E4E7',\r\n                            backgroundColor: '#0642F4',\r\n                            padding: 10,\r\n                            borderRadius: 5,\r\n                            marginTop: 10,\r\n                        }}\r\n                    >\r\n                        <View style={{ flex: 1, padding: 2 }}>\r\n                            <Text style={{ color: 'white', }} bold>Port Name</Text>\r\n                        </View>\r\n                        <View style={{ flex: 1, padding: 2 }}>\r\n                            <Text style={{ color: 'white', }} bold>Country</Text>\r\n                        </View>\r\n                        <View style={{ flex: 1, padding: 2 }}>\r\n                            <Text style={{ color: 'white', }} bold>Sort Order</Text>\r\n                        </View>\r\n                        <View style={{ flex: 1, padding: 2 }}>\r\n                            <Text style={{ color: 'white', }} bold>Price (USD)</Text>\r\n                        </View>\r\n                        <View style={{ flex: 1, padding: 2 }}>\r\n                            <Text style={{ color: 'white', }} bold>Nagoya</Text>\r\n                        </View>\r\n                        <View style={{ flex: 1, padding: 2 }}>\r\n                            <Text style={{ color: 'white', }} bold>Yokohama</Text>\r\n                        </View>\r\n                        <View style={{ flex: 1, padding: 2 }}>\r\n                            <Text style={{ color: 'white', }} bold>Kyushu</Text>\r\n                        </View>\r\n                        <View style={{ flex: 1, padding: 2 }}>\r\n                            <Text style={{ color: 'white', }} bold>Kobe</Text>\r\n                        </View>\r\n\r\n                        <View style={{ flex: 1, padding: 2, flexDirection: 'row' }}>\r\n                            <SortAndAddModal\r\n                                collectionName='CustomerCountryPort'\r\n                                docName='MethodDoc'\r\n                                handleAddTextChange={handleAddMethodTextChange}\r\n                                textAreaAdd={textAreaAddMethod}\r\n                                title='Method'\r\n                                dataName={'methodData'}\r\n                                databaseInit={projectExtensionFirestore}\r\n                                headerText=\"Rearrange/Add Method\"\r\n                                data={methodData}\r\n                            />\r\n                            <Text style={{ color: 'white', }} bold>Method</Text>\r\n                        </View>\r\n                        <View style={{ flex: 2, padding: 2, justifyContent: 'center', alignItems: 'center', }}>\r\n                            <Text style={{ color: 'white', }} bold>Memo</Text>\r\n                        </View>\r\n                        <View style={{ flex: 1, padding: 2, justifyContent: 'center', alignItems: 'center', }}>\r\n                            <Text style={{ color: 'white', }} bold>Operate</Text>\r\n                        </View>\r\n\r\n\r\n                    </View>\r\n                    <DataTable margin={[0, 0, 0, 1, 1, 1]}>\r\n                        {paginatedData.map((item, index) => (\r\n                            <View\r\n                                key={index}\r\n                                style={{\r\n                                    flex: 1,\r\n                                    flexDirection: 'row',\r\n                                    justifyContent: 'space-between',\r\n                                    alignItems: 'center',\r\n                                    borderBottomWidth: 1,\r\n                                    borderBottomColor: '#E4E4E7',\r\n                                    backgroundColor: '#BFDBFE',\r\n                                    paddingVertical: 10,\r\n                                }}>\r\n                                <Text style={{ flex: 1, marginHorizontal: 3 }} selectable>{item.ports}</Text>\r\n                                <Text style={{ flex: 1, marginHorizontal: 3, alignSelf: 'center' }} selectable>{item.country}</Text>\r\n                                <View style={{ flex: 1, flexDirection: 'row', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, marginHorizontal: 3, backgroundColor: 'white' }}>\r\n                                    {/* <Text style={{ marginHorizontal: 3, alignSelf: 'center', }} bold>{item.sortOrder ? item.sortOrder : 0}→</Text> */}\r\n                                    <View style={{ flex: 1, flexDirection: 'row', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, marginHorizontal: 3, borderLeftColor: '#E4E4E7', }}>\r\n                                        <TextInput\r\n                                            onChangeText={(text) => handleSortOrderTextChange(text, item)}\r\n                                            onSubmitEditing={() => updatePortsField(item.ports, inputSortOrder.current[item.ports].value, inputSortOrder, 'Sort Order', 'sortOrder')}\r\n                                            ref={(ref) => (inputSortOrder.current[item.ports] = ref)}\r\n                                            style={{ outlineStyle: 'none', padding: 5, width: '90%', backgroundColor: 'white', borderTopLeftRadius: 5, borderBottomLeftRadius: 5 }}\r\n                                        />\r\n                                        <View style={{ backgroundColor: 'white', borderTopRightRadius: 5, borderBottomRightRadius: 5, }}>\r\n                                            <TouchableHighlight\r\n                                                onPress={() => updatePortsField(item.ports, inputSortOrder.current[item.ports].value, inputSortOrder, 'Sort Order', 'sortOrder')}\r\n                                                underlayColor={'rgba(22, 163, 74, 0.3)'}\r\n                                                style={{\r\n                                                    backgroundColor: '#16A34A',\r\n                                                    borderRadius: 5,\r\n                                                    padding: 5,\r\n                                                    margin: 2,\r\n                                                    alignSelf: 'center',\r\n                                                }}>\r\n                                                <MaterialIcons name='update' color='white' size={22} />\r\n                                            </TouchableHighlight>\r\n                                        </View>\r\n                                    </View>\r\n                                </View>\r\n\r\n                                <View style={{ flex: 1, flexDirection: 'row', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, marginHorizontal: 3, backgroundColor: 'white' }}>\r\n                                    {/* <Text style={{ marginHorizontal: 3, alignSelf: 'center', }} bold>{item.profitPrice ? item.profitPrice : 0}→</Text> */}\r\n                                    <TextInput\r\n                                        onChangeText={(text) => handleProfitPriceTextChange(text, item)}\r\n                                        onSubmitEditing={() => updatePortsField(item.ports, inputProfitPrice.current[item.ports].value, inputProfitPrice, 'Profit Price', 'profitPrice')}\r\n                                        ref={(ref) => (inputProfitPrice.current[item.ports] = ref)}\r\n                                        style={{ outlineStyle: 'none', padding: 5, width: '90%', backgroundColor: 'white', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, borderLeftColor: '#E4E4E7', borderLeftWidth: 1, }}\r\n                                    />\r\n                                    <View style={{ backgroundColor: 'white', borderTopRightRadius: 5, borderBottomRightRadius: 5, }}>\r\n                                        <TouchableHighlight\r\n                                            onPress={() => updatePortsField(item.ports, inputProfitPrice.current[item.ports].value, inputProfitPrice, 'Profit Price', 'profitPrice')}\r\n                                            underlayColor={'rgba(22, 163, 74, 0.3)'}\r\n                                            style={{\r\n                                                backgroundColor: '#16A34A',\r\n                                                borderRadius: 5,\r\n                                                padding: 5,\r\n                                                margin: 2,\r\n                                                alignSelf: 'center',\r\n                                            }}>\r\n                                            <MaterialIcons name='update' color='white' size={22} />\r\n                                        </TouchableHighlight>\r\n                                    </View>\r\n                                </View>\r\n\r\n                                <View style={{ flex: 1, flexDirection: 'row', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, marginHorizontal: 3, backgroundColor: 'white' }}>\r\n                                    {/* <Text style={{ marginHorizontal: 3, alignSelf: 'center', }} bold>{item.nagoyaPrice ? item.nagoyaPrice : 0}→</Text> */}\r\n                                    <TextInput\r\n                                        onSubmitEditing={() => updatePortsField(item.ports, inputNagoyaPrice.current[item.ports].value, inputNagoyaPrice, 'Nagoya Price', 'nagoyaPrice')}\r\n                                        ref={(ref) => (inputNagoyaPrice.current[item.ports] = ref)}\r\n                                        style={{ outlineStyle: 'none', padding: 5, width: '90%', backgroundColor: 'white', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, borderLeftColor: '#E4E4E7', borderLeftWidth: 1, }}\r\n                                    />\r\n                                    <View style={{ backgroundColor: 'white', borderTopRightRadius: 5, borderBottomRightRadius: 5, }}>\r\n                                        <TouchableHighlight\r\n                                            onPress={() => updatePortsField(item.ports, inputNagoyaPrice.current[item.ports].value, inputNagoyaPrice, 'Nagoya Price', 'nagoyaPrice')}\r\n                                            underlayColor={'rgba(22, 163, 74, 0.3)'}\r\n                                            style={{\r\n                                                backgroundColor: '#16A34A',\r\n                                                borderRadius: 5,\r\n                                                padding: 5,\r\n                                                margin: 2,\r\n                                                alignSelf: 'center',\r\n                                            }}>\r\n                                            <MaterialIcons name='update' color='white' size={22} />\r\n                                        </TouchableHighlight>\r\n                                    </View>\r\n                                </View>\r\n\r\n                                <View style={{ flex: 1, flexDirection: 'row', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, marginHorizontal: 3, backgroundColor: 'white' }}>\r\n                                    {/* <Text style={{ marginHorizontal: 3, alignSelf: 'center', }} bold>{item.yokohamaPrice ? item.yokohamaPrice : 0}→</Text> */}\r\n                                    <TextInput\r\n                                        onSubmitEditing={() => updatePortsField(item.ports, inputYokohamaPrice.current[item.ports].value, inputYokohamaPrice, 'Yokohama Price', 'yokohamaPrice')}\r\n                                        ref={(ref) => (inputYokohamaPrice.current[item.ports] = ref)}\r\n                                        style={{ outlineStyle: 'none', padding: 5, width: '90%', backgroundColor: 'white', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, borderLeftColor: '#E4E4E7', borderLeftWidth: 1, }}\r\n                                    />\r\n                                    <View style={{ backgroundColor: 'white', borderTopRightRadius: 5, borderBottomRightRadius: 5, }}>\r\n                                        <TouchableHighlight\r\n                                            onPress={() => updatePortsField(item.ports, inputYokohamaPrice.current[item.ports].value, inputYokohamaPrice, 'Yokohama Price', 'yokohamaPrice')}\r\n                                            underlayColor={'rgba(22, 163, 74, 0.3)'}\r\n                                            style={{\r\n                                                backgroundColor: '#16A34A',\r\n                                                borderRadius: 5,\r\n                                                padding: 5,\r\n                                                margin: 2,\r\n                                                alignSelf: 'center',\r\n                                            }}>\r\n                                            <MaterialIcons name='update' color='white' size={22} />\r\n                                        </TouchableHighlight>\r\n                                    </View>\r\n                                </View>\r\n\r\n                                <View style={{ flex: 1, flexDirection: 'row', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, marginHorizontal: 3, backgroundColor: 'white' }}>\r\n                                    {/* <Text style={{ marginHorizontal: 3, alignSelf: 'center', }} bold>{item.kyushuPrice ? item.kyushuPrice : 0}→</Text> */}\r\n                                    <TextInput\r\n                                        onSubmitEditing={() => updatePortsField(item.ports, inputKyushuPrice.current[item.ports].value, inputKyushuPrice, 'Kyushu Price', 'kyushuPrice')}\r\n                                        ref={(ref) => (inputKyushuPrice.current[item.ports] = ref)}\r\n                                        style={{ outlineStyle: 'none', padding: 5, width: '90%', backgroundColor: 'white', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, borderLeftColor: '#E4E4E7', borderLeftWidth: 1, }}\r\n                                    />\r\n                                    <View style={{ backgroundColor: 'white', borderTopRightRadius: 5, borderBottomRightRadius: 5, }}>\r\n                                        <TouchableHighlight\r\n                                            onPress={() => updatePortsField(item.ports, inputKyushuPrice.current[item.ports].value, inputKyushuPrice, 'Kyushu Price', 'kyushuPrice')}\r\n                                            underlayColor={'rgba(22, 163, 74, 0.3)'}\r\n                                            style={{\r\n                                                backgroundColor: '#16A34A',\r\n                                                borderRadius: 5,\r\n                                                padding: 5,\r\n                                                margin: 2,\r\n                                                alignSelf: 'center',\r\n                                            }}>\r\n                                            <MaterialIcons name='update' color='white' size={22} />\r\n                                        </TouchableHighlight>\r\n                                    </View>\r\n                                </View>\r\n\r\n                                <View style={{ flex: 1, flexDirection: 'row', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, marginHorizontal: 3, backgroundColor: 'white' }}>\r\n                                    {/* <Text style={{ marginHorizontal: 3, alignSelf: 'center', }} bold>{item.kobePrice ? item.kobePrice : 0}→</Text> */}\r\n                                    <TextInput\r\n                                        onSubmitEditing={() => updatePortsField(item.ports, inputKobePrice.current[item.ports].value, inputKobePrice, 'Kobe Price', 'kobePrice')}\r\n                                        ref={(ref) => (inputKobePrice.current[item.ports] = ref)}\r\n                                        style={{ outlineStyle: 'none', padding: 5, width: '90%', backgroundColor: 'white', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, borderLeftColor: '#E4E4E7', borderLeftWidth: 1, }}\r\n                                    />\r\n                                    <View style={{ backgroundColor: 'white', borderTopRightRadius: 5, borderBottomRightRadius: 5, }}>\r\n                                        <TouchableHighlight\r\n                                            onPress={() => updatePortsField(item.ports, inputKobePrice.current[item.ports].value, inputKobePrice, 'Kobe Price', 'kobePrice')}\r\n                                            underlayColor={'rgba(22, 163, 74, 0.3)'}\r\n                                            style={{\r\n                                                backgroundColor: '#16A34A',\r\n                                                borderRadius: 5,\r\n                                                padding: 5,\r\n                                                margin: 2,\r\n                                                alignSelf: 'center',\r\n                                            }}>\r\n                                            <MaterialIcons name='update' color='white' size={22} />\r\n                                        </TouchableHighlight>\r\n                                    </View>\r\n                                </View>\r\n\r\n                                <View style={{ flex: screenWidth < 1800 ? 2 : 1, flexDirection: 'row', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, marginHorizontal: 3, backgroundColor: 'white' }}>\r\n                                    <SelectMethod defaultValue={item.method} portCode={item.ports} page={page} searchQuery={searchQuery} />\r\n                                </View>\r\n\r\n                                <View style={{ flex: 2, flexDirection: 'row', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, marginHorizontal: 3, }}>\r\n                                    <TextInput\r\n                                        multiline\r\n                                        // value={inputMemoValues[item.ports] || ''}\r\n                                        // onChangeText={(text) => handleMemoTextChange(text, item.ports)}\r\n                                        ref={(ref) => (inputMemo.current[item.ports] = ref)}\r\n                                        style={{ outlineStyle: 'none', flex: 2, height: 60, paddingLeft: 5, backgroundColor: 'white', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, }}\r\n                                    />\r\n                                    <View style={{ borderTopRightRadius: 5, borderBottomRightRadius: 5, }}>\r\n                                        <TouchableHighlight\r\n                                            onPress={() => updatePortsField(item.ports, inputMemo.current[item.ports].value, inputMemo, 'Memo', 'memo')}\r\n                                            underlayColor={'rgba(22, 163, 74, 0.3)'}\r\n                                            style={{\r\n                                                backgroundColor: '#16A34A',\r\n                                                borderRadius: 5,\r\n                                                padding: 5,\r\n                                                alignSelf: 'center',\r\n                                                height: '100%',\r\n                                                justifyContent: 'center',\r\n                                                alignItems: 'center',\r\n                                            }}>\r\n                                            <MaterialIcons name='update' color='white' size={22} />\r\n                                        </TouchableHighlight>\r\n                                    </View>\r\n                                </View>\r\n\r\n                                <View style={{ flex: 1, flexDirection: 'row', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, marginHorizontal: 3, justifyContent: 'center', alignItems: 'center', }}>\r\n\r\n                                    <View style={{ borderTopRightRadius: 5, borderBottomRightRadius: 5, }}>\r\n                                        <TouchableHighlight\r\n                                            onPress={() => handleDeletePortModalOpen(item.ports)}\r\n                                            underlayColor={'rgba(22, 163, 74, 0.3)'}\r\n                                            style={{\r\n                                                backgroundColor: '#DC2626',\r\n                                                borderRadius: 5,\r\n                                                padding: 10,\r\n                                                alignSelf: 'center',\r\n                                                height: '100%',\r\n                                                justifyContent: 'center',\r\n                                                alignItems: 'center',\r\n                                            }}>\r\n                                            <AntDesign name='delete' color='white' size={22} />\r\n                                        </TouchableHighlight>\r\n                                    </View>\r\n                                </View>\r\n                                {/* <Text style={{ flex: 1, marginHorizontal: 5 }}>{item.inspectionIsRequired}</Text> */}\r\n\r\n                                {/* You can add the mapping for nearestPorts here, assuming nearestPorts is an array */}\r\n                                {/* {item.nearestPorts && item.nearestPorts.map((port, portIndex) => (\r\n            <Text key={portIndex}>Nearest Port: {port}</Text>\r\n          ))} */}\r\n                            </View>\r\n                        ))}\r\n                        <DataTable.Pagination\r\n                            page={page}\r\n                            numberOfPages={Math.ceil(filtered.length / itemsPerPage)}\r\n                            onPageChange={(page) => setPage(page)}\r\n                            label={`${startIndex + 1}-${endIndex} of ${filtered.length}`}\r\n                            optionsPerPage={optionsPerPage}\r\n                            itemsPerPage={itemsPerPage}\r\n                            setItemsPerPage={setItemsPerPage}\r\n                            showFastPagination\r\n                            optionsLabel={'Rows per page'}\r\n                        />\r\n                    </DataTable>\r\n                    <AddPortModal handleAddPortModalClose={handleAddPortModalClose} />\r\n                    <DeletePortModal handleDeletePortModalClose={handleDeletePortModalClose} />\r\n                </View>) :\r\n                (\r\n                    //Ports Table Mobile View\r\n                    <View style={{ flex: 1, }}>\r\n                        {/* Search Bar */}\r\n                        <View style={{ padding: 10 }}>\r\n                            <TextInput\r\n                                ref={inputSearchRef}\r\n                                onSubmitEditing={handleSearch}\r\n                                style={{ outlineStyle: 'none', padding: 10, backgroundColor: 'white', borderRadius: 5, placeholderTextColor: '#ACADA3' }}\r\n                                placeholder='Search'\r\n                                returnKeyType='search'\r\n                                autoCapitalize='none'\r\n                            />\r\n                        </View>\r\n\r\n                        {/* Add Port Button */}\r\n                        <View style={{ paddingHorizontal: 10, paddingTop: 0, paddingBottom: 0, alignItems: 'flex-start' }}>\r\n                            <TouchableOpacity\r\n                                onPress={handleAddPortModalOpen}\r\n                                style={{\r\n                                    borderRadius: 5,\r\n                                    padding: 10,\r\n                                    borderWidth: 1,\r\n                                    borderColor: 'white',\r\n                                    backgroundColor: '#16A34A',\r\n                                    flexDirection: 'row',\r\n                                    alignItems: 'center',\r\n                                    justifyContent: 'center',\r\n                                }}\r\n                            >\r\n                                <MaterialIcons name=\"add\" size={20} color={'white'} />\r\n                                <Text style={{ color: 'white', fontWeight: 'bold', marginLeft: 5 }}>Add Port</Text>\r\n                            </TouchableOpacity>\r\n                        </View>\r\n\r\n                        <DataTable margin={[0, 0, 0, 1, 1, 1]}>\r\n                            {paginatedData.map((item, index) => (\r\n                                <View\r\n                                    key={index}\r\n                                    style={{\r\n                                        flex: 1,\r\n                                        flexDirection: 'column',\r\n                                        borderWidth: 1,\r\n                                        borderColor: '#E4E4E7',\r\n                                        backgroundColor: '#BFDBFE',\r\n                                        margin: 10,\r\n                                    }}>\r\n\r\n                                    <View style={{ flexDirection: 'row' }}>\r\n                                        <View style={{ width: '30%', padding: 2, backgroundColor: '#0642F4', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', }}>\r\n                                            <Text style={{ color: 'white', }} bold>Port Name</Text>\r\n                                        </View>\r\n                                        <View style={{ flex: 1, borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', }}>\r\n                                            <Text style={{ flex: 1, marginHorizontal: 3 }} selectable>{item.ports}</Text>\r\n                                        </View>\r\n                                    </View>\r\n\r\n                                    <View style={{ flexDirection: 'row' }}>\r\n                                        <View style={{ width: '30%', padding: 2, backgroundColor: '#0642F4', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', }}>\r\n                                            <Text style={{ color: 'white', }} bold>Country</Text>\r\n                                        </View>\r\n                                        <View style={{ flex: 1, borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', }}>\r\n\r\n                                            <Text style={{ flex: 1, marginHorizontal: 3, }} selectable>{item.country}</Text>\r\n                                        </View>\r\n                                    </View>\r\n\r\n                                    <View style={{ flexDirection: 'row' }}>\r\n                                        <View style={{ width: '30%', padding: 2, backgroundColor: '#0642F4', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', }}>\r\n                                            <Text style={{ color: 'white', }} bold>Sort Order</Text>\r\n                                        </View>\r\n                                        <View style={{ flex: 1, borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', }}>\r\n\r\n                                            <View style={{ flex: 1, flexDirection: 'row', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, marginHorizontal: 3, backgroundColor: 'white' }}>\r\n                                                {/* <Text style={{ marginHorizontal: 3, alignSelf: 'center', }} bold>{item.sortOrder ? item.sortOrder : 0}→</Text> */}\r\n                                                <View style={{ flex: 1, flexDirection: 'row', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, marginHorizontal: 3, borderLeftColor: '#E4E4E7', }}>\r\n                                                    <TextInput\r\n                                                        onChangeText={(text) => handleSortOrderTextChange(text, item)}\r\n                                                        onSubmitEditing={() => updatePortsField(item.ports, inputSortOrder.current[item.ports].value, inputSortOrder, 'Sort Order', 'sortOrder')}\r\n                                                        ref={(ref) => (inputSortOrder.current[item.ports] = ref)}\r\n                                                        style={{ outlineStyle: 'none', padding: 5, width: '90%', backgroundColor: 'white', borderTopLeftRadius: 5, borderBottomLeftRadius: 5 }}\r\n                                                    />\r\n                                                    <View style={{ backgroundColor: 'white', borderTopRightRadius: 5, borderBottomRightRadius: 5, }}>\r\n                                                        <TouchableHighlight\r\n                                                            onPress={() => updatePortsField(item.ports, inputSortOrder.current[item.ports].value, inputSortOrder, 'Sort Order', 'sortOrder')}\r\n                                                            underlayColor={'rgba(22, 163, 74, 0.3)'}\r\n                                                            style={{\r\n                                                                backgroundColor: '#16A34A',\r\n                                                                borderRadius: 5,\r\n                                                                padding: 5,\r\n                                                                margin: 2,\r\n                                                                alignSelf: 'center',\r\n                                                            }}>\r\n                                                            <MaterialIcons name='update' color='white' size={22} />\r\n                                                        </TouchableHighlight>\r\n                                                    </View>\r\n                                                </View>\r\n                                            </View>\r\n                                        </View>\r\n                                    </View>\r\n\r\n\r\n                                    <View style={{ flexDirection: 'row' }}>\r\n                                        <View style={{ width: '30%', padding: 2, backgroundColor: '#0642F4', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', }}>\r\n                                            <Text style={{ color: 'white', }} bold>Price (USD)</Text>\r\n                                        </View>\r\n                                        <View style={{ flex: 1, borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', }}>\r\n                                            <View style={{ flex: 1, flexDirection: 'row', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, marginHorizontal: 3, backgroundColor: 'white' }}>\r\n                                                {/* <Text style={{ marginHorizontal: 3, alignSelf: 'center', }} bold>{item.profitPrice ? item.profitPrice : 0}→</Text> */}\r\n                                                <TextInput\r\n                                                    onChangeText={(text) => handleProfitPriceTextChange(text, item)}\r\n                                                    onSubmitEditing={() => updatePortsField(item.ports, inputProfitPrice.current[item.ports].value, inputProfitPrice, 'Profit Price', 'profitPrice')}\r\n                                                    ref={(ref) => (inputProfitPrice.current[item.ports] = ref)}\r\n                                                    style={{ outlineStyle: 'none', padding: 5, width: '90%', backgroundColor: 'white', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, borderLeftColor: '#E4E4E7', borderLeftWidth: 1, }}\r\n                                                />\r\n                                                <View style={{ backgroundColor: 'white', borderTopRightRadius: 5, borderBottomRightRadius: 5, }}>\r\n                                                    <TouchableHighlight\r\n                                                        onPress={() => updatePortsField(item.ports, inputProfitPrice.current[item.ports].value, inputProfitPrice, 'Profit Price', 'profitPrice')}\r\n                                                        underlayColor={'rgba(22, 163, 74, 0.3)'}\r\n                                                        style={{\r\n                                                            backgroundColor: '#16A34A',\r\n                                                            borderRadius: 5,\r\n                                                            padding: 5,\r\n                                                            margin: 2,\r\n                                                            alignSelf: 'center',\r\n                                                        }}>\r\n                                                        <MaterialIcons name='update' color='white' size={22} />\r\n                                                    </TouchableHighlight>\r\n                                                </View>\r\n                                            </View>\r\n                                        </View>\r\n                                    </View>\r\n\r\n\r\n                                    <View style={{ flexDirection: 'row' }}>\r\n                                        <View style={{ width: '30%', padding: 2, backgroundColor: '#0642F4', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', }}>\r\n                                            <Text style={{ color: 'white', }} bold>Nagoya</Text>\r\n                                        </View>\r\n                                        <View style={{ flex: 1, borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', }}>\r\n                                            <View style={{ flex: 1, flexDirection: 'row', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, marginHorizontal: 3, backgroundColor: 'white' }}>\r\n                                                {/* <Text style={{ marginHorizontal: 3, alignSelf: 'center', }} bold>{item.nagoyaPrice ? item.nagoyaPrice : 0}→</Text> */}\r\n                                                <TextInput\r\n                                                    onSubmitEditing={() => updatePortsField(item.ports, inputNagoyaPrice.current[item.ports].value, inputNagoyaPrice, 'Nagoya Price', 'nagoyaPrice')}\r\n                                                    ref={(ref) => (inputNagoyaPrice.current[item.ports] = ref)}\r\n                                                    style={{ outlineStyle: 'none', padding: 5, width: '90%', backgroundColor: 'white', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, borderLeftColor: '#E4E4E7', borderLeftWidth: 1, }}\r\n                                                />\r\n                                                <View style={{ backgroundColor: 'white', borderTopRightRadius: 5, borderBottomRightRadius: 5, }}>\r\n                                                    <TouchableHighlight\r\n                                                        onPress={() => updatePortsField(item.ports, inputNagoyaPrice.current[item.ports].value, inputNagoyaPrice, 'Nagoya Price', 'nagoyaPrice')}\r\n                                                        underlayColor={'rgba(22, 163, 74, 0.3)'}\r\n                                                        style={{\r\n                                                            backgroundColor: '#16A34A',\r\n                                                            borderRadius: 5,\r\n                                                            padding: 5,\r\n                                                            margin: 2,\r\n                                                            alignSelf: 'center',\r\n                                                        }}>\r\n                                                        <MaterialIcons name='update' color='white' size={22} />\r\n                                                    </TouchableHighlight>\r\n                                                </View>\r\n                                            </View>\r\n                                        </View>\r\n                                    </View>\r\n\r\n                                    <View style={{ flexDirection: 'row' }}>\r\n                                        <View style={{ width: '30%', padding: 2, backgroundColor: '#0642F4', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', }}>\r\n                                            <Text style={{ color: 'white', }} bold>Yokohama</Text>\r\n                                        </View>\r\n                                        <View style={{ flex: 1, borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', }}>\r\n                                            <View style={{ flex: 1, flexDirection: 'row', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, marginHorizontal: 3, backgroundColor: 'white' }}>\r\n                                                {/* <Text style={{ marginHorizontal: 3, alignSelf: 'center', }} bold>{item.yokohamaPrice ? item.yokohamaPrice : 0}→</Text> */}\r\n                                                <TextInput\r\n                                                    onSubmitEditing={() => updatePortsField(item.ports, inputYokohamaPrice.current[item.ports].value, inputYokohamaPrice, 'Yokohama Price', 'yokohamaPrice')}\r\n                                                    ref={(ref) => (inputYokohamaPrice.current[item.ports] = ref)}\r\n                                                    style={{ outlineStyle: 'none', padding: 5, width: '90%', backgroundColor: 'white', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, borderLeftColor: '#E4E4E7', borderLeftWidth: 1, }}\r\n                                                />\r\n                                                <View style={{ backgroundColor: 'white', borderTopRightRadius: 5, borderBottomRightRadius: 5, }}>\r\n                                                    <TouchableHighlight\r\n                                                        onPress={() => updatePortsField(item.ports, inputYokohamaPrice.current[item.ports].value, inputYokohamaPrice, 'Yokohama Price', 'yokohamaPrice')}\r\n                                                        underlayColor={'rgba(22, 163, 74, 0.3)'}\r\n                                                        style={{\r\n                                                            backgroundColor: '#16A34A',\r\n                                                            borderRadius: 5,\r\n                                                            padding: 5,\r\n                                                            margin: 2,\r\n                                                            alignSelf: 'center',\r\n                                                        }}>\r\n                                                        <MaterialIcons name='update' color='white' size={22} />\r\n                                                    </TouchableHighlight>\r\n                                                </View>\r\n                                            </View>\r\n                                        </View>\r\n                                    </View>\r\n\r\n\r\n                                    <View style={{ flexDirection: 'row' }}>\r\n                                        <View style={{ width: '30%', padding: 2, backgroundColor: '#0642F4', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', }}>\r\n                                            <Text style={{ color: 'white', }} bold>Kyushu</Text>\r\n                                        </View>\r\n                                        <View style={{ flex: 1, borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', }}>\r\n                                            <View style={{ flex: 1, flexDirection: 'row', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, marginHorizontal: 3, backgroundColor: 'white' }}>\r\n                                                {/* <Text style={{ marginHorizontal: 3, alignSelf: 'center', }} bold>{item.kyushuPrice ? item.kyushuPrice : 0}→</Text> */}\r\n                                                <TextInput\r\n                                                    onSubmitEditing={() => updatePortsField(item.ports, inputKyushuPrice.current[item.ports].value, inputKyushuPrice, 'Kyushu Price', 'kyushuPrice')}\r\n                                                    ref={(ref) => (inputKyushuPrice.current[item.ports] = ref)}\r\n                                                    style={{ outlineStyle: 'none', padding: 5, width: '90%', backgroundColor: 'white', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, borderLeftColor: '#E4E4E7', borderLeftWidth: 1, }}\r\n                                                />\r\n                                                <View style={{ backgroundColor: 'white', borderTopRightRadius: 5, borderBottomRightRadius: 5, }}>\r\n                                                    <TouchableHighlight\r\n                                                        onPress={() => updatePortsField(item.ports, inputKyushuPrice.current[item.ports].value, inputKyushuPrice, 'Kyushu Price', 'kyushuPrice')}\r\n                                                        underlayColor={'rgba(22, 163, 74, 0.3)'}\r\n                                                        style={{\r\n                                                            backgroundColor: '#16A34A',\r\n                                                            borderRadius: 5,\r\n                                                            padding: 5,\r\n                                                            margin: 2,\r\n                                                            alignSelf: 'center',\r\n                                                        }}>\r\n                                                        <MaterialIcons name='update' color='white' size={22} />\r\n                                                    </TouchableHighlight>\r\n                                                </View>\r\n                                            </View>\r\n                                        </View>\r\n                                    </View>\r\n\r\n                                    <View style={{ flexDirection: 'row' }}>\r\n                                        <View style={{ width: '30%', padding: 2, backgroundColor: '#0642F4', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', }}>\r\n                                            <Text style={{ color: 'white', }} bold>Kobe</Text>\r\n                                        </View>\r\n                                        <View style={{ flex: 1, borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', }}>\r\n                                            <View style={{ flex: 1, flexDirection: 'row', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, marginHorizontal: 3, backgroundColor: 'white' }}>\r\n                                                {/* <Text style={{ marginHorizontal: 3, alignSelf: 'center', }} bold>{item.kobePrice ? item.kobePrice : 0}→</Text> */}\r\n                                                <TextInput\r\n                                                    onSubmitEditing={() => updatePortsField(item.ports, inputKobePrice.current[item.ports].value, inputKobePrice, 'Kobe Price', 'kobePrice')}\r\n                                                    ref={(ref) => (inputKobePrice.current[item.ports] = ref)}\r\n                                                    style={{ outlineStyle: 'none', padding: 5, width: '90%', backgroundColor: 'white', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, borderLeftColor: '#E4E4E7', borderLeftWidth: 1, }}\r\n                                                />\r\n                                                <View style={{ backgroundColor: 'white', borderTopRightRadius: 5, borderBottomRightRadius: 5, }}>\r\n                                                    <TouchableHighlight\r\n                                                        onPress={() => updatePortsField(item.ports, inputKobePrice.current[item.ports].value, inputKobePrice, 'Kobe Price', 'kobePrice')}\r\n                                                        underlayColor={'rgba(22, 163, 74, 0.3)'}\r\n                                                        style={{\r\n                                                            backgroundColor: '#16A34A',\r\n                                                            borderRadius: 5,\r\n                                                            padding: 5,\r\n                                                            margin: 2,\r\n                                                            alignSelf: 'center',\r\n                                                        }}>\r\n                                                        <MaterialIcons name='update' color='white' size={22} />\r\n                                                    </TouchableHighlight>\r\n                                                </View>\r\n                                            </View>\r\n                                        </View>\r\n                                    </View>\r\n\r\n\r\n                                    <View style={{ flexDirection: 'row' }}>\r\n                                        <View style={{ width: '30%', padding: 2, backgroundColor: '#0642F4', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', }}>\r\n                                            <Text style={{ color: 'white', }} bold>Method</Text>\r\n                                        </View>\r\n                                        <View style={{ flex: 1, borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', }}>\r\n\r\n\r\n                                            <View style={{ flex: 1, flexDirection: 'row', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, marginHorizontal: 3, backgroundColor: 'white' }}>\r\n                                                <SelectMethod defaultValue={item.method} portCode={item.ports} page={page} searchQuery={searchQuery} />\r\n                                            </View>\r\n                                        </View>\r\n                                    </View>\r\n\r\n                                    <View style={{ flexDirection: 'row' }}>\r\n                                        <View style={{ width: '30%', padding: 2, backgroundColor: '#0642F4', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', }}>\r\n                                            <Text style={{ color: 'white', }} bold>Memo</Text>\r\n                                        </View>\r\n                                        <View style={{ flex: 1, borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', }}>\r\n                                            <View style={{ flex: 2, flexDirection: 'row', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, marginHorizontal: 3, }}>\r\n                                                <TextInput\r\n                                                    multiline\r\n                                                    // value={inputMemoValues[item.ports] || ''}\r\n                                                    // onChangeText={(text) => handleMemoTextChange(text, item.ports)}\r\n                                                    ref={(ref) => (inputMemo.current[item.ports] = ref)}\r\n                                                    style={{ outlineStyle: 'none', flex: 2, height: 60, paddingLeft: 5, backgroundColor: 'white', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, }}\r\n                                                />\r\n                                                <View style={{ borderTopRightRadius: 5, borderBottomRightRadius: 5, }}>\r\n                                                    <TouchableHighlight\r\n                                                        onPress={() => updatePortsField(item.ports, inputMemo.current[item.ports].value, inputMemo, 'Memo', 'memo')}\r\n                                                        underlayColor={'rgba(22, 163, 74, 0.3)'}\r\n                                                        style={{\r\n                                                            backgroundColor: '#16A34A',\r\n                                                            borderRadius: 5,\r\n                                                            padding: 5,\r\n                                                            alignSelf: 'center',\r\n                                                            height: '100%',\r\n                                                            justifyContent: 'center',\r\n                                                            alignItems: 'center',\r\n                                                        }}>\r\n                                                        <MaterialIcons name='update' color='white' size={22} />\r\n                                                    </TouchableHighlight>\r\n                                                </View>\r\n                                            </View>\r\n                                        </View>\r\n                                    </View>\r\n\r\n                                    <View style={{ flexDirection: 'row' }}>\r\n                                        <View style={{ width: '30%', padding: 2, backgroundColor: '#0642F4', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', }}>\r\n                                            <Text style={{ color: 'white', }} bold>Operate</Text>\r\n                                        </View>\r\n                                        <View style={{ flex: 1, borderBottomWidth: 1, borderBottomColor: '#E4E4E7', justifyContent: 'center', borderBottomWidth: 1, borderBottomColor: '#E4E4E7', }}>\r\n                                            <View style={{ flex: 1, flexDirection: 'row', borderTopLeftRadius: 5, borderBottomLeftRadius: 5, marginHorizontal: 3, justifyContent: 'center', alignItems: 'center', }}>\r\n                                                <View style={{ width: '100%', borderTopRightRadius: 5, borderBottomRightRadius: 5, }}>\r\n                                                    <TouchableHighlight\r\n                                                        onPress={() => handleDeletePortModalOpen(item.ports)}\r\n                                                        underlayColor={'rgba(22, 163, 74, 0.3)'}\r\n                                                        style={{ flex: 1, backgroundColor: '#DC2626', padding: 5, borderRadius: 5, flexDirection: 'row', justifyContent: 'center', alignItems: 'center', margin: 6, }}>\r\n                                                        <AntDesign name='delete' color='white' size={22} />\r\n                                                    </TouchableHighlight>\r\n                                                </View>\r\n                                            </View>\r\n                                        </View>\r\n                                    </View>\r\n\r\n\r\n                                    {/* <Text style={{ flex: 1, marginHorizontal: 5 }}>{item.inspectionIsRequired}</Text> */}\r\n\r\n                                    {/* You can add the mapping for nearestPorts here, assuming nearestPorts is an array */}\r\n                                    {/* {item.nearestPorts && item.nearestPorts.map((port, portIndex) => (\r\n            <Text key={portIndex}>Nearest Port: {port}</Text>\r\n          ))} */}\r\n                                </View>\r\n                            ))}\r\n                            <DataTable.Pagination\r\n                                page={page}\r\n                                numberOfPages={Math.ceil(filtered.length / itemsPerPage)}\r\n                                onPageChange={(page) => setPage(page)}\r\n                                label={`${startIndex + 1}-${endIndex} of ${filtered.length}`}\r\n                                optionsPerPage={optionsPerPage}\r\n                                itemsPerPage={itemsPerPage}\r\n                                setItemsPerPage={setItemsPerPage}\r\n                                showFastPagination\r\n                                optionsLabel={'Rows per page'}\r\n                            />\r\n                        </DataTable>\r\n                        <AddPortModal handleAddPortModalClose={handleAddPortModalClose} />\r\n                        <DeletePortModal handleDeletePortModalClose={handleDeletePortModalClose} />\r\n                    </View>\r\n                )}\r\n        </>\r\n\r\n\r\n\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nexport default function Freight() {\r\n\r\n    const [email, setEmail] = useState('');\r\n    const logo = require('../../assets/C-Hub.png');\r\n    const logo2 = require('../../assets/C-Hub Logo Only.png');\r\n    const [isMobileView, setIsMobileView] = useState(false);\r\n    const [isDrawerOpen, setIsDrawerOpen] = useState(false);\r\n    const navigation = useNavigation();\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const [typeOfAccount, setTypeOfAccount] = useState('');\r\n\r\n\r\n    const loginName = useSelector((state) => state.loginName);\r\n    nameVariable.text = loginName;\r\n    const [name, setName] = useState(loginName);\r\n    const [time, setTime] = useState('');\r\n\r\n    const [selectedImages, setSelectedImages] = useState([]);\r\n\r\n    const [widthState, setWidthState] = useState(Dimensions.get('window').width);\r\n\r\n\r\n\r\n\r\n    const screenWidth = Dimensions.get('window').width;\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(setSelectedButton(defaultSelectedButton));\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = projectControlAuth.onAuthStateChanged(user => {\r\n            if (!user) {\r\n                navigation.navigate(\"Login\")\r\n            }\r\n        })\r\n        return unsubscribe\r\n    }, [])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const handleDocumentChange = (snapshot) => {\r\n        if (snapshot.exists()) {\r\n            const data = snapshot.data();\r\n            const isActive = data.active;\r\n\r\n            if (!isActive) {\r\n                signOut(projectControlAuth)\r\n                    .then(() => {\r\n                        navigation.navigate('Login');\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error('Error signing out:', error);\r\n                    });\r\n            }\r\n        } else {\r\n            signOut(projectControlAuth)\r\n                .then(() => {\r\n                    navigation.navigate('Login');\r\n                })\r\n                .catch((error) => {\r\n                    console.error('Error signing out:', error);\r\n                });\r\n        }\r\n    };\r\n\r\n    const subscribeToFieldChange = () => {\r\n        const userId = projectControlAuth.currentUser?.email;\r\n        if (userId) {\r\n            const userRef = doc(firestore, 'accounts', userId);\r\n            const unsubscribe = onSnapshot(userRef, handleDocumentChange);\r\n            return unsubscribe;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = subscribeToFieldChange();\r\n\r\n        return () => {\r\n            unsubscribe();\r\n        };\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        const currentUserEmail = getEmailOfCurrentUser();\r\n        if (currentUserEmail) {\r\n            getFieldValueByEmail(currentUserEmail);\r\n            setEmail(currentUserEmail)\r\n            const documentId = currentUserEmail;\r\n            listenForNameChange(documentId);\r\n        }\r\n    }, []);\r\n\r\n\r\n    const listenForNameChange = (documentId) => {\r\n\r\n\r\n        // To stop listening for updates, you can call unsubscribe()\r\n        // unsubscribe();\r\n    };\r\n\r\n\r\n\r\n    const getFieldValueByEmail = async (email) => {\r\n        try {\r\n            const accountDocRef = doc(firestore, 'accounts', email);\r\n            const accountDocSnapshot = await getDoc(accountDocRef);\r\n\r\n            if (accountDocSnapshot.exists()) {\r\n\r\n            } else {\r\n                // console.log('Document does not exist');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching field value:', error);\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const handleSignOut = () => {\r\n\r\n        signOut(projectControlAuth).then(() => {\r\n            navigation.navigate('Login');\r\n            setEmail('');\r\n            setName('');\r\n        }).catch(() => {\r\n            // An error happened.\r\n        });\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    const showDrawerIcon = useBreakpointValue([true, true, true, false]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const NamePopover = ({ name, handleSignOut }) => {\r\n        const [showNamePopover, setShowNamePopover] = useState(false);\r\n\r\n        const showPopover = () => {\r\n            setShowNamePopover(!showNamePopover);\r\n        };\r\n\r\n        return (\r\n            <Box w={[100, 200, 1020]} h={[10, 10, 10]} flex={1}>\r\n                <Flex direction=\"row-reverse\">\r\n                    <Popover\r\n                        isOpen={showNamePopover}\r\n                        trigger={(triggerProps) => (\r\n                            <Text color=\"white\" marginTop={[2, 2, 2]} fontSize={[17, 18, 20]} marginRight={[1, 3, 5]} {...triggerProps} onPress={showPopover}>\r\n                                <MaterialCommunityIcons name=\"account\" size={[20, 25, 30]} color=\"white\" /> {name} <Ionicons name=\"caret-down\" size={16} color=\"white\" />\r\n                            </Text>\r\n                        )}\r\n                        onClose={() => setShowNamePopover(!showNamePopover)}\r\n                        placement='bottom right'\r\n                        trapFocus={false}\r\n                    >\r\n                        <Popover.Content backgroundColor={'#7B9CFF'}>\r\n                            {/* <Popover.Arrow bgColor={'#7B9CFF'} /> */}\r\n                            <Popover.Body backgroundColor={'#7B9CFF'}>\r\n                                <Button _hover={{ bgColor: 'blueGray.500' }} onPress={handleSignOut} leftIcon={<MaterialCommunityIcons name=\"logout\" size={20} color=\"white\" />} bgColor={'transparent'}>\r\n                                    Logout\r\n                                </Button>\r\n                            </Popover.Body>\r\n                        </Popover.Content>\r\n                    </Popover>\r\n                </Flex>\r\n            </Box>\r\n        );\r\n    };\r\n\r\n    const styles = StyleSheet.create({\r\n        container: {\r\n            flex: 1,\r\n        },\r\n        image: {\r\n            flex: 1,\r\n        },\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <View style={{ backgroundColor: \"#A6BCFE\", height: '100%', width: '100%', flexDirection: 'column', }} bgColor=\"#A6BCFE\" h=\"100vh\" w=\"full\" flexDirection=\"column\">\r\n                {/* Header */}\r\n                <Box\r\n                    px=\"3\"\r\n                    bgColor='#7b9cff'\r\n                    height={54}\r\n                    position=\"sticky\"\r\n                    top={0}\r\n                    zIndex={999}\r\n                    flexDirection=\"row\"\r\n                    alignItems=\"center\"\r\n                    borderBottomWidth={2}\r\n                    borderBottomColor={'cyan.500'}\r\n                >\r\n\r\n                    <Box w={screenWidth <= 960 ? 0 : 850} h={[10, 10, 10, 10]} marginBottom={1.5} marginTop={1.5}>\r\n\r\n                        <FastImage\r\n                            source={{\r\n                                uri: 'https://firebasestorage.googleapis.com/v0/b/samplermj.appspot.com/o/C-HUB%20Logos%2FC-HUB%20LOGO%20FULL.png?alt=media&token=79ed34a5-f960-4154-b4e8-897b0f3248d4',\r\n                                priority: FastImage.priority.high,\r\n                            }}\r\n                            resizeMode={FastImage.resizeMode.stretch}\r\n                            style={styles.image} />\r\n                    </Box>\r\n\r\n                    {screenWidth <= 960 && <MobileViewDrawer\r\n                        selectedScreen={selectedScreen} />}\r\n\r\n\r\n                    <Box w={screenWidth <= 960 ? 120 : 0} h={screenWidth <= 960 ? 6 : 10} marginBottom={1.5} marginTop={1.5} marginLeft={[3, 3, 3, 10]}>\r\n\r\n                        <FastImage\r\n                            source={{\r\n                                uri: 'https://firebasestorage.googleapis.com/v0/b/samplermj.appspot.com/o/C-HUB%20Logos%2FC-HUB%20LOGO%20HALF.png?alt=media&token=7ce6aef2-0527-40c7-b1ce-e47079e144df',\r\n                                priority: FastImage.priority.high,\r\n                            }}\r\n                            resizeMode={FastImage.resizeMode.stretch}\r\n                            style={styles.image} />\r\n                    </Box>\r\n                    <NamePopover name={name} handleSignOut={handleSignOut} />\r\n\r\n\r\n                </Box>\r\n\r\n                {/* Content */}\r\n                <View style={{ flex: 1, flexDirection: 'row' }} flex={[1]} flexDirection=\"row\">\r\n                    {/* Sidebar */}\r\n                    <SideDrawer\r\n                        selectedScreen={selectedScreen} />\r\n\r\n                    {/* Main Content */}\r\n                    {/* <Box flex={1} flexGrow={1} minHeight={0}> */}\r\n                    {/* Main Content Content */}\r\n\r\n\r\n                    {/* <Box px=\"3\" bgColor=\"#A6BCFE\" height=\"full\" > */}\r\n                    <View style={{ flex: 1, backgroundColor: \"#A6BCFE\", height: '100%' }}>\r\n                        <ScrollView style={{ flex: 1, }} keyboardShouldPersistTaps='always'>\r\n                            <View style={{ flex: 1, }}>\r\n\r\n                                <FreightNavigation />\r\n                                <NavigatePage />\r\n                                {/* {selectedButton == 'countries' ? <CountriesTable /> : <></>}\r\n                                {selectedButton == 'ports' ? <PortsTable /> : <></>} */}\r\n                            </View>\r\n                        </ScrollView>\r\n                        {/* <SuccessModal /> */}\r\n\r\n                    </View>\r\n\r\n\r\n                    {/* </Box> */}\r\n\r\n                    {/* </Box> */}\r\n                </View>\r\n\r\n            </View>\r\n            <LoadingModal />\r\n\r\n        </>\r\n    );\r\n}"],"names":["_textStyle","checked","fontSize","color","textDecorationLine","StyleSheet","create","container","alignItems","flexDirection","iconImageStyle","width","height","textContainer","marginLeft","iconContainer","size","fillColor","unfillColor","borderRadius","backgroundColor","justifyContent","innerIconContainer","borderWidth","borderColor","defaultCheckImage","require","BouncyCheckbox","_React$Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","bounceEffect","value","velocity","bounciness","_this$props$useNative","useNativeDriver","Animated","spring","state","bounceValue","toValue","start","renderCheckIcon","_this$props","_this$props$size","iconStyle","iconComponent","_this$props$fillColor","_this$props$ImageComp","ImageComponent","Image","_this$props$unfillCol","disableBuiltInState","isChecked","innerIconStyle","_this$props$checkIcon","checkIconImageSource","checkStatus","_jsx","View","style","transform","scale","styles","children","source","renderCheckboxText","_this$props2","text","textComponent","textStyle","textContainerStyle","_this$props2$disableT","disableText","Text","onPress","_this$props$disableBu","setState","springValue","Value","_createClass","key","this","_this2","_this$props3","_this$props3$bounceEf","bounceEffectIn","_this$props3$bounceEf2","bounceEffectOut","_this$props3$bounceVe","bounceVelocityIn","_this$props3$bounceVe2","bounceVelocityOut","_this$props3$bouncine","bouncinessIn","_this$props3$bouncine2","bouncinessOut","_this$props3$Touchabl","TouchableComponent","Pressable","_jsxs","_objectSpread","onPressIn","onPressOut","React","_Dimensions$get","Dimensions","get","selectedScreen","nameVariable","defaultSelectedButton","selectedPort","selectedCountry","selectedPortForCountry","firestore","getFirestore","getEmailOfCurrentUser","user","projectControlAuth","currentUser","email","SearchablePortDropdown","_ref","modalAddOpen","_useState","useState","_useState2","_slicedToArray","query","setQuery","_useState3","_useState4","isDropdownVisible","setIsDropdownVisible","_useState5","_useState6","data","setData","searchRef","useRef","useEffect","docRef","doc","projectExtensionFirestore","unsubscribe","onSnapshot","docSnap","exists","formattedData","Object","keys","map","ports","replace","sort","a","b","sortOrder","console","log","error","filteredData","filter","item","toLowerCase","includes","trim","country","current","focus","flex","Button","title","bgColor","alignSelf","MaterialIcons","name","display","TextInput","ref","outlineStyle","padding","placeholder","onChangeText","FlatList","renderItem","_ref2","TouchableOpacity","borderBottomWidth","borderBottomColor","keyExtractor","toString","LoadingModal","loadingModalVisible","useSelector","position","top","bottom","left","right","Spinner","addLogToCollection","_ref3","_asyncToGenerator","logsCollectionRef","collection","projectControlFirestore","addDoc","_x","apply","arguments","SortAndAddModal","_ref4","headerText","dataName","databaseInit","textAreaAdd","handleAddTextChange","docName","collectionName","_useState7","handleFirstModalClose","handleFirstModalOpen","_useState8","modalSortOpen","setModalSortOpen","_useState9","_useState10","setModalAddOpen","_useState11","_useState12","modalAddSuccess","setModalAddSuccess","_useState13","_useState14","modalSave","setModalSave","_useState15","_useState16","modalSaveLoading","setModalSaveLoading","_useState17","_useState18","modalData","setModalData","_useState19","_useState20","modalIsLoading","setModalIsLoading","handleDeleteItemPress","useCallback","prevData","fetchData","_modalDocSnap$data","modalDocRef","modalDocSnap","getDoc","handleSave","datetime","axios","formattedTime","moment","format","year","month","monthWithDay","date","day","time","timeWithMinutesSeconds","updateDoc","_defineProperty","logData","message","timestamp","colorScheme","keywords","handleModalSaveClose","handleSortModalOpen","handleSortModalClose","handleModalAddOpen","handleModalAddClose","_textAreaAdd$current","clear","handleModalAddSuccessClose","handleModalAddSuccessOpen","handleModalSaveOpen","handleAddSubmit","_ref8","_textAreaAdd$current2","dataArray","split","modalCollectionRef","setDoc","arrayUnion","_toConsumableArray","merge","_Fragment","Box","marginRight","Icon","as","MaterialCommunityIcons","Modal","isOpen","onClose","Content","CloseButton","Header","bold","Body","w","flexDir","FontAwesome","DraggableFlatList","alignContent","_ref9","drag","AntDesign","textAlign","Entypo","onDragEnd","_ref10","Footer","borderTopWidth","HStack","space","isLoading","initialFocusRef","TextArea","multiline","totalLines","borderLeftWidth","borderLeftColor","margin","_text","FreightNavigation","screenWidth","dispatch","useDispatch","_useState21","_useState22","selectedButtonState","setSelectedButtonState","handlePress","button","setLoadingModalVisible","setSelectedButton","fontWeight","SelectMethod","_ref11","defaultValue","portCode","page","searchQuery","_useState23","_useState24","selectedMethod","setSelectedMethod","methodData","toast","useToast","currentValue","updatePortMethod","_ref12","newValue","documentRef","methodField","show","render","_x2","_x3","formattedPortCode","documentSnapshot","portData","method","Select","selectedValue","onValueChange","accessibilityLabel","_selectedItem","bg","endIcon","CheckIcon","Item","label","TouchableHighlight","underlayColor","SelectInspectionIsRequired","_ref13","countryCode","_useState25","_useState26","selectedInspectionIsRequired","setSelectedInspectionIsRequired","inspectionIsRequiredData","updateCountryInspection","_ref14","inspectionIsRequiredField","_x4","_x5","formattedCountryCode","countryData","inspectionIsRequired","SelectInspectionName","_ref15","_useState27","_useState28","selectedInspectionName","setSelectedInspectionName","inspectionNameData","updateCountryInspectionName","_ref16","inspectionNameField","_x6","_x7","inspectionName","addPort","_ref17","portName","newCountryData","_x8","_x9","_x10","addCountry","_ref18","countryName","_x11","_x12","_x13","_x14","AddCountryModal","_ref19","handleAddCountryModalClose","addCountryModalVisible","inputCountryText","_useState29","_useState30","addButtonLoading","setAddButtonLoading","handleAddButton","_ref20","_inputCountryText$cur","_inputCountryText$cur2","setAddCountryModalVisible","marginVertical","inputRef","filteredValue","setNativeProps","filterInput","borderBottomLeftRadius","borderBottomRightRadius","placeholderTextColor","Group","variant","NavigatePage","selectedButton","CountriesTable","PortsTable","AddPortsForCountriesModal","_ref21","handleAddPortsForCountriesModalClose","addPortsForCountriesModalVisible","handleAddPortsForCountriesModalOpen","_useState31","countryPortsData","_useState32","_useState33","_useState34","_useState35","_useState36","_useState37","_useState38","_useState39","_useState40","_useState41","_useState42","_useState43","_useState44","nearestPorts","setAddPortsForCountriesModalVisible","addPortForCountryField","_ref22","nearestPortsField","_docSnap$data$formatt","concat","_x15","updateCountryPortsField","_ref23","_x16","_ref24","_ref25","disabled","DeleteCountryModal","_ref26","handleDeleteCountryModalClose","deleteCountryModalVisible","_useState45","_useState46","buttonLoading","setButtonLoading","handleDeleteCountry","_ref27","formattedFieldCode","deleteField","then","catch","optionsPerPage","_useState47","_useState48","_useState49","_useState50","setPage","_useState51","_useState52","itemsPerPage","setItemsPerPage","_useState53","_useState54","setSearchQuery","_useState55","_useState56","setFilteredData","inputSearchRef","inputSortOrder","textAreaAddInspectionIsRequired","textAreaAddInspectionName","filtered","useMemo","paginatedData","startIndex","endIndex","slice","handleSearch","debounce","_inputSearchRef$curre","Math","min","length","handleAddCountryModalOpen","setCountryPortsData","forEach","updateCountrySortOrder","_ref28","sortOrderField","_x17","_x18","_x19","handleSortOrderTextChange","numericValue","handleDeleteCountryModalOpen","setDeleteCountryModalVisible","handleUpdateInsurance","_ref29","insuranceField","_x20","_x21","_x22","onSubmitEditing","returnKeyType","autoCapitalize","paddingHorizontal","paddingTop","paddingBottom","marginTop","_textAreaAddInspectio4","textAreaValue","newText","line","charAt","toUpperCase","join","_textAreaAddInspectio3","DataTable","index","paddingVertical","marginHorizontal","selectable","borderTopLeftRadius","borderTopRightRadius","fontFamily","insurance","Pagination","numberOfPages","ceil","onPageChange","showFastPagination","optionsLabel","AddPortModal","_ref32","handleAddPortModalClose","addPortModalVisible","inputPortText","_useState57","_useState58","_ref33","_inputPortText$curren","_inputCountryText$cur3","_inputCountryText$cur4","_inputPortText$curren2","_inputCountryText$cur5","setAddPortModalVisible","DeletePortModal","_ref34","handleDeletePortModalClose","deletePortModalVisible","_useState59","_useState60","handleDeletePort","_ref35","_useState61","_useState62","_useState63","_useState64","_useState65","_useState66","_useState67","_useState68","textAreaAddMethod","inputProfitPrice","inputNagoyaPrice","inputYokohamaPrice","inputKyushuPrice","inputKobePrice","inputMemo","_useState69","_useState70","handleProfitPriceTextChange","updatePortsField","_ref36","fieldName","field","_x23","_x24","_x25","_x26","_x27","_inputSearchRef$curre2","memo","profitPrice","nagoyaPrice","yokohamaPrice","kyushuPrice","kobePrice","handleAddPortModalOpen","handleDeletePortModalOpen","setDeletePortModalVisible","_textAreaAddMethod$cu","paddingLeft","Freight","_useState71","_useState72","setEmail","_useState73","_useState74","_useState75","_useState76","navigation","useNavigation","_useState77","_useState78","loginName","_useState79","_useState80","setName","_useState81","_useState82","_useState83","_useState84","_useState85","_useState86","onAuthStateChanged","navigate","handleDocumentChange","snapshot","active","signOut","_projectControlAuth$c","userId","userRef","subscribeToFieldChange","currentUserEmail","getFieldValueByEmail","listenForNameChange","documentId","_ref51","accountDocRef","_x28","useBreakpointValue","image","h","px","zIndex","marginBottom","FastImage","uri","priority","high","resizeMode","stretch","MobileViewDrawer","_ref52","handleSignOut","_useState87","_useState88","showNamePopover","setShowNamePopover","showPopover","Flex","direction","Popover","trigger","triggerProps","Ionicons","placement","trapFocus","_hover","leftIcon","SideDrawer","ScrollView","keyboardShouldPersistTaps"],"sourceRoot":""}